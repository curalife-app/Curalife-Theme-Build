{% comment %}Admin and page configuration{% endcomment %}
{% assign adminIdentifiers = 'adminBarInjector,admin-bar-iframe,preview_bar_injector-' | split: ',' %}
{% assign admin = false %}

{% for identifier in adminIdentifiers %}
	{% if CFH contains identifier %}
		{% assign admin = true %}
		{% break %}
	{% endif %}
{% endfor %}

{% comment %}Page type detection{% endcomment %}
{% assign isBlog = false %}
{% if request.path contains '/blogs/' %}
	{% assign isBlog = true %}
{% endif %}

{% assign isCuralinSubPage = false %}
{% if request.path contains '/products/curalin-pack-sub' %}
	{% assign isCuralinSubPage = true %}
	{% assign redirectGlobalToPath = 'products/curalin' %}
{% endif %}

{% if request.path contains '/pages/curalin-clinically-tested-blood-sugar-support' or request.path contains '-aff' %}
	{% assign admin = true %}
{% endif %}

{% if customer.b2b? %}
	{% assign admin = true %}
{% endif %}

{% unless admin %}
	<script>
		// Update the Logger class implementation
		class Logger {
			static DEBUG = new URLSearchParams(window.location.search).get('debug') === 'true';
			static #startTime = performance.now();
			static #levels = { info: 'ðŸ”µ', warn: 'ðŸŸ¡', error: 'ðŸ”´', success: 'ðŸŸ¢' };

			static log(level, msg, data) {
				if (!this.DEBUG) return;
				const elapsed = (performance.now() - this.#startTime).toFixed(2);
				const message = `[${elapsed}ms] ${this.#levels[level]} ${msg}${data ? ` | ${JSON.stringify(data)}` : ''}`;

				switch (level) {
					case 'error':
						console.error(message);
						break;
					case 'warn':
						console.warn(message);
						break;
					default:
						console.log(message);
				}
			}

			static info(msg, data) {
				this.log('info', msg, data);
			}
			static warn(msg, data) {
				this.log('warn', msg, data);
			}
			static error(msg, data) {
				this.log('error', msg, data);
			}
			static success(msg, data) {
				this.log('success', msg, data);
			}
		}

		// Update initialization to use Logger methods
		async function initialize() {
			Logger.info('Starting initialization');

			if (!document.body) {
				Logger.warn('Document body not ready');
				return;
			}

			if (URLManager.isRobot()) {
				Logger.info('Robot detected, skipping redirect');
				return;
			}

			const geoOverride = URLManager.getParam('geo');
			if (geoOverride) {
				Logger.info('Geo override detected', { geo: geoOverride });
				CookieManager.set('country', geoOverride.toUpperCase(), CONFIG.COOKIE_HOURS);
			}

			try {
				Logger.info('Checking country');
				const cachedCountry = CookieManager.get('country');

				if (cachedCountry) {
					Logger.info('Using cached country', { country: cachedCountry });
				}

				const country =
					cachedCountry ||
					(await fetch(CONFIG.GEO_URL)
						.then(res => res.json())
						.then(data => {
							Logger.success('Country detected from API', { country: data.country });
							CookieManager.set('country', data.country, CONFIG.COOKIE_HOURS);
							return data.country;
						}));

				if (country) {
					Logger.info('Processing redirection', { country });
					await RedirectManager.handleRedirection(country);
				}
			} catch (err) {
				Logger.error('Redirection failed', err);
			}
		}

		// Remove CONFIG.DEBUG and use Logger.DEBUG instead
		delete CONFIG.DEBUG;

		// Initialize on DOMContentLoaded
		document.addEventListener('DOMContentLoaded', () => {
			Logger.info('DOM loaded, starting application');
			initialize();
		});
	</script>
{% endunless %}
