{% assign section_id = 'cta-section-' | append: SID %}

<div class="buy-box container md:!max-w-[100vw]" name="{{ buyboxName }}">
	<div class="left">
		<div class="product-image-wrapper">
			{% render 'buy-box-gallery',
				product: prod,
				SID: SID,
				badgeImage: badgeImage,
				thumbnailImage: thumbnailImage,
				thumbnailImageMobile: thumbnailImageMobile,
				isProductThumbs: isProductThumbs,
				thumbs: thumbs
			%}
		</div>
	</div>

	<div class="right">
		<div class="info-wrapper">
			{% unless isHideInfo %}
				<div class="product-info">
					<div class="top-wrapper mbl:flex-col gap-y-2 flex items-center justify-between">
						<div class="titles w-full">
							{% if upperTitleNotice and prod.handle == 'curalin-curabox' -%}
								<div class="upper-title-notice bg-light-pink w-fit text-bronze text-[16px] rounded-full font-bold px-4 py-2 mbl:mx-auto mbl:my-2">
									{{ upperTitleNotice }}
								</div>
							{%- endif %}

							<{{ titleTag | default: 'h1' }} class="product-title m-0 text-black text-[45px] mbl:text-[10vw]">
								{%- if prod.metafields.my_fields.alternative_title.value -%}
									{{- prod.metafields.my_fields.alternative_title.value -}}
								{%- elsif mainTitle != blank -%}
									{{- mainTitle -}}
								{%- else -%}
									{{- prod.title -}}
								{%- endif -%}
							</{{ titleTag | default: 'h1' }}>

							{% if subtitle %}
								<p class="product-subtitle text-[22px] m-0">{{ subtitle }}</p>
							{% endif %}
						</div>

						{% if isShowReviews %}
							<div class="reviews flex items-center flex-wrap justify-end gap-x-2 text-[14px]">
								{% render 'rating-stars', rating: '5' %}
								Over 3000 Reviews
							</div>
						{% endif %}
					</div>

					{%- for block in section.blocks -%}
						{%- case block.type -%}
							{%- when '@app' -%}
								{% render block %}
						{%- endcase -%}
					{%- endfor -%}

					{% if ctaText %}
						<div class="cta-text text-start mt-2" style="margin-bottom: 1.5rem">{{ ctaText }}</div>
					{% endif %}

					{% if isFSA and shop.name != 'CuraLife Global' %}{% render 'fsa-badge', SID: SID %}{% endif %}
				</div>
			{% endunless %}
		</div>

		<div class="actions-wrapper">
			{% if customer.b2b? %}
				{% render 'product-cta-section-actions-add-to-cart',
					SID: SID,
					ctaTextType: ctaTextType,
					isVariantNotice: isVariantNotice,
					product: prod,
					blocks: blocks,
					ctaColor: ctaColor,
					ctaTextColor: ctaTextColor,
					variantsTitle: 'Select Your Product:',
					isHighlightSubtitle: isHighlightSubtitle,
					isReversed: isReversed
				%}
			{% else %}
				{% assign buyBoxSnippetName = 'buy-box-' | append: buyboxType %}
				{% render buyBoxSnippetName,
					prod: prod,
					SID: SID,
					blocks: blocks,
					buyType: buyType,
					variantsTitle: variantsTitle,
					variantsNotice: variantsNotice,
					product: prod,
					ctaColor: ctaColor,
					ctaTextColor: ctaTextColor,
					defaultSelectionIndex: defaultSelectionIndex,
					pricePer: pricePer,
					priceFormat: priceFormat,
					isOneTimePurchaseLink: isOneTimePurchaseLink,
					isSlideVariant: isSlideVariant,
					isOneTimeGift: isOneTimeGift,
					isHideInfo: isHideInfo,
					buyboxType: buyboxType,
					buyboxName: buyboxName
				%}

				{% render 'buy-box-subscription-5',
					prod: prod,
					SID: SID,
					blocks: blocks,
					buyType: buyType,
					variantsTitle: variantsTitle,
					variantsNotice: variantsNotice,
					product: prod,
					ctaColor: ctaColor,
					ctaTextColor: ctaTextColor,
					defaultSelectionIndex: defaultSelectionIndex,
					pricePer: pricePer,
					priceFormat: priceFormat,
					isOneTimePurchaseLink: isOneTimePurchaseLink,
					isSlideVariant: isSlideVariant,
					isOneTimeGift: isOneTimeGift,
					isHideInfo: isHideInfo,
					buyboxType: buyboxType,
					buyboxName: buyboxName,
					sellingPlanUI: sellingPlanUI
				%}
			{% endif %}
		</div>
	</div>
</div>

<style>
	#cta-section-{{ SID }} {
		.buy-box {
			display: flex;
			justify-content: space-between;
		}

		.left {
			width: 50%;
			flex-shrink: 0;
			position: relative;
		}

		.product-image-wrapper {
			position: relative;
			width: 100%;
		}

		.right {
			width: 45%;
			flex-shrink: 0;
			display: flex;
			flex-direction: column;

			@media screen and (max-width: 768px) {
				width: 100%;
				display: contents;
			}
		}

		.info-wrapper,
		.actions-wrapper {
			width: 100%;
		}

		.product-info {
			padding: unset;
			width: 100%;
		}

		.container.line {
			margin-top: -50px;
		}

		.cta-text {
			font-size: 16px;

			h6 {
				font-weight: 600;
				margin-bottom: 0.5rem;
				font-family: 'DM Sans', sans-serif;
				color: var(--primary-color);
			}

			ul li {
				padding-left: 1.5rem;
				margin-bottom: 0.25rem;

				strong {
					color: var(--black);
				}

				&::before {
					content: "âœ“";
					background: unset;
					color: var(--primary-color);
					display: flex;
					justify-content: center;
					align-items: center;
				}
			}
		}

		@media screen and (max-width: 1270px) {
			.container {
				max-width: unset;
				padding: 0 20px;
			}
		}

		@media screen and (max-width: 768px) {
			padding-top: 0;

			.container {
				padding: 0 20px !important;
			}

			.buy-box {
				display: flex !important;
				flex-direction: column !important;
				position: relative;
				width: 100%;
			}

			.left,
			.right {
				width: 100% !important;
			}

			.left,
			.info-wrapper,
			.actions-wrapper {
				order: initial;
			}

			.info-wrapper {
				order: 1 !important;
				width: 100%;
				max-height: 33vw;
			}

			.left {
				order: 2 !important;
				width: 100%;
			}

			.actions-wrapper {
				order: 3 !important;
				width: 100%;
			}

			.product-info {
				text-align: center;
				padding-top: 15vw;
			}
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
		if (!productActions) return;

		const purchaseOptionBoxes = productActions.querySelectorAll('.variant-box');
		const submitButton = productActions.querySelector('.checkout-button button');
		const submitSellingPlanId = productActions.querySelector('.submit-selling-plan-id');
		const submitVariantId = productActions.querySelector('.submit-variant-id');
		const oneTimeButton = productActions.querySelector('.one-time-add-to-cart');
		// Use data attribute for more specific selection
		const frequencySelector = productActions.querySelector('[data-frequency-container]');
		const sellingPlanUIType = frequencySelector ? frequencySelector.dataset.uiType : 'tabs';
		const SID = '{{ SID }}';
		const buyType = '{{ buyType }}';
		const priceFormat = '{{ priceFormat }}';

		// ... existing code ...

		// Updated function to select frequency option - handles both tabs and dropdown
		function selectFrequencyOption(option) {
			if (!option) return;

			const newSellingPlanId = option.getAttribute ? option.getAttribute('data-selling-plan-id') : option.value;
			if (!newSellingPlanId) return;

			BuyBoxState.setState({
				selectedFrequency: option,
				sellingPlanId: newSellingPlanId
			});

			// If we're using tabs UI
			if (sellingPlanUIType === 'tabs') {
				const frequencyOptions = document.getElementById('frequency-options-{{ SID }}');
				if (frequencyOptions) {
					Array.from(frequencyOptions.children).forEach(box => {
						if (box === option) {
							box.style.backgroundColor = 'var(--primary-color)';
							box.style.color = 'white';
						} else {
							box.style.backgroundColor = 'var(--bg-color)';
							box.style.color = 'var(--primary-color)';
						}
					});
				}
			}
			// For dropdown, selection is handled by the select element

			const selectedBox = productActions.querySelector('.variant-box.selected');
			if (selectedBox && selectedBox.dataset.purchaseType === 'subscribe') {
				selectedBox.dataset.subscriptionSellingPlanId = newSellingPlanId;
			}

			// Make sure to update the frequency description text
			updateFrequencyDescription();
		}

		// ... existing code ...

		// Updated function to populate frequency selector - handles both tabs and dropdown
		function populateFrequencySelector(el) {
			try {
				// Use the data attribute for more specific selection
				const frequencyContainer = productActions.querySelector('[data-frequency-container]');
				if (!frequencyContainer) return;

				const isDropdown = sellingPlanUIType === 'dropdown';
				const frequencyOptions = isDropdown ? document.getElementById('frequency-dropdown-{{ SID }}') : document.getElementById('frequency-options-{{ SID }}');

				if (!frequencyOptions) return;

				// Clear previous options
				if (isDropdown) {
					frequencyOptions.innerHTML = '';
				} else {
					frequencyOptions.innerHTML = '';
				}

				const variant = el.dataset.originalVariant || el.dataset.variant;
				const isSub = el.dataset.purchaseType === 'subscribe';
				const allowedSellingPlans = el.dataset.allowedSellingPlans ? el.dataset.allowedSellingPlans.trim() : '';
				const bottleQuantity = parseInt(el.dataset.bottleQuantity || '1', 10);

				// For debugging allowed selling plans
				if (allowedSellingPlans) {
					console.log('Variant has allowed selling plans:', allowedSellingPlans);
				}

				if (!isSub) {
					frequencyContainer.classList.add('hidden');
					return;
				}

				const productId = el.dataset.product;

				console.log('Populating frequency selector:', {
					productId,
					variant,
					hasProductData: window.productData && window.productData[productId] ? 'Yes' : 'No',
					allowedSellingPlans: allowedSellingPlans || 'None specified',
					recommendedFrequency: bottleQuantity,
					uiType: sellingPlanUIType
				});

				const variantId = parseInt(variant);

				let selectedVariant = null;
				if (window.productData && window.productData[productId]) {
					const product = window.productData[productId];
					if (product.variants) {
						// First try exact match
						selectedVariant = product.variants.find(v => v.id === variantId);

						if (!selectedVariant) {
							console.log(
								'Variant not found in product data. Available variants:',
								product.variants.map(v => v.id)
							);

							// Try original variant as fallback
							const originalVariantId = parseInt(el.dataset.originalVariant || '0');
							if (originalVariantId > 0) {
								selectedVariant = product.variants.find(v => v.id === originalVariantId);

								if (selectedVariant) {
									console.log('Found variant using original variant ID fallback');
								}
							}
						}
					}
				}

				if (!selectedVariant) {
					console.log('Using fallback for subscription plan options - variant not found in product data');
					handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer);
					return;
				}

				// Check if variant has selling plan allocations
				if (!selectedVariant.selling_plan_allocations || selectedVariant.selling_plan_allocations.length === 0) {
					console.warn('Selected variant has no selling plan allocations:', selectedVariant.id);
					handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer);
					return;
				}

				// Find selling plan that matches the bottle quantity (recommended frequency)
				let recommendedSellingPlanId = '';
				if (selectedVariant.selling_plan_allocations) {
					for (const allocation of selectedVariant.selling_plan_allocations) {
						const { value, unit } = extractFrequency(allocation.selling_plan.name);

						// If unit is months and matches bottle quantity
						if (unit === 'month' && value === bottleQuantity) {
							recommendedSellingPlanId = allocation.selling_plan.id.toString();
							break;
						}
					}
				}

				// If we found a recommended selling plan, set it as the current
				if (recommendedSellingPlanId && !el.dataset.subscriptionSellingPlanId) {
					el.dataset.subscriptionSellingPlanId = recommendedSellingPlanId;
				}

				if (isDropdown) {
					updateDropdownOptionsFromVariant(selectedVariant, el.dataset.subscriptionSellingPlanId);
				} else {
					updateFrequencyOptionsFromVariant(selectedVariant, el.dataset.subscriptionSellingPlanId);
				}
			} catch (error) {
				console.error('Error in populateFrequencySelector:', error);
				handleFallbackFrequencyOptions(
					el,
					sellingPlanUIType === 'dropdown' ? document.getElementById('frequency-dropdown-{{ SID }}') : document.getElementById('frequency-options-{{ SID }}'),
					productActions.querySelector('[data-frequency-container]')
				);
			}
		}

		// New function for dropdown UI
		function updateDropdownOptionsFromVariant(variant, currentSellingPlanId) {
			if (!variant) return;
			const frequencyDropdown = document.getElementById('frequency-dropdown-{{ SID }}');
			if (!frequencyDropdown) return;

			// Use data attribute for more specific selection
			const frequencyContainer = productActions.querySelector('[data-frequency-container]');
			if (!frequencyContainer) return;

			let sellingPlans = variant.selling_plan_allocations || [];

			console.log('Updating dropdown frequency options:', {
				variantId: variant.id,
				plansCount: sellingPlans.length,
				currentSellingPlanId
			});

			if (sellingPlans.length === 0) {
				frequencyContainer.classList.add('hidden');
				return;
			}

			const { filteredPlans, hasChanged } = getFilteredSellingPlans(
				sellingPlans,
				new Set(), // Not needed for dropdown
				currentSellingPlanId
			);

			if (filteredPlans.length === 0) {
				handleNoMatchingPlansDropdown(frequencyDropdown, currentSellingPlanId, frequencyContainer);
				return;
			}

			// Always rebuild dropdown options
			rebuildDropdownOptions(frequencyDropdown, filteredPlans, currentSellingPlanId);

			updateFrequencyDescription();

			if (frequencyContainer.classList.contains('hidden')) {
				frequencyContainer.style.opacity = '0';
				frequencyContainer.classList.remove('hidden');
				setTimeout(() => {
					frequencyContainer.style.opacity = '1';
				}, 10);
			}
		}

		// New function to rebuild dropdown options
		function rebuildDropdownOptions(frequencyDropdown, filteredPlans, currentSellingPlanId) {
			frequencyDropdown.innerHTML = '';
			const selectedBox = productActions.querySelector('.variant-box.selected');
			const recommendedMonths = parseInt(selectedBox?.dataset.bottleQuantity || '1', 10);

			filteredPlans.forEach(allocation => {
				// Defensive check to ensure allocation exists
				if (!allocation || !allocation.selling_plan) {
					console.warn('Invalid selling plan allocation detected:', allocation);
					return; // Skip this iteration
				}

				const plan = allocation.selling_plan;

				// Defensive check to ensure plan and plan.name exist
				if (!plan || typeof plan.name === 'undefined') {
					console.warn('Selling plan missing name property:', plan);
					return; // Skip this iteration
				}

				let value, unit;
				try {
					const result = extractFrequency(plan.name);
					value = result.value;
					unit = result.unit;
				} catch (error) {
					console.warn('Error extracting frequency from plan name:', plan.name, error);
					value = 1;
					unit = 'month';
				}

				const option = document.createElement('option');
				option.value = plan.id;

				// Change label format based on the frequency unit
				let displayText = '';
				if (unit === 'day') {
					displayText = value === 1 ? 'Every Day' : `Every ${value} Days`;
				} else {
					// month
					displayText = value === 1 ? 'Every Month' : `Every ${value} Months`;
				}

				option.textContent = displayText;

				// Mark as selected if it's the current plan
				const isRecommendedMonthPlan = unit === 'month' && value === recommendedMonths;
				const shouldSelectRecommended = !currentSellingPlanId || isRecommendedMonthPlan;

				if ((plan.id && plan.id.toString() === currentSellingPlanId) || (shouldSelectRecommended && isRecommendedMonthPlan)) {
					option.selected = true;

					// Update the current box with the recommended selling plan ID
					if (shouldSelectRecommended && isRecommendedMonthPlan) {
						currentSellingPlanId = plan.id.toString();

						// Update the selected box with the new selling plan ID
						if (selectedBox) {
							selectedBox.dataset.subscriptionSellingPlanId = currentSellingPlanId;
							if (submitSellingPlanId) submitSellingPlanId.value = currentSellingPlanId;
						}
					}
				}

				frequencyDropdown.appendChild(option);
			});

			// Add change event listener
			frequencyDropdown.addEventListener('change', function () {
				const option = {
					value: this.value,
					getAttribute: function (attr) {
						if (attr === 'data-selling-plan-id') return this.value;
						return null;
					}
				};
				selectFrequencyOption(option);
			});
		}

		// New function to handle fallback for dropdown
		function handleNoMatchingPlansDropdown(frequencyDropdown, currentSellingPlanId, frequencyContainer) {
			// Clear existing options
			frequencyDropdown.innerHTML = '';

			if (currentSellingPlanId) {
				// If we have a current plan, create a fallback option
				console.log('Creating fallback option for current selling plan in dropdown:', currentSellingPlanId);

				const option = document.createElement('option');
				option.value = currentSellingPlanId;
				option.textContent = 'Current Plan';
				option.selected = true;

				frequencyDropdown.appendChild(option);
				frequencyContainer.classList.remove('hidden');

				// Add change event listener
				frequencyDropdown.addEventListener('change', function () {
					const optionObj = {
						value: this.value,
						getAttribute: function (attr) {
							if (attr === 'data-selling-plan-id') return this.value;
							return null;
						}
					};
					selectFrequencyOption(optionObj);
				});

				// Log details about what happened
				console.log('No matching filtered plans found for dropdown, using fallback with current selling plan ID:', currentSellingPlanId);

				// Make sure the frequency description is updated too
				updateFrequencyDescription();
			} else {
				// If no current plan either, hide the container
				console.warn('No current or filtered plans available for dropdown, hiding frequency selector');
				frequencyContainer.classList.add('hidden');

				// If in theme editor, add a visible notice
				if (window.Shopify && window.Shopify.designMode) {
					const notice = document.createElement('div');
					notice.className = 'text-red-500 text-sm mt-2 p-2 border border-red-300 rounded';
					notice.textContent = 'No valid subscription frequencies available. Check your allowed selling plan IDs configuration.';
					frequencyContainer.appendChild(notice);
					frequencyContainer.classList.remove('hidden');
				}
			}
		}

		// Modified function to handle both UI types
		function handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer) {
			if (!frequencyOptions || !frequencyContainer) return;

			const isDropdown = sellingPlanUIType === 'dropdown';

			if (el.dataset.purchaseType === 'subscribe') {
				const bottleQuantity = parseInt(el.dataset.bottleQuantity || '1', 10);
				const currentSellingPlanId = el.dataset.subscriptionSellingPlanId;

				if (currentSellingPlanId) {
					if (isDropdown) {
						// Dropdown fallback
						frequencyOptions.innerHTML = '';
						const option = document.createElement('option');
						option.value = currentSellingPlanId;
						option.textContent = `Every ${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}`;
						option.selected = true;
						frequencyOptions.appendChild(option);

						// Add change event listener
						frequencyOptions.addEventListener('change', function () {
							const optionObj = {
								value: this.value,
								getAttribute: function (attr) {
									if (attr === 'data-selling-plan-id') return this.value;
									return null;
								}
							};
							selectFrequencyOption(optionObj);
						});
					} else {
						// Tabs fallback (original implementation)
						frequencyOptions.innerHTML = '';
						const fallbackBox = document.createElement('div');
						fallbackBox.className = 'frequency-box rounded-md cursor-pointer py-2 min-w-[90px] max-w-[168px] text-center w-full transition-all duration-300 ease-in-out';
						fallbackBox.style.backgroundColor = 'var(--primary-color)';
						fallbackBox.style.color = 'white';
						fallbackBox.setAttribute('data-selling-plan-id', currentSellingPlanId);
						fallbackBox.setAttribute('data-frequency-value', bottleQuantity.toString()); // Use bottle quantity as default recommended frequency
						fallbackBox.setAttribute('data-frequency-unit', 'month'); // Default to months
						fallbackBox.innerHTML = `
						<div class="p-1">
							<span class="font-semibold">Every ${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}</span>
						</div>
					`;
						frequencyOptions.appendChild(fallbackBox);

						// Make sure fallback box has click handler
						fallbackBox.addEventListener('click', function () {
							selectFrequencyOption(this);
						});
					}

					frequencyContainer.classList.remove('hidden');

					// Update description
					setTimeout(updateFrequencyDescription, 100);
				} else {
					frequencyContainer.classList.add('hidden');
				}
			} else {
				frequencyContainer.classList.add('hidden');
			}
		}

		// ... existing code ...

		// Update the frequency description function to work with both UIs
		function updateFrequencyDescription() {
			const descriptionEl = productActions.querySelector('.frequency-description');
			if (!descriptionEl) return;

			let selectedFrequencyValue, selectedFrequencyUnit;

			if (sellingPlanUIType === 'dropdown') {
				const dropdown = document.getElementById('frequency-dropdown-{{ SID }}');
				if (!dropdown || !dropdown.options || dropdown.options.length === 0) return;

				const selectedOption = dropdown.options[dropdown.selectedIndex];
				if (!selectedOption) return;

				// Extract frequency from option text
				const optionText = selectedOption.textContent;
				const dayMatch = optionText.match(/Every (\d+) Days?/);
				const monthMatch = optionText.match(/Every (\d+) Months?/);

				if (dayMatch) {
					selectedFrequencyValue = parseInt(dayMatch[1], 10);
					selectedFrequencyUnit = 'day';
				} else if (monthMatch) {
					selectedFrequencyValue = parseInt(monthMatch[1], 10);
					selectedFrequencyUnit = 'month';
				} else if (optionText.includes('Every Day')) {
					selectedFrequencyValue = 1;
					selectedFrequencyUnit = 'day';
				} else if (optionText.includes('Every Month')) {
					selectedFrequencyValue = 1;
					selectedFrequencyUnit = 'month';
				} else {
					selectedFrequencyValue = 1;
					selectedFrequencyUnit = 'month';
				}
			} else {
				const frequencyOptions = document.getElementById('frequency-options-{{ SID }}');
				if (!frequencyOptions) return;

				const selectedOption = Array.from(frequencyOptions.children).find(el => el.style.backgroundColor === 'var(--primary-color)');
				if (!selectedOption) return;

				selectedFrequencyValue = parseInt(selectedOption.getAttribute('data-frequency-value') || '1', 10);
				selectedFrequencyUnit = selectedOption.getAttribute('data-frequency-unit') || 'month';
			}

			const bottleQuantity = parseInt(state.selectedBox?.dataset.bottleQuantity || '1', 10);

			let description = '';

			// If selected frequency matches recommended frequency (only for months)
			if (selectedFrequencyUnit === 'month' && selectedFrequencyValue === bottleQuantity) {
				description = ''; // No text when on recommended frequency
			} else {
				// Otherwise show the recommendation
				description = `Recommended - every ${bottleQuantity} month${bottleQuantity > 1 ? 's' : ''}`;
			}

			// Always update with fade animation, even if going to/from empty
			if (descriptionEl.innerHTML !== description) {
				// Fade out
				DOMUtils.updateStyle(descriptionEl, 'opacity', '0');

				setTimeout(() => {
					// Update content while faded out
					DOMUtils.updateProperty(descriptionEl, 'innerHTML', description);

					// Fade back in
					DOMUtils.updateStyle(descriptionEl, 'opacity', '1');
				}, 200);
			}
		}

		// ... rest of existing code
	});
</script>

// Add some dropdown styles
<style>
	#cta-section-{{ SID }} {
		/* Existing styles */

		/* Dropdown styles */
		select#frequency-dropdown-{{ SID }} {
			appearance: none;
			background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%234A5568'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
			background-repeat: no-repeat;
			background-position: right 0.5rem center;
			background-size: 1.5em 1.5em;
			padding-right: 2.5rem;
			border-color: var(--border-color);
			transition: all 0.3s ease;
		}

		select#frequency-dropdown-{{ SID }}:focus {
			outline: none;
			border-color: var(--primary-color);
			box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.2);
		}

		select#frequency-dropdown-{{ SID }} option {
			padding: 0.5rem;
		}
	}
</style>
