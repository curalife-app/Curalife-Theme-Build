{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if prod.handle == 'curalin' or prod.handle == 'curaslim' or prod.handle contains '-tm' %}
	{% if isGlobal %}
		{% assign shippingPrice = 690 %}
	{% else %}
		{% assign shippingPrice = 790 %}
	{% endif %}
{% else %}
	{% assign shippingPrice = 1000 %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% assign faqsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}

		{% when 'faq' %}
			{% assign faqsAmount = faqsAmount | plus: 1 %}
	{% endcase %}
{% endfor %}

<div
	id="cta-section-{{ SID }}"
	class="cta-section"
	data-default-selection="{{ defaultSelectionIndex }}"
	data-price-format="{{ priceFormat }}"
	data-save-format="{{ saveFormat }}"
	data-price-per="{{ pricePer }}"
	data-thumbs="{{ thumbsLayout }}"
	data-buy-type="{{ buyType }}"
	{% if isOneTimePurchase %}data-one-time-purchase{% endif %}
	{% if isOneTimeGift %}data-one-time-gift{% endif %}
	{% if isSlideVariant %}data-slide-variant{% endif %}
	{% if isPrimeEnabled %}data-buy-with-prime{% endif %}
	{% if isShowReviews %}data-show-reviews{% endif %}
	{% if isProductThumbs %}data-product-thumbs{% endif %}
	{% if isHideThumbs %}data-hide-thumbs{% endif %}
	{% if isHideInfo %}data-hide-info{% endif %}
	{% if isBuyQuantity %}data-buy-quantity{% endif %}>

	<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}" data-gifts-amount="{{ giftsAmount }}">
		<div class="purchase-options flex flex-col gap-3 mb-3">
			<div class="font-semibold text-[18px]">{{ variantsTitle | default: 'Choose your package' }}</div>

			<div class="variant-boxes flex justify-around gap-2">
				{% for block in blocks %}
					{% assign varPurchaseType = block.settings.purchase_type %}
					{% if block.type == 'variant' and varPurchaseType == 'subscribe' %}
						{% assign referenced_variant = blank %}
						{% if isGlobal %}
							{% assign blockVarID = block.settings.variant_id_global | plus: 0 %}
						{% else %}
							{% assign blockVarID = block.settings.variant_id | plus: 0 %}
						{% endif %}

						{% for vari in referenced_variant_product.variants %}
							{% assign currVarID = vari.id | plus: 0 %}

							{% if currVarID == blockVarID %}
								{% assign referenced_variant = vari %}
							{% endif %}
						{% endfor %}

						{% assign var = referenced_variant %}

						{% comment %} Core Variable Assignments {% endcomment %}
						{% assign variant_id = var.metafields.custom.reference_variant_id | default: var.id %}
						{% assign bottle_quantity = var.metafields.my_fields.pack_bottles_quantity %}

						{% comment %} Price Calculations {% endcomment %}
						{% assign original_item_price = var.metafields.custom.original_item.value.price %}
						{% assign original_item_cap = var.metafields.custom.original_item.value.compare_at_price | default: original_item_price %}
						{% assign original_item_cap_total = original_item_cap | times: bottle_quantity %}
						{% assign item_price = var.price | divided_by: bottle_quantity %}

						{% comment %} Savings Calculations {% endcomment %}
						{% assign subscription_save_money = original_item_cap | minus: subscription_item_price %}
						{% assign buy_once_save_money = original_item_cap | minus: item_price %}

						{% comment %} Selling Plan ID Logic {% endcomment %}
						{% if var.metafields.custom.referenced_variant_product_handle %}
							{% assign selling_plan_id = referenced_variant.metafields.subscription.selling_plan_id | default: variant.metafields.subscription.selling_plan_id %}
						{% elsif var.metafields.subscription.selling_plan_id %}
							{% assign selling_plan_id = var.metafields.subscription.selling_plan_id %}
						{% elsif var.selling_plan_allocations.size > 0 %}
							{% assign found_plan = false %}
							{% for allocation in var.selling_plan_allocations %}
								{% if allocation.selling_plan.name contains bottle_quantity %}
									{% assign selling_plan_id = allocation.selling_plan.id %}
									{% assign found_plan = true %}
									{% break %}
								{% endif %}
							{% endfor %}
							{% if found_plan == false %}
								{% assign selling_plan_id = var.selling_plan_allocations.first.selling_plan.id %}
							{% endif %}
						{% endif %}

						{% assign subscription_save_percents = 0 %}
						{% assign subscription_item_price = original_item_cap %}

						{% for allocation in var.selling_plan_allocations %}
							{% assign selling = selling_plan_id | minus: 0 %}
							{% if allocation.selling_plan.id == selling %}
								{% if allocation.compare_at_price %}
									{% assign original_price = allocation.compare_at_price %}
									{% assign discounted_price = allocation.price %}
									{% assign subscription_save_percents = original_price | minus: discounted_price | times: 100 | divided_by: original_price %}
									{% assign mod_5_remainder = subscription_save_percents | modulo: 5 %}
									{% if mod_5_remainder < 3 %}
										{% assign subscription_save_percents = subscription_save_percents | minus: mod_5_remainder %}
									{% else %}
										{% assign subscription_save_percents = subscription_save_percents | plus: 5 | minus: mod_5_remainder %}
									{% endif %}
									{% assign subscription_item_price = discounted_price | divided_by: bottle_quantity %}
								{% else %}
									{% assign subscription_save_percents = 0 %}
									{% assign subscription_item_price = allocation.price | divided_by: bottle_quantity %}
								{% endif %}
							{% endif %}
						{% endfor %}

						{% assign subscription_total_price = subscription_item_price | times: bottle_quantity %}

						{% assign firstMonthDiscount = block.settings.first_month_discount_percentage %}

						<div
						id="variant-box-{{ SID }}-{{ forloop.index }}"
						class="variant-box flex flex-col items-center variant-tab-style text-center w-full {{ varPurchaseType }}"
						data-variant="{{ blockVarID }}"
						data-product="{{ prod.id }}"
						data-original-variant="{{ var.id }}"
						data-subscription-selling-plan-id="{{ selling_plan_id }}"
						data-price="{{ var.price | money_without_currency | replace: ".00", "" }}"
						data-sku="{{ var.sku }}"
						data-index="{{ forloop.index }}"
						data-item-price="{{ item_price }}"
						data-subscription-price="{{ subscription_total_price }}"
						data-subscription-item-price="{{ subscription_item_price }}"
						data-original-item-cap="{{ original_item_cap }}"
						data-dc="{{ var.metafields.custom.discount_code | base64_encode }}"
						data-buy-once-discount="{{ var.metafields.custom.save_percents }}"
						data-subscription-discount="{{ subscription_save_percents }}"
						data-first-month-discount="{{ firstMonthDiscount }}"
						data-price-per="{{ pricePer }}"
						data-bottle-quantity="{{ bottle_quantity }}"
						data-purchase-type="{{ varPurchaseType }}"
						{% if block.settings.allowed_selling_plan_ids != blank %}
						data-allowed-selling-plans="{{ block.settings.allowed_selling_plan_ids | strip | escape }}"
						{% endif %}
							name="track:variant-box|variant-sku:{{ var.sku }}|purchase-type:{{ varPurchaseType }}">
							{% if product.handle == 'curalin' %}
								{% assign subscription_save_percents = var.metafields.subscription.save_percents %}
							{% endif %}
							{% if subscription_save_percents > 0 %}
								<div class="discount mbl:text-[3.5vw] text-white bg-primary font-bold w-full text-[13px] p-1">{{ subscription_save_percents | plus: firstMonthDiscount }}% OFF</div>
							{% endif %}

							<div class="title p-1">
								<span class="font-bold mbl:text-[4vw]">{{ bottle_quantity }} Bottle{% if bottle_quantity > 1 %}s{% endif %}</span>
							</div>

							<div class="md:hidden">
								<span class="title block mbl:text-[3.4vw]"></span>
							</div>
						</div>
					{% endif %}
				{% endfor %}
			</div>

			<div class="price-display">
				<div class="gap-y-2 flex flex-wrap items-end gap-2">
						<div class="final-price flex items-center gap-2">
								<div class="main-price text-primary flex items-end transition-opacity duration-200 ease-in-out">
										{% if priceFormat == 'total' %}
												<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_total_price | money }}</span>
										{% else %}
												<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_item_price | money }}</span>
												<span class="per-text mt-1 text-[20px]">/bottle</span>
										{% endif %}
								</div>

								<span class="cap self-end text-gray-500 line-through transition-opacity duration-200 ease-in-out">{{ original_item_cap | money }}</span>

								{% if priceFormat == 'total' and subscription_total_price != subscription_item_price %}
										<span class="discount-badge px-4 py-1 text-[16px] font-bold text-white bg-bronze rounded-full transition-opacity duration-200 ease-in-out">SAVE {{ subscription_save_money | money }}</span>
								{% endif %}
						</div>
				</div>

				{% if priceFormat == 'per_bottle' and subscription_total_price != subscription_item_price %}
						<div class="total-line mt-1 text-[16px] h-4 transition-opacity duration-200 ease-in-out">
								Total {{ subscription_total_price | money }}
								<span class="total-price-cap text-gray-500 line-through">{{ original_item_cap_total | money }}</span>
						</div>
				{% endif %}

				<div class="future-price-notice mt-2 text-[14px] text-gray-600 transition-opacity duration-200 ease-in-out"></div>
		</div>

		{% if variantsNotice != blank %}
			<div class="notice text-primary flex gap-2 my-4 text-[15px]">
				<span>ⓘ</span>
				<span>{{ variantsNotice }}</span>
			</div>
		{% endif %}

		<!-- Subscription Frequency Selector with direct Tailwind classes -->
		<div class="mbl:my-0 hidden my-2 transition-all duration-300 ease-in-out" data-frequency-container>
			<div class="mb-3 font-semibold">Choose delivery frequency</div>
			<div class="subscription-frequency-selector">
				<div id="frequency-options-{{ SID }}" class="flex justify-start gap-2">
					<!-- Options will be dynamically populated by JavaScript -->
				</div>
			</div>
			<div class="frequency-description text-[14px] text-gray-600 mt-2 transition-opacity duration-300 ease-in-out leading-normal min-h-[24px]"><!-- Frequency description will be populated by JavaScript --></div>
		</div>

		{% render 'subscription-box-faq',
			SID: SID,
			faqsAmount: faqsAmount,
			blocks: blocks
		%}

		{% render 'subscription-box-gift-selector',
			SID: SID,
			giftsAmount: giftsAmount,
			blocks: blocks,
			isGlobal: isGlobal
		%}

		<div class="submit-wrap flex flex-col w-full">
			<div class="checkout-button">
				{% assign buttonSID = SID | append: '-checkout' %}
				{% if buyType == 'buy_now' %}{% assign ctaButtonTitle = 'Get Started' %}{% else %}{% assign ctaButtonTitle = 'Add To Cart' %}{% endif %}

				{% render 'buy-buttons-new-4-old',
					SID: buttonSID,
					product: prod,
					variant: '',
					buttonText: ctaButtonTitle,
					selling_plan_id: selling_plan_id,
					product_form_id: product_form_id,
					buyType: buyType,
					isBuyWithPrime: isBuyWithPrime,
					buyboxType: buyboxType,
					buyboxName: buyboxName
				%}
			</div>

			<div class="one-time-purchase-link mt-3 text-center">
				{% if isOneTimePurchaseLink %}
					{% assign firstVariant = prod.selected_or_first_available_variant %}
					<div
						id="one-time-add-to-cart"
						class="one-time-add-to-cart variant-box text-primary mb-2 underline cursor-pointer"
						name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
						data-variant-id="{{ firstVariant.id }}"
						data-bottle-quantity="1"
						data-sku="{{ firstVariant.sku }}"
						data-purchase-type="buyonce">
						Buy Once for {{ firstVariant.price | money }} + {{ shippingPrice | money | replace: '.00', '' }} Shipping
					</div>
				{% endif %}
			</div>

			{% if blocks.size > 0 %}
				{% for block in blocks %}
					{% if block.type == 'text' %}
						<div class="text-content text-[14px] text-primary whitespace-break-spaces {% if block.settings.text_position == 'center' %}text-center{% else %}text-start{% endif %}">{{ block.settings.content }}</div>
					{% endif %}
				{% endfor %}
			{% endif %}
		</div>
	</div>
</div>

<!-- For supporting old styles but with Tailwind classes, hidden by default -->
<div class="buy-box grid grid-cols-[45%_40%] gap-x-[5%] justify-center hidden">
</div>

<style>
	/* Core variables - keep these as CSS variables */
	#cta-section-{{ SID }} {
			--text-color: #4a5568;
			--border-color: #cbcbcb;
			--radio-size: 1em;
			--radio-size-mobile: 1em;
			--transition-speed: 0.2s;

			/* Variant Tab Styles */
			.variant-box.variant-tab-style {
					border-width: 2px;
					border-color: var(--primary-color);
					border-radius: 0.375rem;
					cursor: pointer;
					align-content: center;
					transition: all 0.3s ease;

					&.selected {
							background-color: var(--primary-color);
							color: white;

							.discount {
									background-color: var(--orange);
									color: var(--primary-color);
									transition: all 0.3s ease;
							}
					}

					&:not(.selected):hover {
						background-color: var(--bg-color);
					}
			}

			/* Product Actions - Keep these custom grid areas */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* Radio Input Styles */
			.radio-input {
					display: flex;
					align-items: center;
					justify-content: center;
					position: relative;

					input[type='radio'] {
							&:hover,
							.variant-box:hover & {
									transform: scale(1.1);
									cursor: pointer;
									transition: 0.1s all;
							}
					}
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 1269px) {
					.variant-box {
							width: 100%;
					}
			}

			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}
	}
</style>

<!-- Load buy-box.js script if not already loaded -->
<script>
	document.addEventListener('DOMContentLoaded', function() {
		console.log('[DEBUG] DOM loaded for buy-box-subscription-4-optimized-2, SID: {{ SID }}');

		// Determine if we need to load the script or if it's already loaded
		if (!window.CuralifeBoxes || !window.CuralifeBoxes.initialized) {
			console.log('[DEBUG] CuralifeBoxes not initialized, loading script...');
			const script = document.createElement('script');
			script.src = "{{ 'buy-box.js' | asset_url }}";
			script.async = true;
			document.head.appendChild(script);

			// Debug progress
			console.log('[DEBUG] Script tag added to head:', script.src);

			// Initialize buy boxes after script loads
			script.onload = function() {
				console.log('[DEBUG] buy-box.js script loaded successfully');
				if (window.CuralifeBoxes) {
					console.log('[DEBUG] Running CuralifeBoxes.initAll()');
					window.CuralifeBoxes.initAll();

					// Get available instances
					console.log('[DEBUG] Available CuralifeBoxes instances:', Object.keys(window.CuralifeBoxes.instances));

					// After initialization, force-check frequency options
					console.log('[DEBUG] Setting timeout to activate frequency options');
					setTimeout(function() {
						console.log('[DEBUG] Calling activateFrequencyOptions with SID:', '{{ SID }}');
						activateFrequencyOptions('{{ SID }}');
					}, 500); // Extended timeout for better debugging
				} else {
					console.error('[DEBUG] CuralifeBoxes not available after script load!');
				}
			};

			// Add error handler
			script.onerror = function() {
				console.error('[DEBUG] Failed to load buy-box.js script!');
			};
		} else {
			console.log('[DEBUG] CuralifeBoxes already initialized, activating frequency options directly');
			console.log('[DEBUG] Available CuralifeBoxes instances:', Object.keys(window.CuralifeBoxes.instances));

			// If already loaded, activate frequency options
			setTimeout(function() {
				console.log('[DEBUG] Calling activateFrequencyOptions with SID:', '{{ SID }}');
				activateFrequencyOptions('{{ SID }}');
			}, 500);
		}

		// Function to directly populate frequency options as a fallback
		function manuallyPopulateFrequencyOptions(SID) {
			console.log('[DEBUG] Attempting to manually populate frequency options');

			const frequencyContainer = document.querySelector(`#cta-section-${SID} [data-frequency-container]`);
			const frequencyOptions = document.getElementById(`frequency-options-${SID}`);
			const selectedBox = document.querySelector(`#cta-section-${SID} .variant-box.selected`);

			if (!frequencyContainer || !frequencyOptions || !selectedBox) {
				console.error('[DEBUG] Required elements not found:', {
					container: !!frequencyContainer,
					options: !!frequencyOptions,
					selectedBox: !!selectedBox
				});
				return;
			}

			// Get the bottle quantity for recommended frequency
			const bottleQuantity = parseInt(selectedBox.dataset.bottleQuantity || '1', 10);
			const sellingPlanId = selectedBox.dataset.subscriptionSellingPlanId;

			console.log('[DEBUG] Selected box data:', {
				bottleQuantity,
				sellingPlanId,
				variantId: selectedBox.dataset.variant,
				productId: selectedBox.dataset.product
			});

			// Create a simple default option as fallback
			const option = document.createElement('div');
			option.className = 'rounded-md cursor-pointer py-2 min-w-[90px] max-w-[168px] text-center w-full';
			option.style.backgroundColor = 'var(--primary-color)';
			option.style.color = 'white';
			option.dataset.sellingPlanId = sellingPlanId;
			option.dataset.frequencyValue = bottleQuantity;
			option.dataset.frequencyUnit = 'month';
			option.innerHTML = `
				<div class="p-1">
					<span class="font-semibold">Every ${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}</span>
				</div>
			`;

			// Clear and append
			frequencyOptions.innerHTML = '';
			frequencyOptions.appendChild(option);
			frequencyContainer.classList.remove('hidden');

			console.log('[DEBUG] Manually added frequency option:', option);
		}

		// Function to activate frequency options
		function activateFrequencyOptions(SID) {
			console.log('[DEBUG] Inside activateFrequencyOptions for SID:', SID);

			// Detailed debug info for window.CuralifeBoxes
			console.log('[DEBUG] CuralifeBoxes state:', {
				exists: !!window.CuralifeBoxes,
				initialized: window.CuralifeBoxes?.initialized,
				hasInstances: !!window.CuralifeBoxes?.instances,
				instanceCount: window.CuralifeBoxes?.instances ? Object.keys(window.CuralifeBoxes.instances).length : 0,
				availableSIDs: window.CuralifeBoxes?.instances ? Object.keys(window.CuralifeBoxes.instances) : []
			});

			// Check if boxInstance exists
			const boxInstance = window.CuralifeBoxes?.instances?.[SID];
			console.log('[DEBUG] Box instance found?', !!boxInstance);

			if (!boxInstance) {
				console.error('[DEBUG] Buy box instance not found for SID:', SID);
				console.log('[DEBUG] Retrying in 200ms...');
				setTimeout(() => activateFrequencyOptions(SID), 200);
				return;
			}

			// Check if togglePurchaseBox exists
			console.log('[DEBUG] togglePurchaseBox function exists?', !!boxInstance.togglePurchaseBox);

			// Get essential elements
			const frequencyContainer = document.querySelector(`#cta-section-${SID} [data-frequency-container]`);
			const selectedBox = document.querySelector(`#cta-section-${SID} .variant-box.selected`);
			const frequencyOptions = document.getElementById(`frequency-options-${SID}`);

			console.log('[DEBUG] Essential elements:', {
				frequencyContainer: !!frequencyContainer,
				selectedBox: !!selectedBox,
				frequencyOptions: !!frequencyOptions,
				optionsCount: frequencyOptions ? frequencyOptions.children.length : 0
			});

			if (!selectedBox || !frequencyContainer) {
				console.error('[DEBUG] Missing required elements');
				return;
			}

			// Debug selected box data
			console.log('[DEBUG] Selected box data:', {
				purchaseType: selectedBox.dataset.purchaseType,
				variant: selectedBox.dataset.variant,
				product: selectedBox.dataset.product,
				sellingPlanId: selectedBox.dataset.subscriptionSellingPlanId,
				bottleQuantity: selectedBox.dataset.bottleQuantity
			});

			// If the selected box is a subscription variant
			if (selectedBox.dataset.purchaseType === 'subscribe') {
				console.log('[DEBUG] Selected box is a subscription variant');

				// Get the variant selling plan allocations
				const variantId = selectedBox.dataset.variant;
				const productId = selectedBox.dataset.product;

				// Product data debug
				console.log('[DEBUG] ProductData exists?', !!window.productData);
				if (window.productData) {
					console.log('[DEBUG] ProductData for this product exists?', !!window.productData[productId]);
					if (window.productData[productId]) {
						console.log('[DEBUG] Product data:', window.productData[productId]);
					}
				}

				// Populate productData if needed
				if (!window.productData || !window.productData[productId]) {
					console.log('[DEBUG] Creating productData for product:', productId);
					window.productData = window.productData || {};
					window.productData[productId] = {
						id: productId,
						variants: []
					};

					// Add the current variant if needed
					if (variantId) {
						console.log('[DEBUG] Adding current variant to productData');
						window.productData[productId].variants.push({
							id: parseInt(variantId),
							selling_plan_allocations: []
						});
					}
				}

				// Force update frequency options
				if (frequencyOptions && (!frequencyOptions.children.length || frequencyOptions.children.length < 2)) {
					console.log('[DEBUG] Frequency options need to be populated');

					// Show the frequency container
					frequencyContainer.classList.remove('hidden');
					console.log('[DEBUG] Frequency container made visible');

					// Try different approaches
					if (boxInstance.togglePurchaseBox) {
						console.log('[DEBUG] Attempting to call togglePurchaseBox');
						try {
							boxInstance.togglePurchaseBox(selectedBox);
							console.log('[DEBUG] togglePurchaseBox called successfully');

							// Check after a short delay if options were populated
							setTimeout(() => {
								const optionCount = frequencyOptions.children.length;
								console.log('[DEBUG] After togglePurchaseBox, option count:', optionCount);

								if (optionCount === 0) {
									console.log('[DEBUG] Options still not populated, using manual fallback');
									manuallyPopulateFrequencyOptions(SID);
								}
							}, 300);

						} catch (err) {
							console.error('[DEBUG] Error calling togglePurchaseBox:', err);
							manuallyPopulateFrequencyOptions(SID);
						}
					} else {
						console.error('[DEBUG] togglePurchaseBox not available, using manual fallback');
						manuallyPopulateFrequencyOptions(SID);
					}
				} else {
					console.log('[DEBUG] Frequency options already populated:', frequencyOptions ? frequencyOptions.children.length : 0);
				}
			} else {
				console.log('[DEBUG] Selected box is not a subscription variant, type:', selectedBox.dataset.purchaseType);
			}
		}

		setTimeout(function() {
			const SID = '{{ SID }}';
			const frequencyOptions = document.getElementById(`frequency-options-${SID}`);
			console.log('[DEBUG] Final check - frequency options count:', frequencyOptions ? frequencyOptions.children.length : 0);

			if (frequencyOptions && frequencyOptions.children.length === 0) {
				console.log('[DEBUG] Still no options after delay, using emergency fallback');
				manuallyPopulateFrequencyOptions(SID);
			}
		}, 2000);
	});
</script>