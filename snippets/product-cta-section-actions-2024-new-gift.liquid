{% assign variantsAmount = product.variants.size %}

<div class="product-actions">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      {% assign subscriptionFeatures = "Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs" | split: ',' %}
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save"><span>Subscribe <div class="desktop">& Save</div>{% render 'tooltip', SID: SID, linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>', title: 'Subscription Details', description: '', features: subscriptionFeatures %}</span></button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, index: forloop.index %}
    {% endfor %}

		<div class="gift-selector-wrap">
			<div class="gift-selector-title mb-2">Choose your free gift:</div>
			<div class="gift-options flex-nowrap flex justify-start gap-4">
				{% for block in blocks %}
					{% case block.type %}
						{% when 'gift' %}
							{% assign giftProd = block.settings.gift_product %}
							{% assign giftVariant = giftProd.selected_or_first_available_variant %}
							<div class="gift-option-container flex flex-col items-center">
								<!-- Border container for image and radio only -->
								<div class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer" data-gift-id="{{ giftVariant.id }}">
									<div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 border-2 rounded-full">
											<div class="check-mark hidden w-4 h-4 bg-[var(--primary-color)] rounded-full"></div>
									</div>
									<div class="gift-image-container flex justify-center">
										<img
											src="{{ giftProd.featured_image | image_url }}"
											alt="{{ giftProd.title }}"
											class="object-contain w-24 h-24"
										>
									</div>
								</div>
								<!-- Text content outside the border -->
								<div class="gift-content text-center">
									<div class="gift-name mb-1 font-medium">{{ giftProd.title }}</div>
									<div class="gift-price flex items-center justify-center gap-2">
										{% if giftVariant.compare_at_price > giftVariant.price %}
											<span class="original-price text-gray-400 line-through">{{ giftVariant.price | money_with_currency }}</span>
										{% endif %}
										<span class="sale-price font-bold">{{ giftVariant.compare_at_price | money_with_currency }}</span>
									</div>
								</div>
							</div>
					{% endcase %}
				{% endfor %}
			</div>
		</div>

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
				{% if shop.name == 'CuraLife Global' %}
					{% assign isGlobal = true %}
				{% endif %}

				{% if buyType == "buy_now" %}
					<div class="submit-wrap flex flex-col w-full">
						<input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}">
						<button class="main-btn w-full p-0 text-black bg-[--orange] min-h-[50px]" id="buy-button-{{ SID }}">
							<span class="button-text flex justify-center md:text-[5vw]">{{ buttonText | default: "Shop Now" }}</span>

							<div class="loading-overlay__spinner hidden m-auto">
								<svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
									<circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
								</svg>
							</div>
						</button>
					</div>

					<script>
					document.addEventListener('DOMContentLoaded', function() {
						var buyButton = document.getElementById('buy-button-{{ SID }}');

						if (buyButton) {
							buyButton.addEventListener('click', function(event) {
								// Button states for loading
								var submitButton = this;
								var buttonText = submitButton.querySelector('.button-text');
								var loadingSpinner = submitButton.querySelector('.loading-overlay__spinner');

								// Display loading spinner
								if (buttonText && loadingSpinner) {
									buttonText.style.display = 'none';
									loadingSpinner.classList.remove('hidden');
								}

								// Get the variant ID and selling plan ID from the hidden inputs
								var variantIdInput = document.querySelector('.submit-variant-id');
								var sellingPlanIdInput = document.querySelector('.submit-selling-plan-id');

								if (variantIdInput) {
									console.log('Variant ID input found.');
								} else {
									console.error('Variant ID input not found.');
								}

								var variantId = variantIdInput ? variantIdInput.value : '{{ variant | default: product.selected_or_first_available_variant.id }}';
								var sellingPlanId = sellingPlanIdInput ? sellingPlanIdInput.value : '';
								console.log('Variant ID:', variantId);
								console.log('Selling Plan ID:', sellingPlanId);

								var quantity = 1;

								var data = {
									"id": variantId,
									"quantity": quantity
								};

								if (sellingPlanId) {
									data["selling_plan"] = sellingPlanId;
								}

								// Adding product to the cart
								console.log('Sending request to add product to the cart:', data);

								fetch('/cart/add.js', {
									method: 'POST',
									headers: {
										'Content-Type': 'application/json',
									},
									body: JSON.stringify(data),
								})
								.then(function(response) {
									console.log('Received response from add to cart:', response);
									return response.json();
								})
								.then(function(data) {
									console.log('Product successfully added to cart:', data);
									console.log('Redirecting to checkout.');
									window.location.href = '/checkout';
								})
								.catch(function(error) {
									console.error('Error adding product to cart:', error);
									if (buttonText && loadingSpinner) {
										console.log('An error occurred. Resetting button to normal state.');
										buttonText.style.display = '';
										loadingSpinner.classList.add('hidden');
									}
								});
							});
						} else {
							console.error('Buy button not found. Cannot attach event listener.');
						}
					});
				</script>

				{% else %}
				<script>
					var form = document.querySelector('.product-form');
					var addToCartButton = document.getElementById('ProductSubmitButton-{{SID}}');

					if (form && addToCartButton) {
							form.addEventListener('submit', function(event) {
									event.preventDefault(); // Prevent default form submission

									// Retrieve the selected variant ID
									var variantIdInput = form.querySelector('.submit-variant-id');
									var sellingPlanIdInput = form.querySelector('.submit-selling-plan-id');
									var quantityInput = form.querySelector('input[name="quantity"]');
									var selectedBox = document.querySelector('.purchase-option-box.selected');

									// Retrieve the selected gift ID
									var selectedGiftContainer = document.querySelector('.gift-option-container.selected');
									var giftOptionBorder = selectedGiftContainer ? selectedGiftContainer.querySelector('.gift-option-border') : null;
									var giftId = giftOptionBorder ? giftOptionBorder.dataset.giftId : null;

									if (!variantIdInput || !giftId || !selectedBox) {
											console.error('Variant ID, Gift ID, or selected box not found.');
											return;
									}

									var variantId = variantIdInput.value;
									var sellingPlanId = sellingPlanIdInput ? sellingPlanIdInput.value : '';
									var quantity = quantityInput ? parseInt(quantityInput.value) : 1;

									// Adjust variant ID based on purchase type
									var isSubscription = isSubscriptionSelected();
									variantId = isSubscription ? selectedBox.dataset.originalVariant : selectedBox.dataset.variant;

									var items = [
											{
													"id": variantId,
													"quantity": quantity
											},
											{
													"id": giftId,
													"quantity": 1
											}
									];

									if (sellingPlanId) {
											items[0]["selling_plan"] = sellingPlanId;
									}

									// Show loading spinner
									var buttonText = addToCartButton.querySelector('.submit-title');
									var loadingSpinner = addToCartButton.querySelector('.loading-overlay__spinner');
									if (buttonText && loadingSpinner) {
											buttonText.style.display = 'none';
											loadingSpinner.classList.remove('hidden');
									}

									// Add items to cart via AJAX
									fetch('/cart/add.js', {
											method: 'POST',
											headers: {'Content-Type': 'application/json'},
											body: JSON.stringify({ items: items })
									})
									.then(function(response) {
											return response.json();
									})
									.then(function(data) {
											console.log('Items added to cart:', data);
											// Redirect to cart page or show success message
											window.location.href = '/cart';
									})
									.catch(function(error) {
											console.error('Error adding items to cart:', error);
											// Reset button states
											if (buttonText && loadingSpinner) {
													buttonText.style.display = '';
													loadingSpinner.classList.add('hidden');
											}
											// Show error message to the user
									});
							});
					} else {
							console.error('Form or Add to Cart button not found.');
					}
					</script>
				{% endif %}
			</div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
    const SID = '{{ SID }}';
    window.SID = SID;

    console.log('Set SID:', window.SID);
    console.log('Looking for slider:', `productSliderAllInOne${window.SID}`);

    const productSlider = window[`productSliderAllInOne${window.SID}`];
    console.log('Found slider:', productSlider);

    const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');

    const styleSheet = document.createElement("style");
    styleSheet.textContent = `
      .subscription-content, .buy-once-content {
        transition: opacity 0.3s ease-in-out;
      }
    `;
    document.head.appendChild(styleSheet);

    initializePurchaseOptions();
    setupMutationObserver();

		// Gift selection logic
const giftOptionContainers = document.querySelectorAll('.gift-option-container');

giftOptionContainers.forEach(container => {
    container.addEventListener('click', function(event) {
        // Remove 'selected' class from all gift options
        giftOptionContainers.forEach(gift => gift.classList.remove('selected'));

        // Add 'selected' class to the clicked gift
        container.classList.add('selected');

        // Update radio indicator
        updateRadioIndicator(container);
    });
});

function updateRadioIndicator(selectedContainer) {
    giftOptionContainers.forEach(container => {
        const checkMark = container.querySelector('.check-mark');
        if (container === selectedContainer) {
            checkMark.classList.remove('hidden');
        } else {
            checkMark.classList.add('hidden');
        }
    });
}

// Initialize the first gift as selected by default
if (giftOptionContainers.length > 0) {
    const firstGift = giftOptionContainers[0];
    firstGift.classList.add('selected');
    updateRadioIndicator(firstGift);
}

    function isSubscriptionSelected() {
      const selectedButton = productActions.querySelector('.purchase-type button.selected');
      return selectedButton?.classList.contains('subscription') ?? true;
    }

    function initializePurchaseOptions() {
      const urlParams = new URLSearchParams(window.location.search);
      const defaultVariant = urlParams.get('default-variant') ?
        parseInt(urlParams.get('default-variant')) :
        {{ defaultSelectionIndex | default: 1 }};

      const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;

      // Handle initial inert state for subscription boxes
      purchaseOptionBoxes.forEach(box => {
        const subscriptionSellingPlanId = box.dataset.subscriptionSellingPlanId;
        if (!subscriptionSellingPlanId || subscriptionSellingPlanId === '0') {
          box.setAttribute('inert', '');
        }

        const subscriptionContent = box.querySelectorAll('.subscription-content');
        const buyOnceContent = box.querySelectorAll('.buy-once-content');

        box.classList.remove('selected');
        box.style.maxHeight = '68px';

        subscriptionContent.forEach(el => {
          el.style.display = 'block';
          el.style.opacity = '1';
        });

        buyOnceContent.forEach(el => {
          el.style.display = 'none';
          el.style.opacity = '0';
        });

        const radio = box.querySelector("input[type='radio']");
        if (radio) radio.checked = false;
      });

      // Find the first valid box for initial selection
      let defaultBox = purchaseOptionBoxes[initialVariantIndex];
      if (defaultBox && defaultBox.hasAttribute('inert')) {
        defaultBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
      }

      if (defaultBox) {
        defaultBox.classList.add('selected');
        adjustMaxHeight(defaultBox);

        const radio = defaultBox.querySelector("input[type='radio']");
        if (radio) radio.checked = true;

        const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
        const submitVariantElement = productActions.querySelector('.submit-variant-id');

        if (submitSellingPlanElement) {
          submitSellingPlanElement.value = defaultBox.dataset.subscriptionSellingPlanId || '';
        }
        if (submitVariantElement) {
          submitVariantElement.value = defaultBox.dataset.originalVariant || defaultBox.dataset.variant;
        }

        const toggleIcon = defaultBox.querySelector('.toggle-icon');
        if (toggleIcon) toggleIcon.style.display = 'block';
      }

      const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
      const buyOnceButton = productActions.querySelector('.purchase-type .buy-once');

      if (subscriptionButton && buyOnceButton) {
        subscriptionButton.classList.add('selected');
        buyOnceButton.classList.remove('selected');
      }

      if (defaultBox) {
        updateYotpoPointsWidget(defaultBox);
      }

      {% if variantsAmount > 1 %}
        {% if isSlideOnLoad %}
          if (defaultBox) {
            updateVariantImage(defaultBox);
          }
        {% endif %}
      {% endif %}
    }

    function setupMutationObserver() {
      const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const targetBox = mutation.target.closest('.purchase-option-box');
            if (targetBox?.classList.contains('selected')) {
              adjustMaxHeight(targetBox);
            }
          }
        });
      });

      purchaseOptionBoxes.forEach(element => {
        observer.observe(element, { attributes: true, attributeFilter: ['class'] });
      });
    }

    productActions.addEventListener('click', (event) => {
      const purchaseBox = event.target.closest('.purchase-option-box');
      if (purchaseBox) togglePurchaseBox(purchaseBox);

      const purchaseTypeButton = event.target.closest('.purchase-type button');
      if (purchaseTypeButton) handlePurchaseTypeClick(event, purchaseTypeButton);

      const checkoutButton = event.target.closest('.checkout-button.subscription, .add-to-cart-button.buy-once, .submit-wrap button.main-btn');
      if (checkoutButton) handleMainButtonClick(event, checkoutButton);
    });

    function handlePurchaseTypeClick(event, button) {
  event.stopPropagation();

  // Toggle button states
  productActions.querySelectorAll('.purchase-type button').forEach(btn => btn.classList.remove('selected'));
  button.classList.add('selected');

  const isSubscription = button.classList.contains('subscription');
  const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');

  // Set selling plan to blank if "Buy Once" is selected
  if (!isSubscription && submitSellingPlanElement) {
    submitSellingPlanElement.value = ''; // Clear the selling plan ID for "Buy Once"
  }

  // Update all variant boxes
  purchaseOptionBoxes.forEach(box => {
    const subscriptionContent = box.querySelectorAll('.subscription-content');
    const buyOnceContent = box.querySelectorAll('.buy-once-content');

    // First fade out current content
    const currentContent = isSubscription ? buyOnceContent : subscriptionContent;
    const newContent = isSubscription ? subscriptionContent : buyOnceContent;

    // Fade out current content
    currentContent.forEach(el => {
      el.style.opacity = '0';
    });

    // Wait for fade out to complete before showing new content
    setTimeout(() => {
      // Hide old content
      currentContent.forEach(el => {
        el.style.display = 'none';
      });

      // Show new content but keep it invisible
      newContent.forEach(el => {
        el.style.display = 'block';
        el.style.opacity = '0';
      });

      // Trigger fade in
      requestAnimationFrame(() => {
        newContent.forEach(el => {
          el.style.opacity = '1';
        });
      });
    }, 300);

    // Handle selling plan ID and inert state for subscription
    if (isSubscription) {
      const sellingPlanId = box.dataset.subscriptionSellingPlanId;
      if (!sellingPlanId || sellingPlanId === '0') {
        box.setAttribute('inert', '');
      } else {
        box.removeAttribute('inert');
      }
      // Only update selling plan if it's a subscription selection
      if (submitSellingPlanElement) {
        submitSellingPlanElement.value = sellingPlanId || ''; // Update for subscription
      }
    } else {
      box.removeAttribute('inert');
    }

    // Handle per month display
    {% unless product.metafields.custom.is_price_per_month %}
      const perMonthElement = box.querySelector('.per-month');
      if (perMonthElement) {
        perMonthElement.style.display = isSubscription ? 'block' : 'none';
      }
    {% endunless %}

    // Update compared at price display with the same fade timing
    const comparedAtPrice = box.querySelector('.compared-at-price');
    if (comparedAtPrice) {
      const itemPrice = parseFloat(box.dataset.itemPrice);
      const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
      const originalItemCap = parseFloat(box.dataset.originalItemCap);
      const currentPrice = isSubscription ? subscriptionItemPrice : itemPrice;

      comparedAtPrice.style.opacity = '0';

      setTimeout(() => {
        if (originalItemCap > currentPrice) {
          comparedAtPrice.style.display = 'block';
          requestAnimationFrame(() => {
            comparedAtPrice.style.opacity = '1';
          });
        } else {
          comparedAtPrice.style.display = 'none';
        }
      }, 300);
    }
  });

  // Check if currently selected box becomes inert
  const selectedBox = productActions.querySelector('.purchase-option-box.selected');
  if (selectedBox && selectedBox.hasAttribute('inert')) {
    // Find the first non-inert box
    const firstAvailableBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
    if (firstAvailableBox) {
      // Deselect current box
      selectedBox.classList.remove('selected');
      selectedBox.style.maxHeight = '68px';
      const selectedToggleIcon = selectedBox.querySelector('.toggle-icon');
      if (selectedToggleIcon) selectedToggleIcon.style.display = 'none';

      // Select new box
      firstAvailableBox.classList.add('selected');
      adjustMaxHeight(firstAvailableBox);
      const newToggleIcon = firstAvailableBox.querySelector('.toggle-icon');
      if (newToggleIcon) newToggleIcon.style.display = 'block';

      // Update form values
      const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
      const submitVariantElement = productActions.querySelector('.submit-variant-id');

      if (submitSellingPlanElement) {
        submitSellingPlanElement.value = isSubscription ? firstAvailableBox.dataset.subscriptionSellingPlanId : '';
      }
      if (submitVariantElement) {
        submitVariantElement.value = isSubscription ? firstAvailableBox.dataset.originalVariant : firstAvailableBox.dataset.variant;
      }

      // Update radio button
      const radioInput = firstAvailableBox.querySelector("input[type='radio']");
      if (radioInput) radioInput.checked = true;

      // Update other UI elements
      updateYotpoPointsWidget(firstAvailableBox);
      {% if variantsAmount > 1 %}
        {% if isSlideOnLoad %}
          updateVariantImage(firstAvailableBox);
        {% endif %}
      {% endif %}
    }
  }
}


    function togglePurchaseTypeAllVariants() {
      if (!purchaseOptionBoxes.length) return;
      purchaseOptionBoxes.forEach(box => {
        if (box) togglePurchaseType(box);
      });
    }

    function togglePurchaseType(parentBox) {
      const isSubscription = isSubscriptionSelected();

      // Handle subscription-specific elements
      {% unless product.metafields.custom.is_price_per_month %}
        const perMonthElement = parentBox.querySelector('.per-month');
        if (perMonthElement) {
          perMonthElement.style.display = isSubscription ? 'block' : 'none';
        }
      {% endunless %}

      // Handle BWP button
      const bwpButton = productActions.querySelector('.bwp-button');
      if (bwpButton) {
        bwpButton.style.display = isSubscription ? 'none' : 'block';
      }

      // Handle selling plan ID
      if (isSubscription) {
        const selectedBox = productActions.querySelector('.purchase-option-box.selected');
        const sellingPlanId = selectedBox?.dataset.subscriptionSellingPlanId;

        if (sellingPlanId > 0) {
          const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
          if (submitSellingPlanElement) {
            submitSellingPlanElement.value = sellingPlanId;
          }
        } else {
          parentBox.setAttribute('inert', '');
          parentBox.classList.remove('selected');
          parentBox.removeAttribute('style');
          const firstValidBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
          if (firstValidBox) firstValidBox.click();
        }

        // Handle inert state for boxes
        purchaseOptionBoxes.forEach(box => {
          const boxSellingPlanId = box.dataset.subscriptionSellingPlanId;
          if (!boxSellingPlanId || boxSellingPlanId === '0') {
            box.setAttribute('inert', '');
          } else {
            box.removeAttribute('inert');
          }
        });
      } else {
        const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
        if (submitSellingPlanElement) submitSellingPlanElement.value = '';
        parentBox.removeAttribute('inert');
        purchaseOptionBoxes.forEach(box => box.removeAttribute('inert'));
      }

      // Handle price display
      const subscriptionContent = parentBox.querySelector('.subscription-content');
      const buyOnceContent = parentBox.querySelector('.buy-once-content');
      const buyOnceSubtitle = parentBox.querySelector('.subtitle.buy-once');
      const subscriptionSubtitle = parentBox.querySelector('.subtitle.subscription');

      // Fade out current content
      const currentContent = isSubscription ? buyOnceContent : subscriptionContent;
      const newContent = isSubscription ? subscriptionContent : buyOnceContent;
      const currentSubtitle = isSubscription ? buyOnceSubtitle : subscriptionSubtitle;
      const newSubtitle = isSubscription ? subscriptionSubtitle : buyOnceSubtitle;

      if (currentContent) {
        currentContent.style.opacity = '0';
        setTimeout(() => {
          currentContent.style.display = 'none';
          if (newContent) {
            newContent.style.display = 'block';
            requestAnimationFrame(() => {
              newContent.style.opacity = '1';
            });
          }
        }, 300);
      }

      if (currentSubtitle) {
        currentSubtitle.style.opacity = '0';
        setTimeout(() => {
          currentSubtitle.style.display = 'none';
          if (newSubtitle) {
            newSubtitle.style.display = 'block';
            requestAnimationFrame(() => {
              newSubtitle.style.opacity = '1';
            });
          }
        }, 300);
      }

      updateYotpoPointsWidget(parentBox);
      updateComparedAtPriceDisplay(parentBox);
    }

    function fadeElements(fadeOutEl, fadeInEl) {
      if (fadeOutEl) {
        fadeOutEl.style.transition = 'opacity 0.2s ease-out';
        fadeOutEl.style.opacity = '0';
        setTimeout(() => {
          fadeOutEl.style.display = 'none';
        }, 200);
      }
      if (fadeInEl) {
        fadeInEl.style.display = 'block';
        fadeInEl.style.opacity = '0';
        setTimeout(() => {
          fadeInEl.style.transition = 'opacity 0.2s ease-in';
          fadeInEl.style.opacity = '1';
        }, 10);
      }
    }

    function handleMainButtonClick(event, button) {
			console.log("handleMainButtonClick triggered");
      event.stopPropagation();

			console.log("Selected buy type:", isSubscriptionSelected() ? "Subscription" : "Buy Once");

      {% if buyType == 'buy_now' %}
        const selectedBox = productActions.querySelector('.purchase-option-box.selected');
        const subscriptionPlanID = selectedBox ? selectedBox.dataset.subscriptionSellingPlanId : null;

				console.log("Selected variant ID:", selectedBox ? selectedBox.dataset.variant : null);
	console.log("Subscription plan ID:", subscriptionPlanID);

        buyButtonHandler(subscriptionPlanID, button);
      {% else %}
        const form = button.closest('form');
        if (form) form.submit();
      {% endif %}
    }

    function adjustMaxHeight(element) {
      const openHeight = element.scrollHeight;
      element.style.maxHeight = `${openHeight}px`;
    }

    function updateComparedAtPriceDisplay(box) {
      const comparedAtPrice = box.querySelector('.compared-at-price');
      if (!comparedAtPrice) return;

      const itemPrice = parseFloat(box.dataset.itemPrice);
      const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
      const originalItemCap = parseFloat(box.dataset.originalItemCap);
      const currentPrice = isSubscriptionSelected() ? subscriptionItemPrice : itemPrice;

      if (originalItemCap > currentPrice) {
        comparedAtPrice.style.display = 'block';
        setTimeout(() => comparedAtPrice.style.opacity = '1', 50);
      } else {
        comparedAtPrice.style.opacity = '0';
        setTimeout(() => comparedAtPrice.style.display = 'none', 300);
      }
    }

    function togglePriceDisplay(parentBox) {
      if (!parentBox) return;

      const subscriptionContent = parentBox.querySelector('.subscription-content');
      const buyOnceContent = parentBox.querySelector('.buy-once-content');

      if (!subscriptionContent || !buyOnceContent) return;

      const isSubscription = isSubscriptionSelected();
      const contentToHide = isSubscription ? buyOnceContent : subscriptionContent;
      const contentToShow = isSubscription ? subscriptionContent : buyOnceContent;

      // Ensure elements exist before manipulating
      if (contentToHide && contentToShow) {
        contentToHide.style.opacity = '1';
        contentToHide.style.display = 'block';
        contentToShow.style.opacity = '0';
        contentToShow.style.display = 'block';

        requestAnimationFrame(() => {
          contentToHide.style.opacity = '0';
          contentToShow.style.opacity = '1';

          setTimeout(() => {
            contentToHide.style.display = 'none';
            contentToShow.style.display = 'block';
          }, 200);
        });
      }
    }

    function togglePurchaseBox(element) {
      if (element.classList.contains('selected')) return;

      // Update previous selected box
      const previousSelected = productActions.querySelector('.purchase-option-box.selected');
      if (previousSelected) {
        previousSelected.classList.remove('selected');
        previousSelected.style.maxHeight = '68px';
        const toggleIcon = previousSelected.querySelector('.toggle-icon');
        if (toggleIcon) toggleIcon.style.display = 'none';
      }

      // Update new selected box
      element.classList.add('selected');
      element.style.maxHeight = `${element.scrollHeight}px`;

      const toggleIcon = element.querySelector('.toggle-icon');
      if (toggleIcon) toggleIcon.style.display = 'block';

      // Update form values
      const isSubscription = isSubscriptionSelected();
      const subscriptionPlanID = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
      const variantID = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

      const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
      const submitVariantElement = productActions.querySelector('.submit-variant-id');

      if (submitSellingPlanElement) submitSellingPlanElement.value = subscriptionPlanID;
      if (submitVariantElement) submitVariantElement.value = variantID;

      // Update radio button
      const radioInput = element.querySelector("input[type='radio']");
      if (radioInput) radioInput.checked = true;

      updateYotpoPointsWidget(element);

      {% if variantsAmount > 1 %}
        {% if isSlideOnLoad %}
          updateVariantImage(element);
        {% else %}
          if (window.hasInitialImageUpdateHappened) {
            updateVariantImage(element);
          }
          window.hasInitialImageUpdateHappened = true;
        {% endif %}
      {% endif %}
    }

    function updateYotpoPointsWidget(parentBox) {
      const price = isSubscriptionSelected()
        ? parentBox.dataset.subscriptionItemPrice
        : parentBox.dataset.itemPrice;

      const newPoints = Math.floor(Number(price) / 100);
      const pointsElement = productActions.querySelector('.reward-points-widget .current-price');
      if (pointsElement) pointsElement.textContent = newPoints;
    }

    // Create a more reliable slider initialization and management system
    let sliderInitializationAttempts = 0;
    const MAX_INITIALIZATION_ATTEMPTS = 50;
    const INITIALIZATION_INTERVAL = 100;

    function initializeProductSlider() {
      const SID = window.SID || '';
      const sliderId = `productSliderAllInOne${SID}`;

      return new Promise((resolve, reject) => {
        const checkSlider = setInterval(() => {
          const slider = window[sliderId];
          sliderInitializationAttempts++;

          if (slider && slider.slides && slider.slides.length > 0) {
            clearInterval(checkSlider);

            resolve(slider);
          } else if (sliderInitializationAttempts >= MAX_INITIALIZATION_ATTEMPTS) {
            clearInterval(checkSlider);
            console.error('Slider initialization timed out after maximum attempts');
            reject(new Error('Slider initialization timeout'));
          }
        }, INITIALIZATION_INTERVAL);
      });
    }

    function updateVariantImage(element) {
        if (!element || !element.dataset.index) {
            console.warn('Invalid element or missing data-index attribute');
            return;
        }

        const SID = window.SID || '';
        const sliderId = `productSliderAllInOne${SID}`;
        const slider = window[sliderId];

        if (!slider || !slider.slides || !slider.slides.length) {
            let updateImageData = {
                element: element,
                dataIndex: element.dataset.index,
                sliderId: sliderId,
                slider: slider
            };

            console.warn('Slider not ready, attempting initialization...', updateImageData);

            initializeProductSlider()
                .then((initializedSlider) => {
                    performSlideUpdate(initializedSlider, element);
                })
                .catch((error) => {
                    console.error('Failed to initialize slider:', error);
                });
            return;
        }

        performSlideUpdate(slider, element);
    }

    function performSlideUpdate(slider, element) {
      try {
        const elementIndex = parseInt(element.dataset.index);

        console.log('Performing slide update:', {
          elementIndex: elementIndex,
          totalSlides: slider.slides.length,
          currentSlide: slider.activeIndex
        });

        if (elementIndex >= 0 && elementIndex < slider.slides.length) {
          if (slider.activeIndex !== elementIndex) {
            setTimeout(() => {
              slider.slideTo(elementIndex, 300, true);
            }, 50);
          }
        } else {
          console.warn(`Invalid slide index: ${elementIndex}`);
        }
      } catch (error) {
        console.error('Error during slide update:', error);
        console.error(error.stack);
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const purchaseOptionBoxes = document.querySelectorAll('.purchase-option-box');

      purchaseOptionBoxes.forEach(box => {
        box.addEventListener('click', (event) => {
          if (box.dataset.processing === 'true') {
            return;
          }

          box.dataset.processing = 'true';

          console.log('Variant clicked:', {
            index: box.dataset.index,
            variant: box.dataset.variant
          });

          updateVariantImage(box);

          setTimeout(() => {
            delete box.dataset.processing;
          }, 500);
        });
      });

      initializeProductSlider()
        .then(() => {
          console.log('Slider successfully initialized on page load');
        })
        .catch((error) => {
          console.error('Failed to initialize slider on page load:', error);
        });
    });

    function buyButtonHandler(subscription_selling_plan_id, buttonElement) {
    const selectedBox = productActions.querySelector('.purchase-option-box.selected');
    const selectedGiftContainer = productActions.querySelector('.gift-option-container.selected');
    if (!selectedBox || !selectedGiftContainer) {
        console.error('Please select both a product and a gift.');
        return;
    }

    const giftOptionBorder = selectedGiftContainer.querySelector('.gift-option-border');
    const giftId = giftOptionBorder ? giftOptionBorder.dataset.giftId : null;
    if (!giftId) {
        console.error('Gift ID not found.');
        return;
    }

    toggleButtonLoading(buttonElement, true);

    if (isSubscriptionSelected()) {
        const variant_id = selectedBox.dataset.originalVariant;
        buySubscription(variant_id, 1, subscription_selling_plan_id, giftId);
    } else {
        const variant_id = selectedBox.dataset.variant;
        const purchaseOptionBox = buttonElement.closest('.purchase-option-box');
        const dc = purchaseOptionBox ? purchaseOptionBox.dataset.dc : null;
        redirectToCheckout(variant_id, dc, giftId);
    }
}

function redirectToCheckout(variant_id, dc, giftId) {
    let checkoutLink = `https://${location.hostname}/cart/${variant_id}:1`;
    if (giftId) {
        checkoutLink += `,${giftId}:1`;
    }
    if (dc) checkoutLink += "?discount=" + atob(dc);
    window.location.href = checkoutLink;
}

    function toggleButtonLoading(buttonElement, isLoading) {
      const loader = buttonElement.querySelector('.loading-overlay__spinner');
      const buttonText = buttonElement.querySelector('.button-text');

      if (!loader) {
        console.error("Loader element not found");
        return;
      }

      loader.style.display = isLoading ? 'block' : 'none';
      buttonText.style.display = isLoading ? 'none' : 'block';
    }

    async function clearCart() {
      try {
        const response = await fetch('/cart/clear.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        if (!response.ok) throw new Error('Failed to clear cart');
        console.log('Cart cleared');
        return true;
      } catch (error) {
        console.log('Failed to clear cart:', error);
        return false;
      }
    }

    // Modify your existing cart functions to handle the gift
		async function buySubscription(variant_id, qty, selling_plan, giftId) {
			const cartCleared = await clearCart();
			if (!cartCleared) return;

			// Add main product
			const mainProduct = {
				"id": variant_id,
				"quantity": qty,
				"selling_plan": selling_plan
			};

			// Add gift product
			const giftProduct = {
				"id": giftId,
				"quantity": 1
			};

			try {
				// Add main product to cart
				await fetch('/cart/add.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(mainProduct)
				});

				// Add gift to cart
				await fetch('/cart/add.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(giftProduct)
				});

				window.location.href = '/checkout';
			} catch (error) {
				console.log('Failed to add items to cart:', error);
			}
		}
  });
</script>

<style>
	.gift-selector-wrap {
  margin: 1rem 0;
}

.gift-option-border {
  transition: all 0.3s ease;
  border: 2px solid #e5e7eb;
  background: #fff;
  width: 120px;
	height: 120px;
}

.gift-option-border:hover {
  border-color: var(--primary-color-light);
}

.gift-option-container.selected .gift-option-border {
    border-color: var(--primary-color);
    background-color: rgba(var(--primary-color-rgb), 0.05);
}

.check-mark {
    transition: all 0.2s ease;
}

.check-mark.hidden {
    display: none;
}

.radio-indicator {
  border-color: var(--primary-color);
  transition: all 0.2s ease;
}

.gift-price {
  font-size: 0.875rem;
}

.original-price {
  color: var(--primary-color-light);
}

.sale-price {
  color: var(--primary-color-dark);
}
</style>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
  }

  #cta-section-{{ SID }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;

    &.selected {
      color: white !important;
    }

    &:not(.selected) {
      background: var(--primary-color-light);
      border: 1px solid var(--primary-color);

      .subscription-details {
        color: var(--primary-color-dark);
      }
    }
  }

  #cta-section-{{ SID }} .purchase-option-box .radio-box input[type='radio'] {
      display: none;
  }

  #cta-section-{{ SID }} .purchase-option-box .radio-box label {
      cursor: pointer;
      width: 19px;
      height: 19px;
      border: 1px solid var(--primary-color);
      border-radius: 50%;
      position: relative;
  }

  #cta-section-{{ SID }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
      content: '\2713';
      position: absolute;
      top: -2px;
      left: -2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary-color);
      text-align: center;
      line-height: 22px;
      color: #fff;
  }

  #cta-section-{{ SID }} .product-actions {
    grid-area: 2/2/3/3;
    min-height: 415px;

    @media (width < 768px) {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }
  }

  #cta-section-{{ SID }} .purchase-option-box {
    background: #fff;
    border: 1px solid #cbcbcb;
    cursor: pointer;
    max-height: 68px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 0.75rem 1rem;

    &:hover {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    }

    &.selected {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      border-width: 3px;
      max-height: max-content;
    }

    &[inert] {
      max-height: 68px !important;
      background: #ededed;
      opacity: 0.6;

      .option-title {
        color: grey;
      }
    }

    @media (width < 1270px) {
      width: 100%;
    }

    @media (width < 768px) {
      font-size: 4vw;
    }

    .save-title {
      background-color: var(--primary-color);
    }

    .radio-box {
      align-items: center;
      display: flex;

      @media (width < 768px) {
        padding: 3vw 0;
      }
    }

    .price-wrapper {
      .total-price {
        color: var(--primary-color-dark);
      }

      .compared-at-price {
        color: var(--primary-color-light);
      }
    }
  }

  .subscription-content,
  .buy-once-content,
  .subtitle.subscription,
  .subtitle.buy-once {
    transition: opacity 0.3s ease-in-out;
  }

  /* Initial states */
  .subscription-content,
  .buy-once-content,
  .subtitle.subscription,
  .subtitle.buy-once {
    opacity: 0;
    display: none;
  }

  /* Active states */
  .subscription-content.active,
  .buy-once-content.active,
  .subtitle.subscription.active,
  .subtitle.buy-once.active {
    opacity: 1;
    display: block;
  }
</style>