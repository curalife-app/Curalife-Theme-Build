{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, index: forloop.index %}
    {% endfor %}

    <div class="subscription-benefits">
      <h3>Complimentary subscriber benefits:</h3>
      <ul class="benefits-list">
        <li>
          <span class="benefit-icon">üéÅ</span>
          <span class="benefit-text">Free gift in every box!</span>
        </li>
        <li>
          <span class="benefit-icon">üë®‚Äç‚öïÔ∏è</span>
          <span class="benefit-text">Free Expert Consultations</span>
        </li>
        <li>
          <span class="benefit-icon">üí∞</span>
          <span class="benefit-text">Best Price Guarantee</span>
        </li>
      </ul>
      <a href="#" id="see-all-benefits" class="see-all-link">See all benefits</a>
    </div>

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }

  /* Subscription Benefits Styles */
  #cta-section-{{ section.id }} .subscription-benefits {
    background-color: var(--primary-color-light);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  #cta-section-{{ section.id }} .subscription-benefits h3 {
    color: var(--primary-color);
    font-size: 1.1rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }

  #cta-section-{{ section.id }} .benefits-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  #cta-section-{{ section.id }} .benefits-list li {
    display: flex;
    align-items: center;
    margin-bottom: 0.75rem;
    transition: transform 0.2s ease-in-out;
  }

  #cta-section-{{ section.id }} .benefits-list li:hover {
    transform: translateX(5px);
  }

  #cta-section-{{ section.id }} .benefit-icon {
    font-size: 1.25rem;
    margin-right: 0.75rem;
    width: 1.5rem;
    text-align: center;
  }

  #cta-section-{{ section.id }} .benefit-text {
    font-size: 0.9rem;
    color: var(--text-color);
  }

  #cta-section-{{ section.id }} .see-all-link {
    display: inline-block;
    margin-top: 0.5rem;
    color: var(--primary-color);
    font-size: 0.9rem;
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease-in-out;
  }

  #cta-section-{{ section.id }} .see-all-link:hover {
    color: var(--primary-color-dark);
    text-decoration: underline;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
    }

    #cta-section-{{ section.id }} .purchase-option-box .radio-box {
      padding: 3vw 0;
    }

    #cta-section-{{ section.id }} .subscription-benefits {
      padding: 0.75rem;
    }

    #cta-section-{{ section.id }} .subscription-benefits h3 {
      font-size: 1rem;
    }

    #cta-section-{{ section.id }} .benefit-icon {
      font-size: 1.1rem;
    }

    #cta-section-{{ section.id }} .benefit-text {
      font-size: 0.8rem;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const SID = '{{ SID }}';
  const productActions = document.getElementById(`product-actions-${SID}`);
  const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
  const enableToggleAnimation = {{ isVariantBoxToggle | default: false }};
  const variantsAmount = {{ variantsAmount | default: 1 }};
  const defaultSelectionIndex = {{ defaultSelectionIndex | default: 1 }};

  const selectors = {
    subscriptionButton: `.purchase-type button.subscription`,
    submitSellingPlanId: `.submit-selling-plan-id`,
    submitVariantId: `.submit-variant-id`,
    bwpButton: `.bwp-button`,
    purchaseTypeButtons: `.purchase-type button`
  };

  function $(selector) {
    return productActions.querySelector(selector);
  }

  function $$(selector) {
    return productActions.querySelectorAll(selector);
  }

  function isSubscriptionSelected() {
    return $(selectors.subscriptionButton).classList.contains('selected');
  }

  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = parseInt(urlParams.get('default-variant')) || defaultSelectionIndex;

    $(selectors.subscriptionButton).click();
    const initialVariant = purchaseOptionBoxes[defaultVariant - 1] || purchaseOptionBoxes[0];
    initialVariant.click();
    initialVariant.querySelector("input[type='radio']").checked = true;
  }

  function togglePurchaseType(parentBox, isSubscriptionSelected) {
    const elements = {
      perMonth: parentBox.querySelector('.per-month'),
      subscription: parentBox.querySelector('.subscription'),
      buyOnce: parentBox.querySelector('.buy-once'),
      bwpButton: $(selectors.bwpButton),
      subscriptionTerms: parentBox.querySelector('.subscription-terms')
    };

    const visibility = isSubscriptionSelected ? 'show' : 'hide';
    ['perMonth', 'subscription', 'subscriptionTerms'].forEach(el => elements[el]?.classList[visibility]('hidden'));
    ['buyOnce', 'bwpButton'].forEach(el => elements[el]?.classList[visibility === 'show' ? 'hide' : 'show']('hidden'));

    const sellingPlanId = parentBox.dataset.subscriptionSellingPlanId;
    if (isSubscriptionSelected && sellingPlanId > 0) {
      $(selectors.submitSellingPlanId).value = sellingPlanId;
      parentBox.removeAttribute('inert');
    } else {
      $(selectors.submitSellingPlanId).value = '';
      if (isSubscriptionSelected) {
        parentBox.setAttribute('inert', '');
        parentBox.classList.remove('selected');
        Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'))?.click();
      } else {
        parentBox.removeAttribute('inert');
      }
    }

    updatePriceDisplay(parentBox, isSubscriptionSelected);
    adjustMaxHeight(parentBox, isSubscriptionSelected);
  }

  function updatePriceDisplay(parentBox, isSubscriptionSelected) {
    const prices = {
      item: parseInt(parentBox.dataset.itemPrice),
      subscription: parseInt(parentBox.dataset.subscriptionItemPrice),
      original: parseInt(parentBox.dataset.originalItemCap)
    };

    const currentPrice = isSubscriptionSelected ? prices.subscription : prices.item;
    const priceElement = parentBox.querySelector(`.real-price.${isSubscriptionSelected ? 'subscription' : 'buy-once'} .floor`);
    const totalPriceElement = parentBox.querySelector(`.total-price.${isSubscriptionSelected ? 'subscription' : 'buy-once'} .floor`);
    const comparedAtPriceElement = parentBox.querySelector('.compared-at-price');

    priceElement.textContent = `$${formatPrice(currentPrice)}`;
    if (totalPriceElement) totalPriceElement.textContent = `$${formatPrice(currentPrice)}`;

    if (prices.original > currentPrice) {
      comparedAtPriceElement.textContent = `$${formatPrice(prices.original)}`;
      comparedAtPriceElement.classList.remove('hidden');
    } else {
      comparedAtPriceElement.classList.add('hidden');
    }

    const saveTag = parentBox.querySelector(`.save-title.${isSubscriptionSelected ? 'subscription' : 'buy-once'}`);
    saveTag.classList.remove('hidden');
    saveTag.siblings('.save-title').classList.add('hidden');
  }

  function formatPrice(cents) {
    return (cents / 100).toFixed(2);
  }

  function adjustMaxHeight(element, isSubscriptionSelected) {
    if (!enableToggleAnimation) return;

    const height = isSubscriptionSelected ? `${element.scrollHeight}px` : '72px';
    element.style.maxHeight = height;
    element.querySelector('.toggle-icon')?.classList[isSubscriptionSelected ? 'remove' : 'add']('hidden');
  }

  function togglePurchaseBox(element) {
    if (element.classList.contains('selected')) return;

    const isSubscription = isSubscriptionSelected();
    purchaseOptionBoxes.forEach(box => {
      box.classList.remove('selected');
      if (enableToggleAnimation && isSubscription) {
        box.style.maxHeight = '72px';
        box.querySelector('.toggle-icon')?.classList.add('hidden');
      }
    });

    $(selectors.submitSellingPlanId).value = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
    $(selectors.submitVariantId).value = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

    element.classList.add('selected');
    element.querySelector("input[type='radio']").checked = true;

    togglePurchaseType(element, isSubscription);
    updateVariantImage(element);
  }

  function updateVariantImage(element) {
    if (variantsAmount <= 1 || !window.productSliderAllInOne{{ SID }}) return;

    const slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - (variantsAmount + 1 - element.dataset.index);
    window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
    window.hasInitialImageUpdateHappened = true;
  }

  productActions.addEventListener('click', function(event) {
    const target = event.target;

    if (target.closest(selectors.purchaseTypeButtons)) {
      event.preventDefault();
      const isSubscription = target.classList.contains('subscription');
      $$(selectors.purchaseTypeButtons).forEach(btn => btn.classList.toggle('selected', btn === target));
      purchaseOptionBoxes.forEach(box => togglePurchaseType(box, isSubscription));
    } else if (target.closest('.purchase-option-box')) {
      event.preventDefault();
      togglePurchaseBox(target.closest('.purchase-option-box'));
    }
  });

  document.getElementById('see-all-benefits')?.addEventListener('click', function(event) {
    event.preventDefault();
    console.log('Show benefits modal');
    // Implement showBenefitsModal() function here
  });

  initializePurchaseOptions();
});
</script>