{%- comment -%}
# Responsive Image Component Documentation

This Liquid snippet creates a responsive image component with the following features:
- Responsive images with desktop/mobile variants
- Optional automatic mobile image detection
- Lazy loading with priority options
- Error logging and fallback handling
- WebP format support
- Configurable breakpoints and sizes
- Link wrapper functionality
{%- endcomment -%}

{%- liquid
  #######################################
  # Initialize variables with defaults
  #######################################
  assign desktop_image = image
  assign mobile_image_provided = mobile_image
  assign lazy_load = lazy | default: true
  assign is_priority = priority | default: false
  assign load_mobile = load_mobile | default: false
  assign load_global = load_global | default: false
  assign alt = alt | default: image.alt
  assign mobile_breakpoint = mobile_breakpoint | default: 768
  assign sizes = sizes | default: '(min-width: 1200px) 1200px, (min-width: 768px) 768px, 100vw'
  assign breakpoints = '375,640,768,1080,1200,1920,2560' | split: ','

  #######################################
  # Initialize debug logs
  #######################################
  assign debug_logs = ''
  assign debug_logs = debug_logs | append: 'Initializing variables with defaults...\n'

  #######################################
  # Check if store is global
  #######################################
  assign shop_name = shop.name | downcase
  assign is_global_store = false
  if shop_name contains 'global'
    assign is_global_store = true
    assign debug_logs = debug_logs | append: 'Store is identified as global.\n'
  else
    assign debug_logs = debug_logs | append: 'Store is not global.\n'
  endif

  #######################################
  # Process desktop image path
  #######################################
  assign full_path = desktop_image.src
  assign path_parts = full_path | split: '/'
  assign filename = path_parts | last
  assign image_name = filename | split: '.' | first
  assign image_ext = filename | split: '.' | last
  assign base_image_name = image_name

  assign debug_logs = debug_logs | append: 'Processing desktop image path...\n'
  assign debug_logs = debug_logs | append: 'Image name: ' | append: image_name | append: '\n'
  assign debug_logs = debug_logs | append: 'Image extension: ' | append: image_ext | append: '\n'

  #######################################
  # Construct Global Variant URL if Enabled
  #######################################
  assign has_global_variant = false
  assign desktop_variant_filename = ''
  if load_global and is_global_store
    assign image_name = image_name | append: '-global'
    assign has_global_variant = true
    assign desktop_variant_filename = image_name | append: '.' | append: image_ext
    assign debug_logs = debug_logs | append: 'Global variant will be used.\n'
  else
    assign desktop_variant_filename = image_name | append: '.' | append: image_ext
  endif
  assign desktop_variant_url = desktop_variant_filename | file_url

  #######################################
  # Handle Mobile Variant
  #######################################
  assign has_mobile_variant = false
  assign mobile_variant_url = ''

  if mobile_image_provided != blank
    # Use the provided mobile_image
    assign has_mobile_variant = true
    assign mobile_variant_url = mobile_image_provided.src
    assign debug_logs = debug_logs | append: 'Mobile image provided directly.\n'
  elsif load_mobile
    # Construct mobile variant URL based on naming convention
    if has_global_variant
      assign mobile_variant_filename = image_name | append: '-mbl.' | append: image_ext
    else
      assign mobile_variant_filename = base_image_name | append: '-mbl.' | append: image_ext
    endif
    assign mobile_variant_url = mobile_variant_filename | file_url

    # Check if the mobile variant URL exists
    unless mobile_variant_url == blank or mobile_variant_url contains '404' or mobile_variant_url contains 'no-image' or mobile_variant_url contains 'null'
      assign has_mobile_variant = true
      assign debug_logs = debug_logs | append: 'Mobile variant URL exists: ' | append: mobile_variant_url | append: '\n'
    else
      assign has_mobile_variant = false
      assign mobile_variant_url = ''
      assign debug_logs = debug_logs | append: 'Mobile variant URL does not exist.\n'
    endunless
  else
    assign debug_logs = debug_logs | append: 'Mobile variant not enabled.\n'
  endif

  #######################################
  # Initialize error log
  #######################################
  assign error_log = 'window.imageErrors = window.imageErrors || { missing_alt: [], missing_mobile: [], missing_global: [], load_errors: []};'

  #######################################
  # Validation checks
  #######################################
  if image == blank
    assign validation_error = '{ type: "Missing Image", message: "Image is required" }'
    assign error_log = error_log | append: 'window.imageErrors.missing_alt.push(' | append: validation_error | append: ');'
    assign debug_logs = debug_logs | append: 'Validation error: Image is required.\n'
  endif

  if alt == blank
    assign validation_error = '{ type: "Missing Alt", message: "Image Alt text is required", src: "' | append: image.src | append: '" }'
    assign error_log = error_log | append: 'window.imageErrors.missing_alt.push(' | append: validation_error | append: ');'
    assign debug_logs = debug_logs | append: 'Validation error: Image Alt text is required.\n'
  endif

  #######################################
  # Generate unique IDs and URLs
  #######################################
  assign unique_id = 'img-' | append: desktop_image.id | append: '-' | append: now | date: '%N'
  assign fallback_url = desktop_image | image_url: width: 1100

  assign debug_logs = debug_logs | append: 'Generated unique ID: ' | append: unique_id | append: '\n'
  assign debug_logs = debug_logs | append: 'Fallback URL: ' | append: fallback_url | append: '\n'
  assign debug_logs = debug_logs | append: 'Desktop variant URL: ' | append: desktop_variant_url | append: '\n'
  if has_mobile_variant
    assign debug_logs = debug_logs | append: 'Mobile variant URL: ' | append: mobile_variant_url | append: '\n'
  endif
-%}

<picture>
  {% if has_mobile_variant %}
    <source
      media="(max-width: {{ mobile_breakpoint }}px)"
      srcset="{{ mobile_variant_url }}"
      sizes="{{ sizes }}"
    >
  {% endif %}

  <source
    media="(min-width: {{ mobile_breakpoint | plus: 1 }}px)"
    srcset="{{ desktop_variant_url }}"
    sizes="{{ sizes }}"
  >

  <img
    id="{{ unique_id }}"
    src="{{ desktop_variant_url }}"
    {% if lazy_load and is_priority != true %}
      loading="lazy"
      decoding="async"
    {% else %}
      loading="eager"
      decoding="sync"
      fetchpriority="high"
    {% endif %}
    alt="{{ alt | escape }}"
    width="{{ desktop_image.width }}"
    height="{{ desktop_image.height }}"
    class="object-cover opacity-0 m-0 transition-opacity duration-300 ease-in-out {% if link %}cursor-pointer{% endif %} {% if class %}{{ class }}{% endif %}"
    onload="console.log('Image {{ unique_id }} loaded successfully'); this.classList.add('opacity-100');"
    onclick="{% if link %}window.location.href='{{ link }}'{% endif %}"
    onerror="window.logImageError('load_errors', {
      imageId: '{{ desktop_image.id }}',
      elementId: '{{ unique_id }}',
      fallbackUrl: '{{ fallback_url }}',
      originalSrc: this.src
    }); this.onerror=null; this.src='{{ fallback_url }}'"
    data-original-url="{{ fallback_url }}"
    {%- if link -%}
      data-href="{{ link }}"
    {%- endif -%}
  >
</picture>

<script>
  {{ error_log }}

  // Output debug logs to the console
  console.log('Debug Logs for Image {{ unique_id }}:\n{{ debug_logs | escape }}');

  // Prepare debug data object
  var debugData = {
    unique_id: {{ unique_id | json }},
    desktop_image: {
      id: {{ desktop_image.id | json }},
      src: {{ desktop_image.src | json }},
      width: {{ desktop_image.width | json }},
      height: {{ desktop_image.height | json }},
      alt: {{ desktop_image.alt | json }}
    },
    mobile_image_provided: {
      id: {{ mobile_image_provided.id | json }},
      src: {{ mobile_image_provided.src | json }},
      width: {{ mobile_image_provided.width | json }},
      height: {{ mobile_image_provided.height | json }},
      alt: {{ mobile_image_provided.alt | json }}
    },
    lazy_load: {{ lazy_load | json }},
    is_priority: {{ is_priority | json }},
    load_mobile: {{ load_mobile | json }},
    load_global: {{ load_global | json }},
    alt: {{ alt | json }},
    mobile_breakpoint: {{ mobile_breakpoint | json }},
    sizes: {{ sizes | json }},
    breakpoints: {{ breakpoints | json }},
    shop_name: {{ shop_name | json }},
    is_global_store: {{ is_global_store | json }},
    has_global_variant: {{ has_global_variant | json }},
    desktop_variant_url: {{ desktop_variant_url | json }},
    has_mobile_variant: {{ has_mobile_variant | json }},
    mobile_variant_url: {{ mobile_variant_url | json }},
    fallback_url: {{ fallback_url | json }}
  };
  console.log('Debug Data for Image {{ unique_id }}:', debugData);

  if (!window.logImageError) {
    window.hasDisplayedImageErrors = false;

    window.debouncedDisplayErrors = (function() {
      let timeoutId = null;
      return function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
          if (!window.hasDisplayedImageErrors) {
            const errors = window.imageErrors;
            const hasErrors = Object.values(errors).some(arr => arr.length > 0);

            if (hasErrors) {
              console.warn('ðŸš¨ Image Component Errors Summary:', {
                totalErrors: Object.values(errors).reduce((sum, arr) => sum + arr.length, 0),
                Errors: errors
              });

              window.hasDisplayedImageErrors = true;
            }
          }
          timeoutId = null;
        }, 1000);
      };
    })();

    window.logImageError = function(type, data) {
      if (!window.imageErrors[type]) {
        window.imageErrors[type] = [];
      }

      data.timestamp = new Date().toISOString();
      const existingError = window.imageErrors[type].find(
        error => error.imageId === data.imageId && error.type === data.type
      );

      if (!existingError) {
        window.imageErrors[type].push(data);
        console.error('Image Error:', type, data);
        window.debouncedDisplayErrors();
      }
    };
  }

  if (window.imageErrors && !window.hasDisplayedImageErrors) {
    window.debouncedDisplayErrors();
  }
</script>
