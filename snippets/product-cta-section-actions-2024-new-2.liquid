<div id="product-actions-{{ SID }}" class="product-actions">
  <div class="buying-options">
    <h6>Buying Options:</h6>

    <div class="purchase-type mt-2">
      <div class="option one-time-purchase">
        <label>
          <input type="radio" name="purchase-type" value="one-time" checked>
          <span class="option-text">One Time Purchase</span>
          <span class="popular-tag">Popular</span>
        </label>

        <div class="quantity-options">
          <div class="quantity-option" data-quantity="1">
            <input type="radio" name="quantity" id="qty-1" value="1">
            <label for="qty-1">
              <span class="buy-text">Buy 1</span>
              <span class="price"></span>
            </label>
          </div>

          <div class="quantity-option selected" data-quantity="3">
            <input type="radio" name="quantity" id="qty-3" value="3" checked>
            <label for="qty-3">
              <div class="left-wrapper">
                <span class="buy-text">Buy 3</span>
                <span class="save-tag"></span>
              </div>
              <div class="price-wrapper">
                <span class="price"></span>
                <span class="original-price"></span>
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="option subscription">
        <label>
          <input type="radio" name="purchase-type" value="subscription">
          <span class="option-text">Purchase With Subscription</span>
          <span class="best-value-tag">Best Value<br>30% Off</span>
        </label>
      </div>
    </div>

    <button type="submit" class="submit-button">Add to Cart</button>
  </div>
</div>

<style>
  .product-actions {
    max-width: 400px;
  }

  .purchase-type {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
  }

  .option {
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    transition: all 0.3s ease;
    min-height: 60px;
    display: grid;
  }

  .option > label {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .option input[type="radio"] {
    margin-right: 10px;
  }

  .popular-tag, .best-value-tag {
    margin-left: auto;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
  }

  .popular-tag {
    background-color: #FFEBCD;
  }

  .best-value-tag {
    background-color: #C8EAFF;
    text-align: center;
  }

  .quantity-options {
    display: flex;
    gap: 10px;
    margin-top: 10px;
  }

  .quantity-option {
    flex: 1;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .quantity-option input[type="radio"] {
    display: none;
  }

  .quantity-option label {
    display: flex;
    align-items: center;
    padding: 10px;
    cursor: pointer;
    justify-content: space-between;
    height: 100%;
  }

  .quantity-option.selected {
    border-color: var(--orange);
    border-width: 2px;
    box-shadow: 0 0 5px rgba(225, 188, 65, 0.5);
  }

  .buy-text {
    font-weight: bold;
  }

  .price {
    color: var(--curaslim);
    font-weight: bold;
  }

  .original-price {
    text-decoration: line-through;
    color: #888;
    font-size: 0.9em;
  }

  .save-tag {
    background-color: var(--orange);
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
    margin-top: 5px;
  }

  .submit-button {
    width: 100%;
    padding: 10px;
    background-color: var(--orange);
    color: black;
    border: none;
    border-radius: 100px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .submit-button:hover {
    background-color: var(--dark-orange);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productActions = document.getElementById('product-actions-{{ SID }}');
    const purchaseTypeInputs = productActions.querySelectorAll('.purchase-type input[name="purchase-type"]');
    const quantityOptions = productActions.querySelectorAll('.quantity-option');
    const submitButton = productActions.querySelector('.submit-button');

    const productData = {
      basePrice: 39.90,
      subscriptionDiscount: 0.3,
      bulkDiscounts: {
        3: 0.2
      }
    };

    function init() {
      purchaseTypeInputs.forEach(input => input.addEventListener('change', handlePurchaseTypeChange));
      quantityOptions.forEach(option => option.addEventListener('click', handleQuantityOptionClick));
      submitButton.addEventListener('click', handleSubmit);
      updatePurchaseOptions();
    }

    function handlePurchaseTypeChange(event) {
      const purchaseType = event.target.value;
      updatePurchaseOptions(purchaseType);
    }

    function handleQuantityOptionClick(event) {
      const clickedOption = event.currentTarget;
      selectQuantityOption(clickedOption);
      updatePricing();
    }

    function selectQuantityOption(option) {
      quantityOptions.forEach(opt => opt.classList.remove('selected'));
      option.classList.add('selected');
      option.querySelector('input[type="radio"]').checked = true;
    }

    function updatePurchaseOptions(purchaseType = 'one-time') {
      const isSubscription = purchaseType === 'subscription';
      const quantityOptionsContainer = productActions.querySelector('.quantity-options');
      quantityOptionsContainer.style.display = isSubscription ? 'none' : 'flex';
      updatePricing();
      highlightSelectedOption(purchaseType);
    }

    function highlightSelectedOption(purchaseType) {
      const options = productActions.querySelectorAll('.option');
      options.forEach(option => {
        option.classList.toggle('selected', option.classList.contains(purchaseType === 'subscription' ? 'subscription' : 'one-time-purchase'));
      });
    }

    function updatePricing() {
      const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
      const selectedQuantity = isSubscription ? 1 : parseInt(productActions.querySelector('.quantity-option.selected').dataset.quantity);

      const { price, originalPrice, discount } = calculatePrices(selectedQuantity, isSubscription);

      updateSubmitButton(price, isSubscription);
      updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount);
    }

    function calculatePrices(quantity, isSubscription) {
      const { basePrice, subscriptionDiscount, bulkDiscounts } = productData;
      const bulkDiscount = bulkDiscounts[quantity] || 0;
      const totalDiscount = isSubscription ? subscriptionDiscount : bulkDiscount;

      const originalPrice = basePrice * quantity;
      const discountedPrice = originalPrice * (1 - totalDiscount);

      return {
        price: discountedPrice.toFixed(2),
        originalPrice: originalPrice.toFixed(2),
        discount: totalDiscount
      };
    }

    function updateSubmitButton(price, isSubscription) {
      submitButton.textContent = `${isSubscription ? 'Subscribe Now' : 'Add to Cart'} - £${price}`;
    }

    function updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount) {
      quantityOptions.forEach(option => {
        const quantity = parseInt(option.dataset.quantity);
        const priceElement = option.querySelector('.price');
        const originalPriceElement = option.querySelector('.original-price');
        const saveTagElement = option.querySelector('.save-tag');

        if (quantity === selectedQuantity) {
          priceElement.textContent = `£${price}`;
          if (discount > 0) {
            originalPriceElement.textContent = `£${originalPrice}`;
            originalPriceElement.style.display = 'block';
            saveTagElement.textContent = `Save ${(discount * 100).toFixed(0)}%`;
            saveTagElement.style.display = 'block';
          } else {
            originalPriceElement.style.display = 'none';
            saveTagElement.style.display = 'none';
          }
        } else {
          const { price: individualPrice } = calculatePrices(quantity, false);
          priceElement.textContent = `£${individualPrice}`;
        }
      });
    }

    function handleSubmit(event) {
      event.preventDefault();
      const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
      const quantity = isSubscription ? 1 : parseInt(productActions.querySelector('.quantity-option.selected').dataset.quantity);
      const { price } = calculatePrices(quantity, isSubscription);

      console.log(`Adding to cart: ${quantity} item(s), Subscription: ${isSubscription}, Price: £${price}`);
      // Implement your add to cart logic here
    }

    init();
  });
</script>