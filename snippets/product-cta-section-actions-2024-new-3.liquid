{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions">
  <div class="purchase-options">
    <div class="purchase-type-toggle">
      <input type="checkbox" id="purchase-type-toggle-{{ SID }}" class="toggle-checkbox">
      <label for="purchase-type-toggle-{{ SID }}" class="toggle-label">
        <span class="toggle-inner"></span>
        <span class="toggle-switch"></span>
      </label>
      <span class="toggle-text subscribe">Subscribe & Save</span>
      <span class="toggle-text buy-once">Buy Once</span>
    </div>

    <div class="variants-container">
      {% for var in product.variants %}
        {% render 'product-cta-section-actions-variant',
          SID: SID,
          prod: product,
          var: var,
          buyBoxColor: buyBoxColor,
          pricePer: pricePer,
          index: forloop.index
        %}
      {% endfor %}
    </div>

    <div class="submit-wrap">
      <div class="checkout-button">
        {% render 'buy-buttons',
          product: product,
          variant: '',
          selling_plan_id: selling_plan_id,
          product_form_id: product_form_id,
          buyType: buyType,
          isBuyWithPrime: isBuyWithPrime
        %}
      </div>
    </div>
  </div>
</div>

<style>
  .product-actions {
    max-width: 410px;
    margin: 0 auto;
  }

  .purchase-type-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .toggle-checkbox {
    display: none;
  }

  .toggle-label {
    display: inline-block;
    width: 60px;
    height: 34px;
    background-color: #ccc;
    border-radius: 34px;
    position: relative;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .toggle-inner {
    display: block;
    width: 26px;
    height: 26px;
    background-color: white;
    border-radius: 50%;
    position: absolute;
    top: 4px;
    left: 4px;
    transition: transform 0.3s;
  }

  .toggle-checkbox:checked + .toggle-label {
    background-color: var(--primary-color);
  }

  .toggle-checkbox:checked + .toggle-label .toggle-inner {
    transform: translateX(26px);
  }

  .toggle-text {
    margin: 0 10px;
    font-weight: bold;
  }

  .variants-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .variant-option {
    border: 2px solid #ccc;
    border-radius: 8px;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .variant-option.selected {
    border-color: var(--primary-color);
    background-color: rgba(var(--primary-color-rgb), 0.1);
  }

  .variant-title {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .variant-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .price-amount {
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--primary-color);
  }

  .compared-price {
    text-decoration: line-through;
    color: #888;
  }

  .save-tag {
    background-color: var(--primary-color);
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
  }

  @media (max-width: 768px) {
    .product-actions {
      max-width: 100%;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productActions = document.getElementById('product-actions-{{ SID }}');
  const purchaseTypeToggle = productActions.querySelector('.toggle-checkbox');
  const variantOptions = productActions.querySelectorAll('.variant-option');
  const submitButton = productActions.querySelector('.checkout-button button');

  function updatePriceDisplay(variantOption, isSubscription) {
    const priceElement = variantOption.querySelector('.price-amount');
    const comparedPriceElement = variantOption.querySelector('.compared-price');
    const saveTag = variantOption.querySelector('.save-tag');

    const subscriptionPrice = variantOption.dataset.subscriptionPrice;
    const regularPrice = variantOption.dataset.regularPrice;
    const compareAtPrice = variantOption.dataset.compareAtPrice;
    const subscriptionDiscount = variantOption.dataset.subscriptionDiscount;
    const regularDiscount = variantOption.dataset.regularDiscount;

    if (isSubscription) {
      priceElement.textContent = subscriptionPrice;
      saveTag.textContent = `Save ${subscriptionDiscount}%`;
    } else {
      priceElement.textContent = regularPrice;
      saveTag.textContent = `Save ${regularDiscount}%`;
    }

    if (compareAtPrice > (isSubscription ? subscriptionPrice : regularPrice)) {
      comparedPriceElement.textContent = compareAtPrice;
      comparedPriceElement.style.display = 'inline';
      saveTag.style.display = 'inline';
    } else {
      comparedPriceElement.style.display = 'none';
      saveTag.style.display = 'none';
    }
  }

  function updateSelectedVariant() {
    const selectedVariant = productActions.querySelector('.variant-option.selected');
    const variantId = selectedVariant.dataset.variantId;
    const sellingPlanId = purchaseTypeToggle.checked ? selectedVariant.dataset.sellingPlanId : '';

    submitButton.dataset.variantId = variantId;
    productActions.querySelector('.submit-variant-id').value = variantId;
    productActions.querySelector('.submit-selling-plan-id').value = sellingPlanId;

    updatePriceDisplay(selectedVariant, purchaseTypeToggle.checked);
  }

  purchaseTypeToggle.addEventListener('change', function() {
    variantOptions.forEach(option => {
      updatePriceDisplay(option, this.checked);
    });
    updateSelectedVariant();
  });

  variantOptions.forEach(option => {
    option.addEventListener('click', function() {
      variantOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      updateSelectedVariant();
    });
  });

  // Initialize with default selection
  variantOptions[0].classList.add('selected');
  updateSelectedVariant();
});
</script>