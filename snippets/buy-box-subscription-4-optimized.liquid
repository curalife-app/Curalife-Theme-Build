{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if prod.handle == 'curalin' or prod.handle == 'curaslim' or prod.handle contains '-tm' %}
	{% if isGlobal %}
		{% assign shippingPrice = 690 %}
	{% else %}
		{% assign shippingPrice = 790 %}
	{% endif %}
{% else %}
	{% assign shippingPrice = 1000 %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% assign faqsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}

		{% when 'faq' %}
			{% assign faqsAmount = faqsAmount | plus: 1 %}
	{% endcase %}
{% endfor %}

<div
	id="cta-section-{{ SID }}"
	class="cta-section"
	data-default-selection="{{ defaultSelectionIndex }}"
	data-price-format="{{ priceFormat }}"
	data-save-format="{{ saveFormat }}"
	data-price-per="{{ pricePer }}"
	data-thumbs="{{ thumbsLayout }}"
	data-buy-type="{{ buyType }}"
	{% if isOneTimePurchase %}data-one-time-purchase{% endif %}
	{% if isOneTimeGift %}data-one-time-gift{% endif %}
	{% if isSlideVariant %}data-slide-variant{% endif %}
	{% if isPrimeEnabled %}data-buy-with-prime{% endif %}
	{% if isShowReviews %}data-show-reviews{% endif %}
	{% if isProductThumbs %}data-product-thumbs{% endif %}
	{% if isHideThumbs %}data-hide-thumbs{% endif %}
	{% if isHideInfo %}data-hide-info{% endif %}
	{% if isBuyQuantity %}data-buy-quantity{% endif %}>

	<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}" data-gifts-amount="{{ giftsAmount }}">
		<div class="purchase-options flex flex-col gap-3 mb-3">
			<div class="font-semibold text-[18px]">{{ variantsTitle | default: 'Choose your package' }}</div>

			<div class="variant-boxes flex justify-around gap-2">
				{% for block in blocks %}
					{% assign varPurchaseType = block.settings.purchase_type %}
					{% if block.type == 'variant' and varPurchaseType == 'subscribe' %}
						{% assign referenced_variant = blank %}
						{% if isGlobal %}
							{% assign blockVarID = block.settings.variant_id_global | plus: 0 %}
						{% else %}
							{% assign blockVarID = block.settings.variant_id | plus: 0 %}
						{% endif %}

						{% for vari in referenced_variant_product.variants %}
							{% assign currVarID = vari.id | plus: 0 %}

							{% if currVarID == blockVarID %}
								{% assign referenced_variant = vari %}
							{% endif %}
						{% endfor %}

						{% assign var = referenced_variant %}

						{% comment %} Core Variable Assignments {% endcomment %}
						{% assign variant_id = var.metafields.custom.reference_variant_id | default: var.id %}
						{% assign bottle_quantity = var.metafields.my_fields.pack_bottles_quantity %}

						{% comment %} Price Calculations {% endcomment %}
						{% assign original_item_price = var.metafields.custom.original_item.value.price %}
						{% assign original_item_cap = var.metafields.custom.original_item.value.compare_at_price | default: original_item_price %}
						{% assign original_item_cap_total = original_item_cap | times: bottle_quantity %}
						{% assign item_price = var.price | divided_by: bottle_quantity %}

						{% comment %} Savings Calculations {% endcomment %}
						{% assign subscription_save_money = original_item_cap | minus: subscription_item_price %}
						{% assign buy_once_save_money = original_item_cap | minus: item_price %}

						{% comment %} Selling Plan ID Logic {% endcomment %}
						{% if var.metafields.custom.referenced_variant_product_handle %}
							{% assign selling_plan_id = referenced_variant.metafields.subscription.selling_plan_id | default: variant.metafields.subscription.selling_plan_id %}
						{% elsif var.metafields.subscription.selling_plan_id %}
							{% assign selling_plan_id = var.metafields.subscription.selling_plan_id %}
						{% elsif var.selling_plan_allocations.size > 0 %}
							{% assign found_plan = false %}
							{% for allocation in var.selling_plan_allocations %}
								{% if allocation.selling_plan.name contains bottle_quantity %}
									{% assign selling_plan_id = allocation.selling_plan.id %}
									{% assign found_plan = true %}
									{% break %}
								{% endif %}
							{% endfor %}
							{% if found_plan == false %}
								{% assign selling_plan_id = var.selling_plan_allocations.first.selling_plan.id %}
							{% endif %}
						{% endif %}

						{% assign subscription_save_percents = 0 %}
						{% assign subscription_item_price = original_item_cap %}

						{% for allocation in var.selling_plan_allocations %}
							{% assign selling = selling_plan_id | minus: 0 %}
							{% if allocation.selling_plan.id == selling %}
								{% if allocation.compare_at_price %}
									{% assign original_price = allocation.compare_at_price %}
									{% assign discounted_price = allocation.price %}
									{% assign subscription_save_percents = original_price | minus: discounted_price | times: 100 | divided_by: original_price %}
									{% assign mod_5_remainder = subscription_save_percents | modulo: 5 %}
									{% if mod_5_remainder < 3 %}
										{% assign subscription_save_percents = subscription_save_percents | minus: mod_5_remainder %}
									{% else %}
										{% assign subscription_save_percents = subscription_save_percents | plus: 5 | minus: mod_5_remainder %}
									{% endif %}
									{% assign subscription_item_price = discounted_price | divided_by: bottle_quantity %}
								{% else %}
									{% assign subscription_save_percents = 0 %}
									{% assign subscription_item_price = allocation.price | divided_by: bottle_quantity %}
								{% endif %}
							{% endif %}
						{% endfor %}

						{% assign subscription_total_price = subscription_item_price | times: bottle_quantity %}

						{% assign firstMonthDiscount = block.settings.first_month_discount_percentage %}

						<div
						id="variant-box-{{ SID }}-{{ forloop.index }}"
						class="variant-box flex flex-col items-center variant-tab-style text-center w-full {{ varPurchaseType }}"
						data-variant="{{ blockVarID }}"
						data-product="{{ prod.id }}"
						data-original-variant="{{ var.id }}"
						data-subscription-selling-plan-id="{{ selling_plan_id }}"
						data-price="{{ var.price | money_without_currency | replace: ".00", "" }}"
						data-sku="{{ var.sku }}"
						data-index="{{ forloop.index }}"
						data-item-price="{{ item_price }}"
						data-subscription-price="{{ subscription_total_price }}"
						data-subscription-item-price="{{ subscription_item_price }}"
						data-original-item-cap="{{ original_item_cap }}"
						data-dc="{{ var.metafields.custom.discount_code | base64_encode }}"
						data-buy-once-discount="{{ var.metafields.custom.save_percents }}"
						data-subscription-discount="{{ subscription_save_percents }}"
						data-first-month-discount="{{ firstMonthDiscount }}"
						data-price-per="{{ pricePer }}"
						data-bottle-quantity="{{ bottle_quantity }}"
						data-purchase-type="{{ varPurchaseType }}"
						{% if block.settings.allowed_selling_plan_ids != blank %}
						data-allowed-selling-plans="{{ block.settings.allowed_selling_plan_ids | strip | escape }}"
						{% endif %}
							name="track:variant-box|variant-sku:{{ var.sku }}|purchase-type:{{ varPurchaseType }}">
							{% if product.handle == 'curalin' %}
								{% assign subscription_save_percents = var.metafields.subscription.save_percents %}
							{% endif %}
							{% if subscription_save_percents > 0 %}
								<div class="discount mbl:text-[3.5vw] text-white bg-primary font-bold w-full text-[13px] p-1">{{ subscription_save_percents | plus: firstMonthDiscount }}% OFF</div>
							{% endif %}

							<div class="title p-1">
								<span class="font-bold mbl:text-[4vw]">{{ bottle_quantity }} Bottle{% if bottle_quantity > 1 %}s{% endif %}</span>
							</div>

							<div class="md:hidden">
								<span class="title block mbl:text-[3.4vw]"></span>
							</div>
						</div>
					{% endif %}
				{% endfor %}
			</div>

			<div class="price-display">
				<div class="gap-y-2 flex flex-wrap items-end gap-2">
						<div class="final-price flex items-center gap-2">
								<div class="main-price text-primary flex items-end transition-opacity duration-200 ease-in-out">
										{% if priceFormat == 'total' %}
												<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_total_price | money }}</span>
										{% else %}
												<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_item_price | money }}</span>
												<span class="per-text mt-1 text-[20px]">/bottle</span>
										{% endif %}
								</div>

								<span class="cap self-end text-gray-500 line-through transition-opacity duration-200 ease-in-out">{{ original_item_cap | money }}</span>

								{% if priceFormat == 'total' and subscription_total_price != subscription_item_price %}
										<span class="discount-badge px-4 py-1 text-[16px] font-bold text-white bg-bronze rounded-full transition-opacity duration-200 ease-in-out">SAVE {{ subscription_save_money | money }}</span>
								{% endif %}
						</div>
				</div>

				{% if priceFormat == 'per_bottle' and subscription_total_price != subscription_item_price %}
						<div class="total-line mt-1 text-[16px] h-4 transition-opacity duration-200 ease-in-out">
								Total {{ subscription_total_price | money }}
								<span class="total-price-cap text-gray-500 line-through">{{ original_item_cap_total | money }}</span>
						</div>
				{% endif %}

				<div class="future-price-notice mt-2 text-[14px] text-gray-600 transition-opacity duration-200 ease-in-out"></div>
		</div>

		{% if variantsNotice != blank %}
			<div class="notice text-primary flex gap-2 my-4 text-[15px]">
				<span>ⓘ</span>
				<span>{{ variantsNotice }}</span>
			</div>
		{% endif %}

		<!-- Subscription Frequency Selector with direct Tailwind classes -->
		<div class="subscription-frequency-container hidden my-4 transition-all duration-300 ease-in-out" data-frequency-container>
			<div class="mb-3 font-semibold text-[18px]">Choose delivery frequency</div>
			<div class="subscription-frequency-selector">
				<div id="frequency-options-{{ SID }}" class="flex justify-start gap-2">
					<!-- Options will be dynamically populated by JavaScript -->
				</div>
			</div>
			<div class="frequency-description text-[14px] text-gray-600 mt-2 transition-opacity duration-300 ease-in-out leading-normal min-h-[24px]"><!-- Frequency description will be populated by JavaScript --></div>
		</div>

		{% render 'subscription-box-faq',
			SID: SID,
			faqsAmount: faqsAmount,
			blocks: blocks
		%}

		{% render 'subscription-box-gift-selector',
			SID: SID,
			giftsAmount: giftsAmount,
			blocks: blocks,
			isGlobal: isGlobal
		%}

		<div class="submit-wrap flex flex-col w-full">
			<div class="checkout-button">
				{% assign buttonSID = SID | append: '-checkout' %}
				{% if buyType == 'buy_now' %}{% assign ctaButtonTitle = 'Get Started' %}{% else %}{% assign ctaButtonTitle = 'Add To Cart' %}{% endif %}

				{% render 'buy-buttons-new-4-old',
					SID: buttonSID,
					product: prod,
					variant: '',
					buttonText: ctaButtonTitle,
					selling_plan_id: selling_plan_id,
					product_form_id: product_form_id,
					buyType: buyType,
					isBuyWithPrime: isBuyWithPrime,
					buyboxType: buyboxType,
					buyboxName: buyboxName
				%}
			</div>

			<div class="one-time-purchase-link mt-3 text-center">
				{% if isOneTimePurchaseLink %}
					{% assign firstVariant = prod.selected_or_first_available_variant %}
					<div
						id="one-time-add-to-cart"
						class="one-time-add-to-cart variant-box text-primary mb-2 underline cursor-pointer"
						name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
						data-variant-id="{{ firstVariant.id }}"
						data-bottle-quantity="1"
						data-sku="{{ firstVariant.sku }}"
						data-purchase-type="buyonce">
						Buy Once for {{ firstVariant.price | money }} + {{ shippingPrice | money | replace: '.00', '' }} Shipping
					</div>
				{% endif %}
			</div>

			{% if blocks.size > 0 %}
				{% for block in blocks %}
					{% if block.type == 'text' %}
						<div class="text-content text-[14px] text-primary whitespace-break-spaces {% if block.settings.text_position == 'center' %}text-center{% else %}text-start{% endif %}">{{ block.settings.content }}</div>
					{% endif %}
				{% endfor %}
			{% endif %}
		</div>
	</div>
</div>

<!-- For supporting old styles but with Tailwind classes, hidden by default -->
<div class="buy-box grid grid-cols-[45%_40%] gap-x-[5%] justify-center hidden">
</div>

<style>
	/* Core variables - keep these as CSS variables */
	#cta-section-{{ SID }} {
			--text-color: #4a5568;
			--radio-size: 1em;
			--radio-size-mobile: 1em;
			--transition-speed: 0.2s;

			/* Variant Tab Styles */
			.variant-box.variant-tab-style,
			.frequency-option.variant-tab-style {
					border-radius: 0.375rem;
					cursor: pointer;
					align-content: center;
					transition: all 0.3s ease;

					&.variant-box {
						border-width: 2px;
						border-color: var(--primary-color);
					}

					&.selected {
							background-color: var(--primary-color);
							color: white;

							.discount {
									background-color: var(--orange);
									color: var(--primary-color);
									transition: all 0.3s ease;
							}
					}

					&:not(.selected):hover {
						background-color: var(--bg-color);
					}
			}

			/* Frequency selector styles */
			.subscription-frequency-container {
				margin-top: 16px;
				margin-bottom: 16px;
			}

			.frequency-option {
				min-width: 100px;
				background-color: var(--bg-color);
				color: var(--primary-color);
				border-width: 1px;
				border-color: var(--border-color, #e2e8f0);
			}

			/* Product Actions - Keep these custom grid areas */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* Radio Input Styles */
			.radio-input {
					display: flex;
					align-items: center;
					justify-content: center;
					position: relative;

					input[type='radio'] {
							&:hover,
							.variant-box:hover & {
									transform: scale(1.1);
									cursor: pointer;
									transition: 0.1s all;
							}
					}
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 1269px) {
					.variant-box {
							width: 100%;
					}
			}

			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}
	}
</style>

<!-- Load buy-box.js script if not already loaded -->
<script>
	document.addEventListener('DOMContentLoaded', function() {
		console.log('Initializing buy-box-subscription-4-optimized-2, SID: {{ SID }}');

		// Load the buy-box.js script if not already loaded
		if (!window.CuralifeBoxes || !window.CuralifeBoxes.initialized) {
			const script = document.createElement('script');
			script.src = "{{ 'buy-box.js' | asset_url }}";
			script.async = true;
			document.head.appendChild(script);

			// Initialize after script loads
			script.onload = function() {
				if (window.CuralifeBoxes) {
					// Initialize all buy boxes on the page
					window.CuralifeBoxes.initAll();

					// Give some time for initialization then ensure the product variant data is available
					setTimeout(function() {
						initializeProductData('{{ SID }}');
					}, 300);
				}
			};
		} else {
			// Script already loaded, just ensure product data is available
			initializeProductData('{{ SID }}');
		}

		// Cache DOM elements to avoid repeated queries
		const domCache = {};

		/**
		 * Get a DOM element with caching
		 * @param {string} selector - CSS selector
		 * @param {Element} context - Parent element context (optional)
		 * @returns {Element|null} - The found element or null
		 */
		function getElement(selector, context = document) {
			const key = `${context === document ? 'doc' : 'ctx'}_${selector}`;
			if (!domCache[key]) {
				domCache[key] = context.querySelector(selector);
			}
			return domCache[key];
		}

		/**
		 * Clear cache for a specific selector or all cache if no selector provided
		 */
		function clearCache(selector = null) {
			if (selector) {
				Object.keys(domCache).forEach(key => {
					if (key.endsWith(selector)) {
						delete domCache[key];
					}
				});
			} else {
				Object.keys(domCache).forEach(key => {
					delete domCache[key];
				});
			}
		}

		/**
		 * Ensures the product data is available for variants
		 * This is critical for frequency options to work properly
		 */
		function initializeProductData(SID) {
			const section = getElement(`#cta-section-${SID}`);
			if (!section) return;

			// Get selected variant box
			const selectedBox = section.querySelector('.variant-box.selected') || section.querySelector('.variant-box');
			if (!selectedBox) return;

			const productId = selectedBox.dataset.product;
			const variantId = selectedBox.dataset.variant;

			// Only initialize if we have both IDs
			if (!productId || !variantId) return;

			// Create product data structure if it doesn't exist
			if (!window.productData) window.productData = {};

			// Key step: Make the product data available to buy-box.js
			// This is crucial for frequency options to render correctly
			if (!window.productData[productId]) {
				// Initialize with basic structure that buy-box.js expects
				window.productData[productId] = {
					id: productId,
					variants: [],
					initialized: false
				};
			}

			// Get all variant boxes for this product
			const allVariantBoxes = section.querySelectorAll('.variant-box');

			// Only process if we haven't already initialized this product
			if (!window.productData[productId].initialized) {
				// Extract variant information from available boxes
				allVariantBoxes.forEach(box => {
					const boxVariantId = parseInt(box.dataset.variant);
					const boxProductId = box.dataset.product;

					// Skip if not matching our product
					if (boxProductId !== productId) return;

					// Skip if variant already exists
					if (window.productData[productId].variants.some(v => v.id === boxVariantId)) return;

					// Extract bottle quantity for frequency recommendation
					const bottleQuantity = parseInt(box.dataset.bottleQuantity || '1');

					// Create a basic variant structure
					const variantData = {
						id: boxVariantId,
						title: `${bottleQuantity} Bottle${bottleQuantity > 1 ? 's' : ''}`,
						price: parseFloat(box.dataset.price || '0') * 100, // convert to cents
						sku: box.dataset.sku || '',
						selling_plan_allocations: []
					};

					// Check if this is a subscription variant
					if (box.dataset.purchaseType === 'subscribe') {
						// Check if the box has allowed selling plans
						const allowedSellingPlansStr = box.dataset.allowedSellingPlans;

						// Default selling plan from the box
						const defaultSellingPlanId = box.dataset.subscriptionSellingPlanId;

						if (allowedSellingPlansStr && allowedSellingPlansStr.trim()) {
							// Parse allowed selling plan IDs
							const allowedPlans = allowedSellingPlansStr
								.split(',')
								.map(id => id.trim())
								.filter(id => id && !isNaN(parseInt(id)));

							// Add each allowed selling plan to the variant's allocations
							allowedPlans.forEach((planId, index) => {
								// Create descriptive name based on bottle quantity and frequency
								// For allowed plans other than the default, we'll create variations
								const isDefault = planId === defaultSellingPlanId;
								let planName;

								// For the default one, use the bottle quantity as months
								if (isDefault) {
									planName = `${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}`;
								} else {
									// For others, create alternative frequencies
									// This is an estimation - in a real scenario, you'd know the actual frequencies
									const frequencies = [30, 60, 90]; // days
									const frequency = frequencies[index % frequencies.length];
									planName = `${frequency} Days`;
								}

								variantData.selling_plan_allocations.push({
									selling_plan: {
										id: planId,
										name: planName
									},
									price: parseFloat(box.dataset.subscriptionPrice || '0') * 100,
									compare_at_price: parseFloat(box.dataset.originalItemCap || '0') * 100 * bottleQuantity
								});
							});
						} else if (defaultSellingPlanId) {
							// If no allowed plans specified but we have a default one
							variantData.selling_plan_allocations.push({
								selling_plan: {
									id: defaultSellingPlanId,
									name: `${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}`
								},
								price: parseFloat(box.dataset.subscriptionPrice || '0') * 100,
								compare_at_price: parseFloat(box.dataset.originalItemCap || '0') * 100 * bottleQuantity
							});
						}
					}

					// Add to product data
					window.productData[productId].variants.push(variantData);
				});

				// Mark as initialized
				window.productData[productId].initialized = true;
			}

			// Set up frequency options functionality
			setupFrequencyOptions(SID);

			// If CuralifeBoxes is initialized, re-select the variant box to trigger frequency options
			if (window.CuralifeBoxes && window.CuralifeBoxes.instances && window.CuralifeBoxes.instances[SID]) {
				// Trigger selection of the appropriate box
				const boxInstance = window.CuralifeBoxes.instances[SID];
				if (boxInstance.togglePurchaseBox && selectedBox) {
					setTimeout(() => {
						boxInstance.togglePurchaseBox(selectedBox);
					}, 100);
				}
			}
		}

		// Setup frequency options functionality
		function setupFrequencyOptions(SID) {
			const section = getElement(`#cta-section-${SID}`);
			if (!section) return;

			// Add the frequency selection functionality - use event delegation for better performance
			section.addEventListener('click', function(e) {
				const frequencyOption = e.target.closest('#frequency-options-' + SID + ' > div');
				if (frequencyOption) {
					selectFrequencyOption(frequencyOption, SID);
				}
			});

			// Use event delegation for variant boxes too
			section.addEventListener('click', function(e) {
				const variantBox = e.target.closest('.variant-box');
				if (variantBox) {
					// Clear cache to ensure we get fresh elements after variant change
					clearCache();

					// Clear the frequency options first to ensure a fresh start
					const frequencyOptions = getElement('#frequency-options-' + SID, section);
					if (frequencyOptions) frequencyOptions.innerHTML = '';

					// Clear frequency-related data to ensure clean state
					// This is important to prevent data from previous variant affecting new variant
					if (variantBox.dataset.purchaseType === 'subscribe') {
						console.log('Clearing frequency data for variant change');
						// Clear cached frequencies to ensure we extract fresh values for new variant
						memoizedFrequencies = {};
					}

					// Force a slight delay to ensure DOM has time to update
					setTimeout(() => populateFrequencySelector(variantBox, SID), 50);
				}
			});

			// Initial population for selected box
			const selectedBox = section.querySelector('.variant-box.selected') || section.querySelector('.variant-box');
			if (selectedBox) {
				populateFrequencySelector(selectedBox, SID);
			}
		}

		// Function to handle frequency option selection
		function selectFrequencyOption(option, SID) {
			const section = getElement(`#cta-section-${SID}`);
			if (!section) return;

			// Get all options in the container
			const allOptions = option.parentElement.querySelectorAll('div');

			// Update the visual state of all options
			allOptions.forEach(opt => {
				opt.classList.remove('selected');
			});

			option.classList.add('selected');

			// Update the form field and selected box with new selling plan ID
			const sellingPlanId = option.dataset.sellingPlanId;
			const submitSellingPlanId = getElement('.submit-selling-plan-id', section);
			const selectedBox = section.querySelector('.variant-box.selected');

			if (submitSellingPlanId) {
				submitSellingPlanId.value = sellingPlanId;
			}

			if (selectedBox) {
				selectedBox.dataset.subscriptionSellingPlanId = sellingPlanId;
			}

			// Update the frequency description
			updateFrequencyDescription(SID);
		}

		// Function to update the frequency description text
		function updateFrequencyDescription(SID) {
			const section = getElement(`#cta-section-${SID}`);
			if (!section) return;

			const descriptionEl = getElement('.frequency-description', section);
			if (!descriptionEl) return;

			const frequencyOptions = getElement('#frequency-options-' + SID, section);
			if (!frequencyOptions) return;

			const selectedOption = frequencyOptions.querySelector('.selected');
			if (!selectedOption) return;

			const selectedFrequencyValue = parseInt(selectedOption.dataset.frequencyValue || '1', 10);
			const selectedFrequencyUnit = selectedOption.dataset.frequencyUnit || 'month';
			const selectedBox = section.querySelector('.variant-box.selected');
			const bottleQuantity = parseInt(selectedBox?.dataset.bottleQuantity || '1', 10);

			// Only show recommendation text if not matching the recommended frequency
			const description = (selectedFrequencyUnit === 'month' && selectedFrequencyValue === bottleQuantity)
				? '' // No text when on recommended frequency
				: `Recommended - every ${bottleQuantity} month${bottleQuantity > 1 ? 's' : ''}`;

			// Animate the description update only if content changed
			if (descriptionEl.innerHTML !== description) {
				descriptionEl.style.opacity = '0';
				setTimeout(() => {
					descriptionEl.innerHTML = description;
					descriptionEl.style.opacity = '1';
				}, 200);
			}
		}

		// Function to extract frequency value and unit from plan name - memoized for performance
		let memoizedFrequencies = {};

		function extractFrequency(planName) {
			// Check memo cache first
			if (memoizedFrequencies[planName]) {
				return memoizedFrequencies[planName];
			}

			let result;

			// Try matching days pattern first
			let daysMatch = planName.match(/(\d+)\s*Day/i);
			if (daysMatch) {
				result = {
					value: parseInt(daysMatch[1], 10),
					unit: 'day'
				};
			} else {
				// Try matching months pattern
				let monthsMatch = planName.match(/(\d+)\s*Month/i);
				if (monthsMatch) {
					result = {
						value: parseInt(monthsMatch[1], 10),
						unit: 'month'
					};
				} else {
					// Default fallback
					result = { value: 1, unit: 'month' };
				}
			}

			// Log extracted values for debugging
			console.log(`Extracted frequency from "${planName}":`, result);

			// Save to cache
			memoizedFrequencies[planName] = result;
			return result;
		}

		// Function to populate frequency options based on the selected variant
		function populateFrequencySelector(el, SID) {
			try {
				const section = getElement(`#cta-section-${SID}`);
				if (!section) return;

				// Use the data attribute for more specific selection
				const frequencyContainer = getElement('[data-frequency-container]', section);
				if (!frequencyContainer) return;

				const frequencyOptions = getElement('#frequency-options-' + SID, section);
				if (!frequencyOptions) return;

				// Always start with a clean slate
				frequencyOptions.innerHTML = '';

				const variant = el.dataset.originalVariant || el.dataset.variant;
				const isSub = el.dataset.purchaseType === 'subscribe';
				const bottleQuantity = parseInt(el.dataset.bottleQuantity || '1', 10);

				if (!isSub) {
					frequencyContainer.classList.add('hidden');
					return;
				}

				const productId = el.dataset.product;
				const variantId = parseInt(variant);
				const allowedSellingPlansStr = el.dataset.allowedSellingPlans ? el.dataset.allowedSellingPlans.trim() : '';
				const hasAllowedSellingPlans = allowedSellingPlansStr !== '';

				console.log(`Populating frequency selector for variant ${variantId}, bottle quantity: ${bottleQuantity}`);

				// Try to find the variant in product data
				const productData = window.productData?.[productId];
				if (!productData || !productData.variants) {
					handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer, SID);
					return;
				}

				// Find the variant
				let selectedVariant = productData.variants.find(v => v.id === variantId);

				// Try original variant as fallback
				if (!selectedVariant && el.dataset.originalVariant) {
					const originalVariantId = parseInt(el.dataset.originalVariant);
					selectedVariant = productData.variants.find(v => v.id === originalVariantId);
				}

				if (!selectedVariant || !selectedVariant.selling_plan_allocations?.length) {
					handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer, SID);
					return;
				}

				// If we have allowed selling plans, filter to only use those
				let sellingPlanAllocations = [...selectedVariant.selling_plan_allocations];

				// Sort and filter based on allowed selling plans
				if (hasAllowedSellingPlans) {
					const allowedPlans = allowedSellingPlansStr
						.split(',')
						.map(id => id.trim())
						.filter(id => id && !isNaN(parseInt(id)));

					// Only keep the selling plans that are in the allowed list
					sellingPlanAllocations = sellingPlanAllocations.filter(allocation =>
						allowedPlans.includes(allocation.selling_plan.id.toString()));

					// For allowed plans, we need to preserve their original order as specified
					if (allowedPlans.length > 0) {
						// Sort based on the order in the allowedPlans array
						sellingPlanAllocations.sort((a, b) => {
							const indexA = allowedPlans.indexOf(a.selling_plan.id.toString());
							const indexB = allowedPlans.indexOf(b.selling_plan.id.toString());
							return indexA - indexB;
						});
					}
				} else {
					// Default sorting for non-allowed plans
					// Helper function to get days from frequency for sorting
					const getAllocationDays = (allocation) => {
						if (!allocation?.selling_plan?.name) return 30; // default
						const { value, unit } = extractFrequency(allocation.selling_plan.name);
						return unit === 'day' ? value : value * 30; // approximate month as 30 days
					};

					// Sort allocations by frequency in days (ascending)
					sellingPlanAllocations.sort((a, b) => getAllocationDays(a) - getAllocationDays(b));
				}

				// Find selling plan that matches the bottle quantity (recommended frequency) - only if no allowed plans
				let recommendedSellingPlanId = '';

				if (!hasAllowedSellingPlans) {
					for (const allocation of selectedVariant.selling_plan_allocations) {
						if (!allocation?.selling_plan?.name) continue;

						const { value, unit } = extractFrequency(allocation.selling_plan.name);
						// If unit is months and matches bottle quantity
						if (unit === 'month' && value === bottleQuantity) {
							recommendedSellingPlanId = allocation.selling_plan.id.toString();
							break;
						}
					}

					// If we found a recommended selling plan and no current one is set, set it
					if (recommendedSellingPlanId && !el.dataset.subscriptionSellingPlanId) {
						el.dataset.subscriptionSellingPlanId = recommendedSellingPlanId;
					}
				}

				// If no allocations to show after filtering, fallback
				if (sellingPlanAllocations.length === 0) {
					handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer, SID);
					return;
				}

				// Build frequency options
				const currentSellingPlanId = el.dataset.subscriptionSellingPlanId;
				const fragment = document.createDocumentFragment();

				// Pre-compute some values for display text formatting
				const useDaysFormat = bottleQuantity <= 1;
				const useMonthsFormat = bottleQuantity >= 3;

				sellingPlanAllocations.forEach(allocation => {
					if (!allocation?.selling_plan?.name) return;

					const plan = allocation.selling_plan;

					// Create option element
					const frequencyBox = document.createElement('div');
					frequencyBox.className = 'frequency-option variant-tab-style rounded-md cursor-pointer p-2 min-w-[90px] text-center transition-all duration-300 ease-in-out';

					// Extract frequency value and unit
					const { value, unit } = extractFrequency(plan.name);

					// Set data attributes
					frequencyBox.dataset.sellingPlanId = plan.id;
					frequencyBox.dataset.frequencyValue = value;
					frequencyBox.dataset.frequencyUnit = unit;

					console.log(`Creating frequency option with value: ${value}, unit: ${unit}, plan: ${plan.name}`);

					// Determine if this option should be selected
					const shouldSelect =
						(plan.id?.toString() === currentSellingPlanId) ||
						(!currentSellingPlanId && !hasAllowedSellingPlans && unit === 'month' && value === bottleQuantity);

					// Apply selected class if needed
					if (shouldSelect) {
						frequencyBox.classList.add('selected');

						// Update selling plan ID if this is the recommended option
						if (!currentSellingPlanId && !hasAllowedSellingPlans && unit === 'month' && value === bottleQuantity) {
							el.dataset.subscriptionSellingPlanId = plan.id.toString();
							const submitSellingPlanId = getElement('.submit-selling-plan-id', section);
							if (submitSellingPlanId) {
								submitSellingPlanId.value = plan.id.toString();
							}
						}
					}

					// Format display text based on bottle quantity
					let displayText = '';

					if (useDaysFormat) {
						// For 1-bottle variants, convert to days format
						if (unit === 'month') {
							const days = Math.round(value * 30);
							displayText = `Every ${days} Days`;
						} else {
							displayText = value === 1 ? 'Every Day' : `Every ${value} Days`;
						}
					} else if (useMonthsFormat) {
						// For 3+ bottle variants, convert to months format when possible
						if (unit === 'day') {
							const months = value / 30;
							if (Math.abs(months - Math.round(months)) < 0.1) { // within 10% of a whole number
								displayText = months === 1 ? 'Every Month' : `Every ${Math.round(months)} Months`;
							} else {
								displayText = `Every ${value} Days`;
							}
						} else {
							displayText = value === 1 ? 'Every Month' : `Every ${value} Months`;
						}
					} else {
						// For other bottle quantities, use the original format
						displayText = unit === 'day'
							? (value === 1 ? 'Every Day' : `Every ${value} Days`)
							: (value === 1 ? 'Every Month' : `Every ${value} Months`);
					}

					frequencyBox.innerHTML = `<span class="font-semibold">${displayText}</span>`;
					fragment.appendChild(frequencyBox);
				});

				// If no option is selected and we have options, select the first one
				if (fragment.children.length > 0 && !fragment.querySelector('.selected')) {
					const firstOption = fragment.children[0];
					firstOption.classList.add('selected');

					// Update the selected selling plan
					el.dataset.subscriptionSellingPlanId = firstOption.dataset.sellingPlanId;
					const submitSellingPlanId = getElement('.submit-selling-plan-id', section);
					if (submitSellingPlanId) {
						submitSellingPlanId.value = firstOption.dataset.sellingPlanId;
					}
				}

				frequencyOptions.appendChild(fragment);
				frequencyContainer.classList.remove('hidden');

				// Update the description
				updateFrequencyDescription(SID);
			} catch (error) {
				console.error('Error in populateFrequencySelector:', error);
				handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer, SID);
			}
		}

		// Helper function for fallback frequency option handling
		function handleFallbackFrequencyOptions(el, frequencyOptions, frequencyContainer, SID) {
			if (!frequencyOptions || !frequencyContainer) return;

			if (el.dataset.purchaseType === 'subscribe') {
				const bottleQuantity = parseInt(el.dataset.bottleQuantity || '1', 10);
				const currentSellingPlanId = el.dataset.subscriptionSellingPlanId;

				if (currentSellingPlanId) {
					frequencyOptions.innerHTML = '';
					const fallbackBox = document.createElement('div');
					fallbackBox.className = 'frequency-option variant-tab-style selected rounded-md cursor-pointer p-2 min-w-[90px] text-center transition-all duration-300 ease-in-out';
					fallbackBox.dataset.sellingPlanId = currentSellingPlanId;
					fallbackBox.dataset.frequencyValue = bottleQuantity.toString();
					fallbackBox.dataset.frequencyUnit = 'month'; // Default to months

					// Format text based on bottle quantity
					const displayText = bottleQuantity <= 1
						? `Every 30 Days`
						: `Every ${bottleQuantity} Month${bottleQuantity > 1 ? 's' : ''}`;

					fallbackBox.innerHTML = `<span class="font-semibold">${displayText}</span>`;

					frequencyOptions.appendChild(fallbackBox);
					frequencyContainer.classList.remove('hidden');

					// Update description
					setTimeout(() => updateFrequencyDescription(SID), 100);
				} else {
					frequencyContainer.classList.add('hidden');
				}
			} else {
				frequencyContainer.classList.add('hidden');
			}
		}
	});
</script>