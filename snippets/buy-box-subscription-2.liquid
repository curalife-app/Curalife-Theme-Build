{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}
	{% endcase %}
{% endfor %}

<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}">
	<div class="purchase-options flex flex-col gap-2">
		<div class="font-semibold text-[18px]">{{ variantsTitle }}</div>

		{% if variantsNotice != blank %}
			<div class="notice flex text-[--primary] mb-2 gap-2" style="font-size:15px">
				<span>ⓘ</span>
				<span>{{ variantsNotice }}</span>
			</div>
		{% endif %}

		<div class="variant-boxes flex justify-around gap-2 mb-2">
			{% for block in blocks %}
				{% assign varPurchaseType = block.settings.purchase_type %}
				{% if block.type == 'variant' and varPurchaseType == 'subscribe' %}
					{% assign referenced_variant = blank %}
					{% assign blockVarID = block.settings.variant_id | plus: 0 %}
					{% for vari in referenced_variant_product.variants %}
						{% assign currVarID = vari.id | plus: 0 %}
						{% if currVarID == blockVarID %}
							{% assign referenced_variant = vari %}
						{% endif %}
					{% endfor %}

					{% assign var = referenced_variant %}

					{% comment %} Core Variable Assignments {% endcomment %}
					{% assign variant_id = var.metafields.custom.reference_variant_id | default: var.id %}
					{% assign bottle_quantity = var.metafields.my_fields.pack_bottles_quantity %}

					{% comment %} Price Calculations {% endcomment %}
					{% assign original_item_price = var.metafields.custom.original_item.value.price %}
					{% assign original_item_cap = var.metafields.custom.original_item.value.compare_at_price | default: original_item_price %}
					{% assign original_item_cap_total = original_item_cap | times: bottle_quantity %}
					{% assign item_price = var.price | divided_by: bottle_quantity %}

					{% comment %} Savings Calculations {% endcomment %}
					{% assign subscription_save_money = original_item_cap | minus: subscription_item_price %}
					{% assign buy_once_save_money = original_item_cap | minus: item_price %}

					{% comment %} Selling Plan ID Logic {% endcomment %}
					{% if var.metafields.custom.referenced_variant_product_handle %}
						{% assign selling_plan_id = referenced_variant.metafields.subscription.selling_plan_id | default: variant.metafields.subscription.selling_plan_id %}
					{% elsif var.metafields.subscription.selling_plan_id %}
						{% assign selling_plan_id = var.metafields.subscription.selling_plan_id %}
					{% elsif var.selling_plan_allocations.size > 0 %}
						{% assign found_plan = false %}
						{% for allocation in var.selling_plan_allocations %}
							{% if allocation.selling_plan.name contains bottle_quantity %}
								{% assign selling_plan_id = allocation.selling_plan.id %}
								{% assign found_plan = true %}
								{% break %}
							{% endif %}
						{% endfor %}
						{% if found_plan == false %}
							{% assign selling_plan_id = var.selling_plan_allocations.first.selling_plan.id %}
						{% endif %}
					{% endif %}

					{% assign subscription_save_percents = 0 %}
					{% assign subscription_item_price = original_item_cap %}

					{% for allocation in var.selling_plan_allocations %}
						{% assign selling = selling_plan_id | minus: 0 %}
						{% if allocation.selling_plan.id == selling %}
							{% if allocation.compare_at_price %}
								{% assign original_price = allocation.compare_at_price %}
								{% assign discounted_price = allocation.price %}
								{% assign subscription_save_percents = original_price | minus: discounted_price | times: 100 | divided_by: original_price %}
								{% assign mod_5_remainder = subscription_save_percents | modulo: 5 %}
								{% if mod_5_remainder < 3 %}
									{% assign subscription_save_percents = subscription_save_percents | minus: mod_5_remainder %}
								{% else %}
									{% assign subscription_save_percents = subscription_save_percents | plus: 5 | minus: mod_5_remainder %}
								{% endif %}
								{% assign subscription_item_price = discounted_price | divided_by: bottle_quantity %}
							{% else %}
								{% assign subscription_save_percents = 0 %}
								{% assign subscription_item_price = allocation.price | divided_by: bottle_quantity %}
							{% endif %}
						{% endif %}
					{% endfor %}

					{% assign subscription_total_price = subscription_item_price | times: bottle_quantity %}

					<div
						id="variant-box-{{ SID }}-{{ forloop.index }}"
						class="variant-box flex flex-col items-center variant-tab-style text-center w-full {% if forloop.index == 1 %}selected{% endif %} {{ varPurchaseType }}"
						data-variant="{{ block.settings.variant_id }}"
						data-product="{{ prod.id }}"
						data-original-variant="{{ var.id }}"
						data-subscription-selling-plan-id="{{ selling_plan_id }}"
						data-price="{{ var.price | money_without_currency | replace: ".00", "" }}"
						data-sku="{{ var.sku }}"
						data-index="{{ forloop.index }}"
						data-item-price="{{ item_price }}"
						data-subscription-price="{{ subscription_total_price }}"
						data-subscription-item-price="{{ subscription_item_price }}"
						data-original-item-cap="{{ original_item_cap }}"
						data-dc="{{ var.metafields.custom.discount_code | base64_encode }}"
						data-buy-once-discount="{{ var.metafields.custom.save_percents }}"
						data-subscription-discount="{{ subscription_save_percents }}"
						data-price-per="{{ pricePer }}"
						data-bottle-quantity="{{ bottle_quantity }}"
						data-purchase-type="{{ varPurchaseType }}"
						data-buy-type="{{ buyType }}"
						name="track:variant-box|variant-sku:{{ var.sku }}|purchase-type:{{ varPurchaseType }}">
						{% if subscription_save_percents > 0 %}
							<div class="discount mbl:text-[3.5vw] text-white bg-[--primary-color] font-bold w-full text-[13px] p-1">{{ subscription_save_percents }}% OFF</div>
						{% endif %}

						<!-- prettier-ignore -->
						<div class="title p-1">
							<span class="font-bold mbl:text-[4vw]">{{ bottle_quantity }} Bottle{% if bottle_quantity > 1 %}s{% endif %}</span>
							<span class="block text-[15px] mbl:text-[3vw]">every {{ bottle_quantity }} month{% if bottle_quantity > 1 %}s{% endif %}</span>
						</div>
					</div>
				{% endif %}
			{% endfor %}
		</div>

		<div class="price-display" style="margin-bottom: 1.5rem">
			<div class="gap-y-2 flex flex-wrap items-end gap-2">
				<div class="final-price flex items-center gap-2">
					<div class="main-price text-[--primary]">
						{% if priceFormat == 'total' %}
							<span class="font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_total_price | money }}</span>
							<span class="self-end text-gray-500 line-through">{{ original_item_cap_total | money }}</span>
						{% else %}
							<span class="font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_item_price | money }}</span>
							<span class="month-text mt-1 text-[20px]">/bottle</span>
							<span class="self-end text-gray-500 line-through">{{ original_item_cap | money }}</span>
						{% endif %}
					</div>
					<span class="discount-badge px-4 py-1 text-[16px] font-bold text-white bg-[--bronze] rounded-full">SAVE {{ subscription_save_money | money }}</span>
				</div>
			</div>

			{% if priceFormat == 'per_bottle' and subscription_total_price != subscription_item_price %}
				<div class="total-line mt-2 text-[16px]">
					Total of {{ subscription_total_price | money }}
					<span class="text-gray-500 line-through">{{ original_item_cap_total | money }}</span>
				</div>
			{% endif %}
		</div>
	</div>

	{% if giftsAmount > 0 %}
		<div class="gift-selector-wrap mb-2">
			<p class="gift-selector-title text-[18px] text-[--bronze] font-medium mb-4">Choose your free gift</p>

			<div class="gift-options flex flex-col gap-2">
				{% for block in blocks %}
					{% case block.type %}
						{% when 'gift' %}
							{% assign show_gift = false %}
							{% if block.settings.show_on == 'both' %}
								{% assign show_gift = true %}
							{% elsif block.settings.show_on == 'global' and isGlobal %}
								{% assign show_gift = true %}
							{% elsif block.settings.show_on == 'us' and isGlobal == false %}
								{% assign show_gift = true %}
							{% endif %}

							{% if show_gift %}
								{% assign giftProd = block.settings.gift_product %}
								{% assign giftVariant = giftProd.selected_or_first_available_variant %}
								{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
								{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
								{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

								<div class="gift-box clickable block" name="track:gift|variant-sku:{{ giftVariant.sku }}">
									<div
										class="gift-option-border p-2 rounded-lg"
										data-gift-id="{{ giftVariant.id }}"
										data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
										<div class="flex items-center self-end gap-2 ml-auto" style="width:93%">
											<div class="gift-image-container flex-shrink-0">
												<img
													src="{{ giftThumb | image_url: width: 160, height: 160 }}"
													alt="{{ giftProd.title }}"
													class="object-contain w-full h-full">
											</div>

											<div class="gift-content flex-grow">
												<div class="flex items-center gap-2 mb-1">
													<div class="gift-name text-[16px] font-bold">{{ giftProd.title | replace: 'Free ', '' }} - FREE</div>
													<span class="text-gray-600 line-through">${{ giftVariantSubscription.compare_at_price | money_without_currency }}</span>
												</div>
												<div class="text-gray-600" style="font-size: 14px">{{ block.settings.variant_description | default: giftProd.metafields.custom.short_description }}</div>
											</div>

											<div class="check-indicator w-8 h-8 rounded-full border-2 border-[--primary-color] flex items-center justify-center">
												<svg class="check-mark w-5 h-5 text-[--primary-color]" viewBox="0 0 20 20" fill="currentColor">
													<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
												</svg>
											</div>
										</div>
									</div>
								</div>
							{% endif %}
					{% endcase %}
				{% endfor %}
			</div>
		</div>
	{% endif %}

	<div class="submit-wrap flex flex-col w-full">
		<div class="checkout-button">
			{% assign buttonSID = SID | append: '-checkout' %}
			{% if buyType == 'buy_now' %}{% assign ctaButtonTitle = 'Get Started' %}{% else %}{% assign ctaButtonTitle = 'Add To Cart' %}{% endif %}

			{% render 'buy-buttons-new-4',
				SID: buttonSID,
				product: prod,
				variant: '',
				buttonText: ctaButtonTitle,
				selling_plan_id: selling_plan_id,
				product_form_id: product_form_id,
				buyType: buyType,
				isBuyWithPrime: isBuyWithPrime,
				buyboxType: buyboxType,
				buyboxName: buyboxName
			%}
		</div>

		<div class="one-time-purchase-link mt-3 text-center">
			{% if isOneTimePurchaseLink %}
				{% assign firstVariant = prod.selected_or_first_available_variant %}
				<div
					id="one-time-add-to-cart"
					class="one-time-add-to-cart variant-box mb-2 text-[--primary-color] underline cursor-pointer"
					name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
					data-variant-id="{{ firstVariant.id }}"
					data-bottle-quantity="1"
					data-purchase-type="buyonce">
					Buy Once for {{ firstVariant.price | money }} + Shipping $10
				</div>
			{% endif %}
		</div>
	</div>
</div>

<style>
	.buy-box {
		grid-template-columns: 45% 40% !important;
		grid-column-gap: 5% !important;
		justify-content: center;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// ----- DOM Caching -----
		const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
		if (!productActions) return;

		const purchaseOptionBoxes    = productActions.querySelectorAll('.variant-box');
		const submitButton           = productActions.querySelector('.checkout-button button');
		const submitSellingPlanId    = productActions.querySelector('.submit-selling-plan-id');
		const submitVariantId        = productActions.querySelector('.submit-variant-id');
		const giftOptionContainers   = productActions.querySelectorAll('.gift-box');

		// ----- Liquid Template Data -----
		const SID         = '{{ SID }}';
		const buyType     = '{{ buyType }}';
		const priceFormat = '{{ priceFormat }}';

		// State management
		const state = {
			selectedBox  : null,
			isInitialLoad: true
		};

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//         UTILITIES
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Show a floating notification message.
		 * @param {string} message - The text to display.
		 * @param {'error'|'success'} [type='error'] - The style of the notification.
		 */
		function showNotification(message, type = 'error') {
			const notification = document.createElement('div');
			notification.className = `
				cart-notification ${type}
				fixed bottom-4 left-1/2 transform -translate-x-1/2
				p-4 rounded-lg shadow-lg z-[2147483640]
				transition-opacity duration-300
			`.replace(/\s+/g, ' ');

			if (type === 'error') {
				notification.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
			} else if (type === 'success') {
				notification.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
			}

			notification.innerHTML = `
				<div class="flex items-center">
					<div class="mr-3">${type === 'error' ? '⚠️' : '✅'}</div>
					<div class="text-sm font-medium">${message}</div>
					<button
						class="hover:text-gray-500 ml-auto text-gray-400"
						onclick="this.parentElement.parentElement.remove()"
					>
						✕
					</button>
				</div>
			`;

			document.body.appendChild(notification);

			setTimeout(() => {
				notification.classList.add('opacity-0');
				setTimeout(() => notification.remove(), 300);
			}, 5000);
		}

		/**
		 * Fetch the current cart object from Shopify (via /cart.js).
		 * @throws {Error} if the request fails
		 * @returns {Promise<Object>} The current cart object.
		 */
		async function getCart() {
			const response = await fetch('/cart.js');
			if (!response.ok) {
				throw new Error('Failed to fetch current cart');
			}
			return response.json();
		}

		/**
		 * Removes an item from the cart by key.
		 * @param {string} itemKey - Shopify's line item key.
		 */
		async function removeCartItem(itemKey) {
			await fetch('/cart/update.js', {
				method : 'POST',
				headers: { 'Content-Type': 'application/json' },
				body   : JSON.stringify({
					updates: { [itemKey]: 0 }
				})
			});
		}

		/**
		 * Clears the entire cart.
		 */
		async function clearCart() {
			await fetch('/cart/clear.js', { method: 'POST' });
		}

		/**
		 * Add an array of items to the cart.
		 * Handles removing existing subscription items if needed.
		 * @param {Array} items - Array of cart line items in Shopify's format.
		 * @returns {Promise<{ success: boolean, addedItems: Array }>}
		 */
		async function addValidItemsToCart(items) {
			try {
				let cartData = await getCart();

				// Identify if there's a subscription item among the items to add
				const subscriptionItem = items.find(item => item.selling_plan);
				if (subscriptionItem) {
					const selectedBox = document.querySelector('.variant-box.selected');
					const productId   = selectedBox?.dataset?.product;

					if (productId) {
						// Find the existing subscription in cart for the same product
						const existingSub = cartData.items.find(cartItem => {
							return (
								cartItem.product_id === parseInt(productId, 10) &&
								Boolean(cartItem.selling_plan_allocation)
							);
						});

						// If found, remove it from the cart before adding the new one
						if (existingSub) {
							await removeCartItem(existingSub.key);
							cartData = await getCart(); // Refresh cart after removal
						}
					}
				}

				// Add new items
				const addResponse = await fetch('/cart/add.js', {
					method : 'POST',
					headers: { 'Content-Type': 'application/json' },
					body   : JSON.stringify({ items })
				});

				if (!addResponse.ok) {
					throw new Error('Failed to add items to cart');
				}

				// Notify success
				if (subscriptionItem && items.includes(subscriptionItem)) {
					showNotification('Subscription has been updated in your cart', 'success');
				} else {
					showNotification('Items added to cart successfully', 'success');
				}

				return { success: true, addedItems: items };
			} catch (error) {
				console.error('Error in addValidItemsToCart:', error);
				showNotification('An error occurred while adding items to cart. Please try again.');
				return { success: false, addedItems: [] };
			}
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//       GIFT LOGIC
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Visually selects a gift container (highlight, checkmark, etc.)
		 * @param {HTMLElement} selectedContainer
		 */
		function updateGiftSelection(selectedContainer) {
			giftOptionContainers.forEach(container => {
				const checkMark  = container.querySelector('.check-mark');
				const isSelected = container === selectedContainer;

				container.classList.toggle('selected', isSelected);
				if (checkMark) {
					checkMark.style.display = 'block';
					checkMark.style.opacity = isSelected ? '1' : '0';
				}
			});
		}

		/**
		 * Initialize the default gift and set click handlers on gifts.
		 */
		function initializeGiftSelection() {
			// Select the first gift by default, if available
			if (giftOptionContainers.length > 0) {
				updateGiftSelection(giftOptionContainers[0]);
			}

			// Attach event listeners to all gift boxes
			giftOptionContainers.forEach(container => {
				container.addEventListener('click', () => updateGiftSelection(container));
			});
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//     PRICE UPDATES
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Update UI price elements to reflect the newly selected variant box (subscription or one-time).
		 * @param {HTMLElement} element - The newly selected variant box.
		 */
		function updatePriceDisplay(element) {
			const priceDisplays = document.querySelectorAll('.price-display');

			const subscriptionItemPrice = parseFloat(element.dataset.subscriptionItemPrice) / 100 || 0;
			const subscriptionPrice     = parseFloat(element.dataset.subscriptionPrice)     / 100 || 0;
			const originalItemCap       = parseFloat(element.dataset.originalItemCap)       / 100 || 0;
			const bottleQuantity        = parseInt(element.dataset.bottleQuantity, 10)      || 1;

			const totalOriginalPrice = originalItemCap * bottleQuantity;
			const savingsAmount =
				priceFormat === 'total'
					? totalOriginalPrice - subscriptionPrice
					: (originalItemCap - subscriptionItemPrice) * bottleQuantity;

			priceDisplays.forEach(display => {
				const mainPriceContainer = display.querySelector('.main-price');
				const discountBadge      = display.querySelector('.discount-badge');
				const totalLine          = display.querySelector('.total-line');

				const newMainPrice    = `$${(priceFormat === 'total' ? subscriptionPrice : subscriptionItemPrice).toFixed(2)}`;
				const newComparePrice = `$${(priceFormat === 'total' ? totalOriginalPrice  : originalItemCap).toFixed(2)}`;
				const flooredSavings = Math.floor(savingsAmount);
				const newSavings = `SAVE $${flooredSavings}`;

				const animate = () => {
					// Step 1: Fade out elements simultaneously
					[mainPriceContainer, discountBadge, totalLine].forEach(el => {
						if (el) {
							el.style.transition = 'opacity 200ms ease-out';
							el.style.opacity    = '0';
						}
					});

					// Step 2: Update content after fade-out
					setTimeout(() => {
						if (mainPriceContainer) {
							const priceSpan   = mainPriceContainer.querySelector('.font-bold');
							const compareSpan = mainPriceContainer.querySelector('.text-gray-500.line-through');
							if (priceSpan)   priceSpan.textContent   = newMainPrice;
							if (compareSpan) compareSpan.textContent = newComparePrice;
						}
						if (discountBadge) {
							discountBadge.textContent = newSavings;
						}
						if (totalLine && priceFormat === 'per_bottle' && subscriptionPrice > subscriptionItemPrice) {
							totalLine.innerHTML = `
								Total of $${subscriptionPrice.toFixed(2)}
								<span class="text-gray-500 line-through">
									$${(originalItemCap * bottleQuantity).toFixed(2)}
								</span>
							`;
						}

						// Step 3: Fade elements back in with a stagger
						setTimeout(() => {
							if (mainPriceContainer) mainPriceContainer.style.opacity = '1';
							setTimeout(() => {
								if (discountBadge) discountBadge.style.opacity = '1';
							}, 50);
							setTimeout(() => {
								if (totalLine) totalLine.style.opacity = '1';
							}, 100);
						}, 50);
					}, 200);
				};

				// Skip fade on first load
				if (state.isInitialLoad) {
					animate();
					state.isInitialLoad = false;
				} else {
					requestAnimationFrame(animate);
				}
			});
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//   IMAGE SLIDER UPDATES
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Move the slider to the selected variant's slide, if one exists.
		 * @param {Object}  slider          - The slider instance.
		 * @param {string}  targetVariantId - The ID of the variant.
		 */
		function performSlideUpdate(slider, targetVariantId) {
			try {
				if (!slider || !targetVariantId) return;
				const slideIndex = Array.from(slider.slides).findIndex(
					slide => slide.dataset.variantId === targetVariantId
				);

				if (slideIndex !== -1) {
					slider.update();
					requestAnimationFrame(() => {
						slider.slideTo(slideIndex, 300);
						setTimeout(() => slider.update(), 350);
					});
				}
			} catch (error) {
				console.error('Error during slide update:', error);
			}
		}

		/**
		 * Update the variant image by jumping to the correct slide (if the slider is ready).
		 * @param {HTMLElement} element - The newly selected variant box.
		 */
		function updateVariantImage(element) {
			const targetVariantId = element.dataset.variant;
			if (!targetVariantId) return;

			const sliderId = `productSliderAllInOne${SID}`;
			let slider     = window[sliderId];

			// If slider is not yet ready, poll until it's available or time out.
			if (!slider?.slides?.length) {
				return new Promise(resolve => {
					const checkSlider = setInterval(() => {
						slider = window[sliderId];
						if (slider?.slides?.length > 0) {
							clearInterval(checkSlider);
							performSlideUpdate(slider, targetVariantId);
							resolve();
						}
					}, 100);

					setTimeout(() => {
						clearInterval(checkSlider);
						resolve();
					}, 5000);
				});
			}

			performSlideUpdate(slider, targetVariantId);
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//  VARIANT BOX SELECTION
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Update tracking analytics name for the checkout button.
		 * @param {HTMLElement} element - The newly selected variant box.
		 */
		function updateBuyButtonName(element) {
			if (!submitButton) return;

			const sku           = element.dataset.sku;
			const purchaseType  = element.dataset.purchaseType;
			const currentName   = submitButton.getAttribute('name') || '';
			const parts         = currentName.split('|');
			const params        = {};

			// Convert param string into object
			parts.slice(1).forEach(param => {
				const [key, value] = param.split(':');
				if (key) params[key] = value;
			});

			// Update or add relevant params
			params['variant-sku']   = sku;
			params['purchase-type'] = purchaseType;

			// Rebuild name attribute
			const newName = `track:add|${Object.entries(params)
				.map(([key, value]) => `${key}:${value}`)
				.join('|')}`;

			submitButton.setAttribute('name', newName);
		}

		/**
		 * Toggle which purchase box is selected (one-time or subscription).
		 * @param {HTMLElement} element - The newly selected variant box.
		 */
		function togglePurchaseBox(element) {
			if (!element) return;

			// Deselect all first
			purchaseOptionBoxes.forEach(box => {
				box.classList.remove('selected');
				const radio = box.querySelector('input[type="radio"]');
				if (radio) radio.checked = false;
			});

			// Determine if it's subscription
			const isSubscription      = element.dataset.purchaseType === 'subscribe';
			const subscriptionPlanID  = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
			const variantID           = element.dataset.variant;

			// Update hidden inputs
			if (submitSellingPlanId) {
				submitSellingPlanId.value = subscriptionPlanID;
			}
			if (submitVariantId) {
				submitVariantId.value = variantID;
			}

			// Select current box
			element.classList.add('selected');
			const radioInput = element.querySelector('input[type="radio"]');
			if (radioInput) radioInput.checked = true;

			updateBuyButtonName(element);
			state.selectedBox = element;
			updatePriceDisplay(element);

			{% if isSlideVariant %}
				// Only update variant image after the first selection
				if (window.hasInitialImageUpdateHappened) {
					updateVariantImage(element);
				} else {
					window.hasInitialImageUpdateHappened = true;
				}
			{% endif %}
		}

		/**
		 * Initialize the default purchase option and set click handlers.
		 */
		function initializePurchaseOptions() {
			// Determine which box to select by default
			const defaultIndex = parseInt(productActions.dataset.defaultVariantIndex, 10) || 0;
			const defaultBox   = purchaseOptionBoxes[defaultIndex - 1] || purchaseOptionBoxes[0];

			if (defaultBox) {
				togglePurchaseBox(defaultBox);
				updateBuyButtonName(defaultBox);
			}

			// Listen for clicks on any radio or box container
			productActions.addEventListener('click', event => {
				const radioInput         = event.target.closest('input[type="radio"]');
				const clickedVariantBox  = event.target.closest('.variant-boxes .variant-box');

				if (radioInput) {
					event.preventDefault();
					const parentBox = radioInput.closest('.variant-box');
					if (parentBox) togglePurchaseBox(parentBox);
				} else if (clickedVariantBox) {
					event.preventDefault();
					togglePurchaseBox(clickedVariantBox);
				}
			});
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//     BUTTON HANDLERS
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Initialize the main "Add to Cart / Checkout" button for subscription or multi-step flow.
		 */
		function initializeSubmitButton() {
			if (!submitButton) return;

			submitButton.addEventListener('click', async event => {
				event.preventDefault();

				const selectedBox         = productActions.querySelector('.variant-box.selected');
				const selectedGiftContainer = document.querySelector('.gift-box.selected');
				if (!selectedBox) {
					showNotification('Please select a purchase option');
					return;
				}
				if (!selectedGiftContainer?.querySelector('.gift-option-border')) {
					showNotification('Please select a gift option');
					return;
				}

				// Disable the button to prevent multi-clicks
				submitButton.disabled = true;

				try {
					const isSubscription = selectedBox.dataset.purchaseType === 'subscribe';
					const variantId      = selectedBox.dataset.variant;
					const giftId         = isSubscription
						? selectedGiftContainer.querySelector('.gift-option-border')?.dataset.giftIdSubscription
						: selectedGiftContainer.querySelector('.gift-option-border')?.dataset.giftId;

					if (!variantId || !giftId) {
						throw new Error('Invalid product or gift selection');
					}

					const items = [
						{
							id          : variantId,
							quantity    : 1,
							selling_plan: isSubscription ? selectedBox.dataset.subscriptionSellingPlanId : undefined
						},
						{
							id       : giftId,
							quantity : 1
						}
					];

					if (buyType === 'buy_now') {
						await handleBuyNowFlow(items);
					} else {
						await addValidItemsToCart(items);
					}
				} catch (error) {
					console.error('Error:', error);
					showNotification(error.message || 'Failed to add items to cart');
				} finally {
					// Re-enable the button
					submitButton.disabled = false;
				}
			});
		}

		/**
		 * Clears the cart, adds items, and redirects to checkout.
		 * @param {Array} items - The items to add to cart.
		 */
		async function handleBuyNowFlow(items) {
			const cartPopup = document.getElementById('upCart');
			if (cartPopup) cartPopup.remove();

			await clearCart();

			const addResponse = await fetch('/cart/add.js', {
				method : 'POST',
				headers: { 'Content-Type': 'application/json' },
				body   : JSON.stringify({ items })
			});

			if (!addResponse.ok) {
				throw new Error('Failed to add items to cart');
			}
			window.location.href = '/checkout';
		}

		/**
		 * Initialize the "One-time Purchase" shortcut button if it exists.
		 */
		function initializeOneTimePurchaseButton() {
			const oneTimeButton = productActions.querySelector('.one-time-add-to-cart');
			if (!oneTimeButton) return;

			oneTimeButton.addEventListener('click', async event => {
				event.preventDefault();

				oneTimeButton.disabled = true;
				const originalText     = oneTimeButton.textContent;
				oneTimeButton.textContent = 'Adding...';

				try {
					const selectedGiftContainer = document.querySelector('.gift-box.selected');
					const giftBorder            = selectedGiftContainer?.querySelector('.gift-option-border');
					const giftId                = giftBorder?.dataset.giftId;
					const firstVariantID        = oneTimeButton.dataset.variantId;

					if (buyType === 'buy_now') {
						const cartPopup = document.getElementById('upCart');
						if (cartPopup) cartPopup.remove();

						await clearCart();

						const itemsToAdd = [
							{ id: firstVariantID, quantity: 1 }
						];

						{% if isOneTimeGift %}
							if (giftId) {
								itemsToAdd.push({ id: parseInt(giftId, 10), quantity: 1 });
							}
						{% endif %}

						const addResponse = await fetch('/cart/add.js', {
							method : 'POST',
							headers: { 'Content-Type': 'application/json' },
							body   : JSON.stringify({ items: itemsToAdd })
						});
						if (!addResponse.ok) {
							throw new Error('Failed to add items to cart');
						}

						window.location.href = '/checkout';
					} else {
						// Standard add-to-cart flow
						const itemsToAdd = [
							{ id: firstVariantID, quantity: 1 }
						];

						{% if isOneTimeGift %}
							if (giftId) {
								itemsToAdd.push({ id: parseInt(giftId, 10), quantity: 1 });
							}
						{% endif %}

						const response = await fetch('/cart/add.js', {
							method : 'POST',
							headers: { 'Content-Type': 'application/json' },
							body   : JSON.stringify({ items: itemsToAdd })
						});
						if (!response.ok) {
							throw new Error('Failed to add items to cart');
						}

						if (typeof window.updateCart === 'function') {
							window.updateCart();
						}

						oneTimeButton.textContent = 'Added!';
						setTimeout(() => {
							oneTimeButton.textContent = originalText;
							oneTimeButton.disabled    = false;
						}, 2000);
					}
				} catch (error) {
					console.error('Error:', error);
					oneTimeButton.textContent = 'Error occurred';
					setTimeout(() => {
						oneTimeButton.textContent = originalText;
						oneTimeButton.disabled    = false;
					}, 2000);
				}
			});
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//     MISC DISPLAY
		// ~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * If the price display is set to 'total', hide the monthly text.
		 */
		function hideMonthTextIfNeeded() {
			document.querySelectorAll('.price-display').forEach(display => {
				const monthText = display.querySelector('.month-text');
				if (monthText && priceFormat === 'total') {
					monthText.style.display = 'none';
				}
			});
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~
		//       INIT FLOW
		// ~~~~~~~~~~~~~~~~~~~~~~~

		function init() {
			initializeGiftSelection();
			initializePurchaseOptions();
			initializeSubmitButton();
			initializeOneTimePurchaseButton();
			hideMonthTextIfNeeded();
		}

		// Execute everything
		init();
	});
</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ctasection = document.querySelector('#cta-section-{{ SID }}');
		if (!ctasection) return;

		const productActions = ctasection.querySelector('.product-actions');
		const giftSelectorWrap = productActions ? productActions.querySelector('.gift-selector-wrap') : null;
		const ctaText = ctasection.querySelector('.cta-text');
		const purchaseOptions = productActions ? productActions.querySelector('.purchase-options') : null;

		if (!productActions) return;

		if (window.innerWidth < 768 && ctaText) {
			productActions.insertAdjacentElement('afterbegin', ctaText);
		}

		if (ctasection.classList.contains('change-layout') && giftSelectorWrap) {
			purchaseOptions.insertAdjacentElement('afterend', giftSelectorWrap);
		} else if (ctaText && giftSelectorWrap) {
			ctaText.insertAdjacentElement('afterend', giftSelectorWrap);
		}
	});
</script>

<style>
	#cta-section-{{ SID }} {
			/* Core variables */
			--text-color: #4a5568;
			--border-color: #cbcbcb;
			--radio-size: 1em;
			--radio-size-mobile: 1em;
			--transition-speed: 0.2s;

			/* Variant Tab Styles */
			.variant-box.variant-tab-style {
					border-width: 2px;
					border-color: var(--primary-color);
					border-radius: 5px;
					cursor: pointer;
					align-content: center;
					transition: all 0.3s ease;

					&.selected {
							background-color: var(--primary-color);
							color: white;

							.discount {
									background-color: var(--orange);
									color: var(--primary-color);
									transition: all 0.3s ease;
							}
					}
			}

			/* Gift Selector Component */
			.gift-selector-wrap {
					.gift-box {
							.gift-option-border {
									position: relative;
									cursor: pointer;
									background-color: white;
									border: 1px solid var(--primary-color-light);
									transition: all 0.3s ease;

									&:hover {
											background-color: var(--primary-color-lighter);
									}

									/* Gift Option Layout */
									& > div.flex.items-center.gap-4 {
											padding-left: 3rem;
									}

									.gift-image-container {
											width: 80px;
											height: 80px;
											flex-shrink: 0;
									}

									/* Check Indicator */
									.check-indicator {
											position: absolute;
											left: 3%;
											top: 50%;
											transform: translateY(-50%);
											width: 20px;
											height: 20px;
											min-width: 20px;
											min-height: 20px;
											border: 1px solid var(--primary-color);
											border-radius: 9999px;
											display: flex;
											align-items: center;
											justify-content: center;
											background-color: transparent;

											svg.check-mark {
													width: 12px;
													height: 12px;
													min-width: 12px;
													min-height: 12px;
													color: white;
													stroke: var(--primary-color);
													stroke-width: 2;
													fill: none;
													opacity: 0;
													transition: opacity 0.3s ease;
											}
									}

									.gift-content {
											flex-grow: 1;
									}
							}

							/* Selected State */
							&.selected {
									.gift-option-border {
											background-color: var(--primary-color-lighter) !important;

											.check-indicator {
													background-color: var(--primary-color);

													svg.check-mark {
															opacity: 1;
															stroke: white;
													}
											}
									}
							}

							&:hover {
									.gift-option-border {
											background-color: var(--primary-color-lightest);
									}
							}
					}
			}

			/* Product Actions */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* One Time Purchase Link */
			.one-time-purchase-link {
					a {
							transition: color 0.3s ease;
					}
			}

			/* Radio Input Styles */
			.radio-input {
					display: flex;
					align-items: center;
					justify-content: center;
					position: relative;

					input[type='radio'] {
							&:hover,
							.variant-box:hover & {
									transform: scale(1.1);
									cursor: pointer;
									transition: 0.1s all;
							}
					}
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 1269px) {
					.variant-box {
							width: 100%;
					}
			}

			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.gift-content {
							font-size: 4vw;
					}

					.variant-box {
							font-size: 4vw;

							&::before {
									font-size: 3vw;
									width: 23vw;
									height: 5vw;
									top: -5vw;
									padding: 0.75vw;
									border-radius: 2vw 2vw 0 0;
							}

							&.selected {
									max-height: none;
							}

							.top-wrapper {
									min-height: 9vw;
							}

							.left-wrapper {
									gap: 2vw;
							}

							.option-title {
									font-size: 3.9vw;
							}

							.price-wrapper {
									min-width: 17.7vw;

									.real-price {
											font-size: 4.5vw;
									}
							}

							.terms {
									margin-left: 5vw;

									.subtitle,
									.terms-title {
											font-size: 3.5vw;
									}
							}

							.radio-box {
									label {
											width: 3vw;
											height: 3vw;

											&:after {
													font-size: 2vw;
													width: 3vw !important;
													height: 3vw !important;
													top: -0.25vw !important;
													left: -0.25vw !important;
													display: flex;
													justify-content: center;
													align-items: center;
											}
									}
							}
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}
	}
</style>
