{% assign variantsAmount = product.variants.size %}

<div class="product-actions">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      {% assign subscriptionFeatures = "Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs" | split: ',' %}
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
          {% render 'tooltip', SID: SID, linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>', title: 'Subscription Details', description: '', features: subscriptionFeatures %}
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, index: forloop.index %}
    {% endfor %}

    <div class="gift-selector-wrap">
      <div class="gift-selector-title mb-2">Choose your free gift:</div>
      <div class="gift-options flex-nowrap flex justify-start gap-4">
        {% for block in blocks %}
          {% case block.type %}
            {% when 'gift' %}
              {% assign giftProd = block.settings.gift_product %}
              {% assign giftVariant = giftProd.selected_or_first_available_variant %}
              {% assign giftProdSubscription = block.settings.gift_product_subscription %}
              {% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
              {% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

              <div class="gift-option-container flex flex-col items-center"
                   data-gift-variant-id="{{ giftVariant.id }}"
                   data-gift-variant-subscription-id="{{ giftVariantSubscription.id }}"
              >
                <div class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer" data-gift-id="{{ giftVariant.id }}" data-gift-id-subscription="{{ giftVariantSubscription.id }}">
                  <div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
                    <div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">âœ“</div>
                  </div>
                  <div class="gift-image-container flex justify-center">
                    <img
                      src="{{ giftThumb | image_url }}"
                      alt="{{ giftProd.title }}"
                      class="object-contain w-24 h-24"
                    >
                  </div>
                </div>
                <div class="gift-content text-center">
                  <div class="gift-name mb-1 font-medium">{{ giftProd.title }}</div>
                  <div class="gift-price flex items-center justify-center gap-2">
                    <span class="original-price text-gray-500 line-through">{{ giftVariantSubscription.compare_at_price | money_with_currency }}</span>
                    <span class="sale-price font-bold">FREE</span>
                  </div>
                </div>
              </div>
          {% endcase %}
        {% endfor %}
      </div>
    </div>

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% if shop.name == 'CuraLife Global' %}
          {% assign isGlobal = true %}
        {% endif %}

        <div>
          <product-form id="product-form-{{ SID }}" class="product-form" data-hide-errors="false" data-section-id="{{ section.id }}">
            {%- form 'product', product, id: 'product-form-{{ SID }}', class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
              <input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}">
              <input class="submit-selling-plan-id" type="hidden" name="selling_plan" value="{{ selling_plan_id }}">

              <div class="product-form__buttons main-submit-wrapper flex">
                <button id="ProductSubmitButton-{{SID}}" data-variant-id="{{ variant | default: product.selected_or_first_available_variant.id }}" type="submit" name="add" class="text-black product-form__submit button--full-width justify-center button--primary text-[20px] p-0 min-h-[50px] items-center bg-[--orange]">
                  <span class="submit-title">
                    {% if buyType == "buy_once" %}
                      Buy Now
                    {% else %}
                      Add To Cart
                    {% endif %}
                  </span>
                  <div class="loading-overlay__spinner hidden">
                    <!-- Loading Spinner SVG -->
                  </div>
                </button>
              </div>
            {%- endform -%}

            <!-- Error Message Wrapper -->
            <div class="product-form__error-message-wrapper p-2 mt-1 text-center rounded-sm bg-[--light-red]" role="alert" hidden>
              <!-- Error Content -->
            </div>
          </product-form>
        </div>

        {% if isBuyWithPrime and isGlobal != true and customer.b2b? == false %}
          <div class="bwp-button">
            {% render 'buy-with-prime-button' %}
          </div>
        {% endif %}

        {% if customer %}
          {% render 'yotpo-product-points-widget' %}
        {% endif %}
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
  const SID = '{{ SID }}';
  window.SID = SID;

  const purchaseOptionBoxes = Array.from(productActions.querySelectorAll('.purchase-option-box'));
  const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
  const buyOnceButton = productActions.querySelector('.purchase-type .buy-once');
  const giftOptionContainers = Array.from(document.querySelectorAll('.gift-option-container'));
  const form = document.getElementById('product-form-{{ SID }}');
  const submitButton = document.getElementById('ProductSubmitButton-{{SID}}');

  // Apply transition styles
  const styleSheet = document.createElement("style");
  styleSheet.textContent = `
    .subscription-content, .buy-once-content {
      transition: opacity 0.3s ease-in-out;
    }
  `;
  document.head.appendChild(styleSheet);

  // Initialize functions
  initializePurchaseOptions();
  setupMutationObserver();
  initializeGiftSelection();
  setupEventListeners();

  // Function to initialize gift selection
  function initializeGiftSelection() {
    giftOptionContainers.forEach((container, index) => {
      container.addEventListener('click', () => selectGift(container));
      if (index === 0) selectGift(container); // Select the first gift by default
    });
  }

  function selectGift(container) {
    giftOptionContainers.forEach(gift => gift.classList.remove('selected'));
    container.classList.add('selected');
    updateRadioIndicator(container);
  }

  function updateRadioIndicator(selectedContainer) {
    giftOptionContainers.forEach(container => {
      const checkMark = container.querySelector('.check-mark');
      checkMark.classList.toggle('hidden', container !== selectedContainer);
    });
  }

  function isSubscriptionSelected() {
    return subscriptionButton.classList.contains('selected');
  }

  // Initialize purchase options
  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = parseInt(urlParams.get('default-variant')) || {{ defaultSelectionIndex | default: 1 }};
    const initialVariantIndex = defaultVariant - 1;

    // Set initial state for purchase option boxes
    purchaseOptionBoxes.forEach((box, index) => {
      const hasSubscriptionPlan = box.dataset.subscriptionSellingPlanId && box.dataset.subscriptionSellingPlanId !== '0';
      if (!hasSubscriptionPlan) box.setAttribute('inert', '');

      box.classList.remove('selected');
      box.style.maxHeight = '68px';
      toggleContentDisplay(box, 'subscription', true);
      toggleContentDisplay(box, 'buy-once', false);

      const radio = box.querySelector("input[type='radio']");
      if (radio) radio.checked = false;
    });

    // Select the default box
    let defaultBox = purchaseOptionBoxes[initialVariantIndex];
    if (defaultBox && defaultBox.hasAttribute('inert')) {
      defaultBox = purchaseOptionBoxes.find(box => !box.hasAttribute('inert')) || defaultBox;
    }
    if (defaultBox) selectPurchaseOptionBox(defaultBox);

    // Set purchase type buttons
    subscriptionButton.classList.add('selected');
    buyOnceButton.classList.remove('selected');

    if (defaultBox) updateYotpoPointsWidget(defaultBox);

    {% if variantsAmount > 1 and isSlideOnLoad %}
      if (defaultBox) updateVariantImage(defaultBox);
    {% endif %}
  }

  // Mutation Observer to adjust max height
  function setupMutationObserver() {
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const targetBox = mutation.target.closest('.purchase-option-box');
          if (targetBox?.classList.contains('selected')) adjustMaxHeight(targetBox);
        }
      });
    });

    purchaseOptionBoxes.forEach(element => {
      observer.observe(element, { attributes: true, attributeFilter: ['class'] });
    });
  }

  // Set up event listeners
  function setupEventListeners() {
    productActions.addEventListener('click', event => {
      const purchaseBox = event.target.closest('.purchase-option-box');
      if (purchaseBox) togglePurchaseBox(purchaseBox);

      const purchaseTypeButton = event.target.closest('.purchase-type button');
      if (purchaseTypeButton) handlePurchaseTypeClick(purchaseTypeButton);
    });

    form.addEventListener('submit', handleFormSubmit);
  }

  function handlePurchaseTypeClick(button) {
    [subscriptionButton, buyOnceButton].forEach(btn => btn.classList.toggle('selected', btn === button));

    const isSubscription = button.classList.contains('subscription');
    const submitSellingPlanElement = form.querySelector('.submit-selling-plan-id');
    if (submitSellingPlanElement) {
      submitSellingPlanElement.value = isSubscription ? '' : '';
    }

    purchaseOptionBoxes.forEach(box => {
      toggleContentDisplay(box, 'subscription', isSubscription);
      toggleContentDisplay(box, 'buy-once', !isSubscription);

      const hasSubscriptionPlan = box.dataset.subscriptionSellingPlanId && box.dataset.subscriptionSellingPlanId !== '0';
      if (isSubscription && !hasSubscriptionPlan) {
        box.setAttribute('inert', '');
      } else {
        box.removeAttribute('inert');
      }

      // Update per month display
      {% unless product.metafields.custom.is_price_per_month %}
        const perMonthElement = box.querySelector('.per-month');
        if (perMonthElement) {
          perMonthElement.style.display = isSubscription ? 'block' : 'none';
        }
      {% endunless %}

      updateComparedAtPrice(box, isSubscription);
    });

    const selectedBox = productActions.querySelector('.purchase-option-box.selected');
    if (selectedBox && selectedBox.hasAttribute('inert')) {
      const firstAvailableBox = purchaseOptionBoxes.find(box => !box.hasAttribute('inert')) || selectedBox;
      selectPurchaseOptionBox(firstAvailableBox);
    }
  }

  function toggleContentDisplay(box, contentClass, show) {
    const contentElements = box.querySelectorAll(`.${contentClass}-content`);
    contentElements.forEach(el => {
      el.style.display = show ? 'block' : 'none';
      el.style.opacity = show ? '1' : '0';
    });
  }

  function updateComparedAtPrice(box, isSubscription) {
    const comparedAtPrice = box.querySelector('.compared-at-price');
    if (comparedAtPrice) {
      const itemPrice = parseFloat(box.dataset.itemPrice);
      const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
      const originalItemCap = parseFloat(box.dataset.originalItemCap);
      const currentPrice = isSubscription ? subscriptionItemPrice : itemPrice;

      comparedAtPrice.style.opacity = '0';
      setTimeout(() => {
        if (originalItemCap > currentPrice) {
          comparedAtPrice.style.display = 'block';
          requestAnimationFrame(() => comparedAtPrice.style.opacity = '1');
        } else {
          comparedAtPrice.style.display = 'none';
        }
      }, 300);
    }
  }

  function adjustMaxHeight(element) {
    element.style.maxHeight = `${element.scrollHeight}px`;
  }

  function togglePurchaseBox(element) {
    if (element.classList.contains('selected')) return;
    selectPurchaseOptionBox(element);
  }

  function selectPurchaseOptionBox(element) {
    const previousSelected = productActions.querySelector('.purchase-option-box.selected');
    if (previousSelected) {
      previousSelected.classList.remove('selected');
      previousSelected.style.maxHeight = '68px';
      const toggleIcon = previousSelected.querySelector('.toggle-icon');
      if (toggleIcon) toggleIcon.style.display = 'none';
    }

    element.classList.add('selected');
    adjustMaxHeight(element);
    const toggleIcon = element.querySelector('.toggle-icon');
    if (toggleIcon) toggleIcon.style.display = 'block';

    const isSubscription = isSubscriptionSelected();
    const sellingPlanId = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
    const variantId = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

    const submitSellingPlanElement = form.querySelector('.submit-selling-plan-id');
    const submitVariantElement = form.querySelector('.submit-variant-id');

    if (submitSellingPlanElement) submitSellingPlanElement.value = sellingPlanId;
    if (submitVariantElement) submitVariantElement.value = variantId;

    const radioInput = element.querySelector("input[type='radio']");
    if (radioInput) radioInput.checked = true;

    updateYotpoPointsWidget(element);

    {% if variantsAmount > 1 and isSlideOnLoad %}
      updateVariantImage(element);
    {% endif %}
  }

  function updateYotpoPointsWidget(box) {
    const price = isSubscriptionSelected()
      ? box.dataset.subscriptionItemPrice
      : box.dataset.itemPrice;

    const newPoints = Math.floor(Number(price) / 100);
    const pointsElement = productActions.querySelector('.reward-points-widget .current-price');
    if (pointsElement) pointsElement.textContent = newPoints;
  }

  function showError(message) {
    const errorWrapper = form.querySelector('.product-form__error-message-wrapper');
    const errorMessage = form.querySelector('.product-form__error-message');
    if (errorWrapper && errorMessage) {
      errorMessage.textContent = message;
      errorWrapper.hidden = false;
    }
  }

  function hideError() {
    const errorWrapper = form.querySelector('.product-form__error-message-wrapper');
    if (errorWrapper) errorWrapper.hidden = true;
  }

  async function handleFormSubmit(event) {
    event.preventDefault();
    toggleButtonLoading(submitButton, true);

    try {
      const variantIdInput = form.querySelector('.submit-variant-id');
      const sellingPlanIdInput = form.querySelector('.submit-selling-plan-id');
      const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
      const giftOptionBorder = selectedGiftContainer ? selectedGiftContainer.querySelector('.gift-option-border') : null;

      const isSubscription = !!sellingPlanIdInput?.value;
      const giftId = giftOptionBorder ? (isSubscription ? giftOptionBorder.dataset.giftIdSubscription : giftOptionBorder.dataset.giftId) : null;
      const variantId = variantIdInput ? variantIdInput.value : null;
      const sellingPlanId = sellingPlanIdInput ? sellingPlanIdInput.value : '';

      if (!variantId || !giftId) {
        showError('Please select a variant and a gift.');
        return;
      }

      const items = [
        {
          id: variantId,
          quantity: 1,
          ...(sellingPlanId && { selling_plan: sellingPlanId })
        },
        {
          id: giftId,
          quantity: 1
        }
      ];

      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({ items })
      });

      if (!response.ok) {
        const errorData = await response.json();
        showError(errorData.description || 'An error occurred while adding items to the cart.');
      } else {
        hideError();
        {% if buyType == "buy_once" %}
          window.location.href = '/checkout';
        {% endif %}
      }
    } catch (error) {
      showError('An unexpected error occurred.');
      console.error(error);
    } finally {
      toggleButtonLoading(submitButton, false);
    }
  }

  function toggleButtonLoading(button, isLoading) {
    const loader = button.querySelector('.loading-overlay__spinner');
    const buttonText = button.querySelector('.submit-title');
    if (loader && buttonText) {
      loader.style.display = isLoading ? 'block' : 'none';
      buttonText.style.display = isLoading ? 'none' : 'block';
    }
  }

  // Function to update the variant image
  function updateVariantImage(element) {
    if (!element || !element.dataset.index) return;

    const SID = window.SID || '';
    const sliderId = `productSliderAllInOne${SID}`;
    const slider = window[sliderId];

    if (!slider || !slider.slides || !slider.slides.length) {
      initializeProductSlider()
        .then(initializedSlider => performSlideUpdate(initializedSlider, element))
        .catch(error => console.error('Failed to initialize slider:', error));
      return;
    }

    performSlideUpdate(slider, element);
  }

  function performSlideUpdate(slider, element) {
    try {
      const elementIndex = parseInt(element.dataset.index);
      if (elementIndex >= 0 && elementIndex < slider.slides.length) {
        if (slider.activeIndex !== elementIndex) {
          setTimeout(() => slider.slideTo(elementIndex, 300, true), 50);
        }
      }
    } catch (error) {
      console.error('Error during slide update:', error);
    }
  }
});
</script>


<style>
	.gift-selector-wrap {
    margin: 1rem 0;
  }

  .gift-option-border {
    transition: all 0.3s ease;
    border: 2px solid #e5e7eb;
    background: #fff;
    width: 120px;
	  height: 120px;
  }

  .gift-option-border:hover {
    border-color: var(--primary-color-lighter);
  }

  .gift-option-container.selected .gift-option-border {
      border-color: var(--primary-color);
      background-color: rgba(var(--primary-color-rgb), 0.05);
  }

  .check-mark {
      transition: all 0.2s ease;
		  margin-top: -4px;
	    margin-left: 3px;
  }

  .check-mark.hidden {
      display: none;
  }

  .radio-indicator {
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
  }

  .gift-option-container.selected .radio-indicator {
	  background-color: var(--primary-color);
  }

  .sale-price {
    color: var(--primary-color-dark);
  }
	:root {
  --primary-color: {{ buyBoxColor }};
  --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
  --primary-color-light: color-mix(in srgb, var(--primary-color), white 60%);
  --primary-color-lighter: color-mix(in srgb, var(--primary-color), white 80%);
}

.gift-selector-wrap {
  margin: 1rem 0;
}

.gift-option-border {
  transition: all 0.3s ease;
  border: 2px solid #e5e7eb;
  background: #fff;
  width: 120px;
  height: 120px;
}

.gift-option-border:hover {
  border-color: var(--primary-color-lighter);
}

.gift-option-container.selected .gift-option-border {
  border-color: var(--primary-color);
  background-color: rgba(var(--primary-color-rgb), 0.05);
}

.check-mark {
  transition: all 0.2s ease;
  margin-top: -4px;
  margin-left: 3px;
}

.check-mark.hidden {
  display: none;
}

.radio-indicator {
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
}

.gift-option-container.selected .radio-indicator {
  background-color: var(--primary-color);
}

.sale-price {
  color: var(--primary-color-dark);
}

#cta-section-{{ SID }} .purchase-type button {
  background-color: var(--primary-color);
  color: black;
  border-radius: 5px;
  font-size: 16px;
  min-width: 49%;
  padding: 0.5rem;
}

#cta-section-{{ SID }} .purchase-type button.selected {
  color: white !important;
}

#cta-section-{{ SID }} .purchase-type button:not(.selected) {
  background: var(--primary-color-lighter);
  border: 1px solid var(--primary-color);
}

#cta-section-{{ SID }} .purchase-option-box {
  background: #fff;
  border: 1px solid #cbcbcb;
  cursor: pointer;
  max-height: 68px;
  filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
  transition: max-height 0.5s ease-in-out;
  border-radius: 10px;
  border-color: var(--primary-color);
  overflow: hidden;
  padding: 0.75rem 1rem;
}

#cta-section-{{ SID }} .purchase-option-box:hover {
  filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
}

#cta-section-{{ SID }} .purchase-option-box.selected {
  filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  border-width: 3px;
  max-height: max-content;
}

#cta-section-{{ SID }} .purchase-option-box[inert] {
  max-height: 68px !important;
  background: #ededed;
  opacity: 0.6;
}

#cta-section-{{ SID }} .purchase-option-box[inert] .option-title {
  color: grey;
}

#cta-section-{{ SID }} .purchase-option-box .radio-box {
  align-items: center;
  display: flex;
}

#cta-section-{{ SID }} .purchase-option-box .price-wrapper .total-price {
  color: var(--primary-color-dark);
}

#cta-section-{{ SID }} .purchase-option-box .price-wrapper .compared-at-price {
  color: var(--primary-color-light);
}

.subscription-content,
.buy-once-content,
.subtitle.subscription,
.subtitle.buy-once {
  transition: opacity 0.3s ease-in-out;
  opacity: 0;
  display: none;
}

.subscription-content.active,
.buy-once-content.active,
.subtitle.subscription.active,
.subtitle.buy-once.active {
  opacity: 1;
  display: block;
}

  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
	  --primary-color-light: color-mix(in srgb, var(--primary-color), white 60%);
    --primary-color-lighter: color-mix(in srgb, var(--primary-color), white 80%);
  }

  #cta-section-{{ SID }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;

    &.selected {
      color: white !important;
    }

    &:not(.selected) {
      background: var(--primary-color-lighter);
      border: 1px solid var(--primary-color);

      .subscription-details {
        color: var(--primary-color-dark);
      }
    }
  }

  #cta-section-{{ SID }} .purchase-option-box .radio-box input[type='radio'] {
      display: none;
  }

  #cta-section-{{ SID }} .purchase-option-box .radio-box label {
      cursor: pointer;
      width: 19px;
      height: 19px;
      border: 1px solid var(--primary-color);
      border-radius: 50%;
      position: relative;
  }

  #cta-section-{{ SID }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
      content: '\2713';
      position: absolute;
      top: -2px;
      left: -2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary-color);
      text-align: center;
      line-height: 22px;
      color: #fff;
  }

  #cta-section-{{ SID }} .product-actions {
    grid-area: 2/2/3/3;
    min-height: 415px;

    @media (width < 768px) {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }
  }

  #cta-section-{{ SID }} .purchase-option-box {
    background: #fff;
    border: 1px solid #cbcbcb;
    cursor: pointer;
    max-height: 68px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 0.75rem 1rem;

    &:hover {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    }

    &.selected {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      border-width: 3px;
      max-height: max-content;
    }

    &[inert] {
      max-height: 68px !important;
      background: #ededed;
      opacity: 0.6;

      .option-title {
        color: grey;
      }
    }

    @media (width < 1270px) {
      width: 100%;
    }

    @media (width < 768px) {
      font-size: 4vw;
    }

    .radio-box {
      align-items: center;
      display: flex;

      @media (width < 768px) {
        padding: 3vw 0;
      }
    }

    .price-wrapper {
      .total-price {
        color: var(--primary-color-dark);
      }

      .compared-at-price {
        color: var(--primary-color-light);
      }
    }
  }

  .subscription-content,
  .buy-once-content,
  .subtitle.subscription,
  .subtitle.buy-once {
    transition: opacity 0.3s ease-in-out;
  }

  /* Initial states */
  .subscription-content,
  .buy-once-content,
  .subtitle.subscription,
  .subtitle.buy-once {
    opacity: 0;
    display: none;
  }

  /* Active states */
  .subscription-content.active,
  .buy-once-content.active,
  .subtitle.subscription.active,
  .subtitle.buy-once.active {
    opacity: 1;
    display: block;
  }
</style>
