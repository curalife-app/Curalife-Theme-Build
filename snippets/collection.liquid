{% comment %}
  This section can be used with either:
  - collection_handle: Handle of the collection to display
  - product_handles: Array of product handles to display
  Optional parameters:
  - is_variant_split: If true, renders separate cards for each variant
{% endcomment %}

{% if collection_handle %}
  <script>console.log("Using collection: {{ collection_handle }}")</script>
  {% assign currentCollection = collections[collection_handle] %}
  {% assign collection_additional_variant_amount = currentCollection.metafields.custom.additional_variants.value.count %}
  {% assign collection_products_amount = currentCollection.products.size %}
  {% assign collection_total_items_amount = collection_additional_variant_amount | plus: collection_products_amount %}
  {% assign section_title = currentCollection.metafields.custom.alternative_title | default: currentCollection.title %}
  {% assign section_description = currentCollection.description %}
  {% assign banner_image = currentCollection.metafields.custom.collection_banner_img %}
  {% assign banner_image_mobile = currentCollection.metafields.custom.collection_banner_img_mobile %}
  {% assign banner_link = currentCollection.metafields.custom.collection_banner_lnk %}
  {% assign is_align_center = currentCollection.metafields.custom.is_align_center %}
  {% assign products = currentCollection.products %}
  {% assign additional_variants = currentCollection.metafields.custom.additional_variants.value %}
  <script>console.log("Collection products count: {{ products.size }}")</script>
{% elsif product_handles %}
  <script>console.log("Using product handles mode")</script>
  {% assign product_array = product_handles %}
  {% assign products = collections.all.products | where: "handle", product_handles[0] %}
  {% for handle in product_handles offset:1 %}
    {% assign next_product = collections.all.products | where: "handle", handle %}
    {% if next_product != blank %}
      {% assign products = products | concat: next_product %}
    {% endif %}
  {% endfor %}
  {% assign collection_total_items_amount = products.size %}
  {% assign additional_variants = blank %}
  <script>console.log("Total products added: {{ products.size }}")</script>
{% endif %}

{% if customer.b2b? or true %}
  {% assign isAddToCart = true %}
  {% if customer.b2b? %}
    {% assign isAddToCartQuantity = true %}
  {% endif %}
{% endif %}

<div id="{{ collection_handle | default: 'custom' }}-collection-section"
     class="collection-section xl:w-full {% if collection_total_items_amount < 3 and template.name == 'list-collections' %}w-[48%]{% else %}w-full{% endif %}"
     data-product-collections="{{ collection_handle | default: 'custom' }}" >

  {% unless isNoTitle %}
    <div class="title-wrapper border-b-[1px] border-black">
      <h2 class="relative mb-0 text-[40px] font-thin top-1 w-fit bg-white pr-3">{{ section_title }}</h2>
    </div>
  {% endunless %}

  {% if isDescription and section_description != blank %}
    <p class="description {% if is_align_center or isCentered %}text-center m-auto{% endif %}">{{ section_description }}</p>
  {% endif %}

  <div class="product-grid flex flex-wrap gap-4 justify-start {% if isHiddenCollections %}hidden{% endif %}">
    {% if banner_image and template.name != 'collection'%}
      <div class="image-wrapper">
        {% render 'image',
          image: banner_image,
          mobile_image: banner_image_mobile,
          preload: true,
          link: banner_link,
          alt: banner_image.alt,
          class: block.settings.additional_classes
        %}
      </div>
    {% endif %}

    {% for product in products %}
      <script>console.log("Processing product for display: {{ product.title }}")</script>
      {% if is_variant_split and product.variants.size > 0 %}
        <script>console.log("Splitting variants for product: {{ product.title }}")</script>
        {% for variant in product.variants %}
          <script>console.log("Rendering variant: {{ variant.title }} ({{ variant.id }})")</script>
          {% render 'variant-card',
            variant: variant,
            product: product,
            productCollections: product_collections,
            isNoPrices: isNoPrices,
            isAddToCart: isAddToCart,
            isAddToCartQuantity: isAddToCartQuantity
          %}
        {% endfor %}
      {% else %}
        <script>console.log("Rendering product card: {{ product.title }}")</script>
        {% render 'product-card',
          product: product,
          isNoPrices: isNoPrices,
          isAddToCart: isAddToCart,
          isAddToCartQuantity: isAddToCartQuantity
        %}
      {% endif %}
    {% endfor %}

    {% if additional_variants %}
      <script>console.log("Processing additional variants")</script>
      {% for additionalVar in additional_variants %}
        {% if additionalVar.product.variants.size == 1 %}
          <script>console.log("Rendering single variant product: {{ additionalVar.product.title }}")</script>
          {% render 'product-card',
            product: additionalVar.product,
            isNoPrices: isNoPrices,
            isAddToCart: isAddToCart,
            isAddToCartQuantity: isAddToCartQuantity
          %}
        {% else %}
          <script>console.log("Rendering variant card: {{ additionalVar.title }}")</script>
          {% render 'variant-card',
            variant: additionalVar,
            product: additionalVar.product,
            productCollections: product_collections,
            isNoPrices: isNoPrices,
            isAddToCart: isAddToCart,
            isAddToCartQuantity: isAddToCartQuantity
          %}
        {% endif %}
      {% endfor %}
    {% endif %}
  </div>
</div>

{% if is_align_center %}
  <style>
    #{{ collection_handle | default: 'custom' }}-collection-section {
      text-align: center;
    }

    #{{ collection_handle | default: 'custom' }}-collection-section .description {
      margin: 30px auto;
    }
  </style>
{% endif %}

<script>
  function updateQuantity(action) {
    var qtyElement = event.target.closest('.qty');
    var quantityField = qtyElement.querySelector('input[name="quantity"]');
    var value = parseInt(quantityField.value, 10);
    value = isNaN(value) ? 1 : value;

    if (action === "+") {
      value++;
    } else if (action === "-") {
      value = Math.max(1, value - 1);
    }

    quantityField.value = value;
  }

  function resetQuantity() {
    var qtyElement = event.target.closest('.qty');
    var quantityField = qtyElement.querySelector('input[name="quantity"]');
    quantityField.value = 1;
  }
</script>