{% assign totalOriginalPrice = 0 %}
{% assign totalSavings = 0 %}

<script>
  const variantCompareAtPrices = {
    {% for item in cart.items %}
      "{{ item.variant.id }}": {{ item.variant.compare_at_price | default: item.price }}{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };
  console.log('variantCompareAtPrices:', variantCompareAtPrices);
</script>

<div class="cart">
  <div class="loading-spinner" id="loadingSpinner" style="display: none;">
    <div class="spinner"></div>
  </div>

  <div class="cart-header">
    <h1>Shopping Cart</h1>
    <a href="{{ routes.all_products_collection_url }}" class="continue-shopping">Continue Shopping</a>
  </div>

  {% if cart == empty %}
    <div class="cart-empty">
      <h2>Your cart is empty</h2>
      <a href="{{ routes.all_products_collection_url }}" class="checkout-button">Start Shopping</a>
    </div>
  {% else %}
    <div class="cart-content">
      <div class="cart-items">
        {% for item in cart.items %}
          <div class="cart-item" id="CartItem-{{ item.key }}">
            <img src="{{ item.image | img_url: 'medium' }}" alt="{{ item.title }}" class="item-image">

            <div class="item-details">
              <h3>{{ item.product.title }}</h3>
              {% if item.options_with_values.size > 0 %}
                <div class="item-options">
                  {% for option in item.options_with_values %}
                    {{ option.name }}: {{ option.value }}{% unless forloop.last %}, {% endunless %}
                  {% endfor %}
                </div>
              {% endif %}
              {% if item.selling_plan_allocation %}
                <div class="selling-plan-name">
                  {{ item.selling_plan_allocation.selling_plan.name }}
                </div>
              {% endif %}

							{% if item.title contains 'Free' %}
								{% assign isFreeItem = true %}
							{% endif %}

							<!-- Quantity Selector: Only show if no selling plan and title doesn't contain 'Free' -->
              {% if item.selling_plan_allocation == nil and isFreeItem != true %}
                <div class="quantity-input quantity-selector">
                  <button type="button" class="quantity-btn" data-action="decrease-quantity">âˆ’</button>
                  <input type="number"
                    name="updates[]"
                    value="{{ item.quantity }}"
                    min="0"
                    aria-label="Quantity for {{ item.title | escape }}"
                    data-item-key="{{ item.key }}">
                  <button type="button" class="quantity-btn" data-action="increase-quantity">+</button>
                </div>
              {% endif %}

              <a href="/cart/change?line={{ forloop.index }}&quantity=0" class="remove-item" data-item-key="{{ item.key }}">Remove</a>
            </div>

						{% assign lineItemCAP = item.variant.compare_at_price | times: item.quantity %}
						{% assign lineItemPrice = item.price | times: item.quantity %}
						{% assign lineItemSaving = lineItemCAP | minus: lineItemPrice %}
						{% assign totalOriginalPrice = totalOriginalPrice | plus: lineItemPrice %}
						{% if item.variant.compare_at_price and item.variant.compare_at_price > item.price %}
							{% assign totalSavings = totalSavings | plus: lineItemSaving %}
						{% endif %}
            <div class="item-price text-[--primary]"
								data-line-cap="{{ lineItemCAP }}"
								data-variant-cap="{{ item.variant.compare_at_price }}"
								data-unit-price="{{ item.price }}">
							{{ lineItemPrice | money }}

							{% if item.variant.compare_at_price and item.variant.compare_at_price > item.price %}
								<div class="compare-at-price">{{ lineItemCAP | money }}</div>
							{% endif %}
						</div>
          </div>
        {% endfor %}
      </div>

      <div class="cart-summary">
        <div class="summary-row">
          <span>Subtotal</span>
          <span data-cart-subtotal>{{ totalOriginalPrice | plus: totalSavings | money }}</span>
        </div>

        {% if totalSavings > 0 %}
					<div class="summary-row" data-discount-row>
						<span>Discounts</span>
						<span data-discount-amount>-{{ totalSavings | money }}</span>
					</div>
				{% endif %}

        <div class="summary-row summary-total">
          <span>Total</span>
          <span data-cart-total>{{ cart.total_price | money }}</span>
        </div>

        <a href="/checkout" class="checkout-button">Proceed to Checkout</a>
      </div>
    </div>
  {% endif %}
</div>

<script>
// Cart Management System
const CartManager = {
  selectors: {
    cartContent: '.cart-content',
    cartEmpty: '.cart-empty',
    cartItem: '.cart-item',
    itemPrice: '.item-price',
    quantityBtn: '.quantity-btn',
    removeItem: '.remove-item',
    spinner: '.spinner',
    cartSubtotal: '[data-cart-subtotal]',
    cartTotal: '[data-cart-total]',
    discountRow: '.summary-row[data-discount-row]',
    cartItemCount: '[data-cart-item-count]',
    summaryPrices: '[data-cart-subtotal], [data-cart-total], [data-discount-amount]'
  },

  // Format money value with currency symbol
  formatMoney(cents) {
    cents = parseInt(cents, 10) || 0;
    const value = this.formatWithDelimiters(cents, 2);
    return '{{ shop.currency.symbol }}' + value;
  },

  formatWithDelimiters(number, precision) {
    if (isNaN(number) || number === null) return '0';

    number = (number / Math.pow(10, precision)).toFixed(precision);
    const [dollars, cents] = number.split('.');
    const formattedDollars = dollars.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    return formattedDollars + (cents ? '.' + cents : '');
  },

  // Loading state management
  toggleSpinner(container, show = true) {
    if (show) {
      const spinner = document.createElement('div');
      spinner.className = container.matches(this.selectors.summaryPrices) ? 'spinner summary-spinner' : 'item-spinner';
      spinner.innerHTML = '<div class="spinner"></div>';
      container.innerHTML = '';
      container.appendChild(spinner);
    } else {
      container.innerHTML = '';
    }
  },

  toggleSummarySpinners(show = true) {
    document.querySelectorAll(this.selectors.summaryPrices)
      .forEach(el => this.toggleSpinner(el, show));
  },

  // Cart update operations
  async updateQuantity(button, change) {
    const input = button.parentNode.querySelector('input');
    const itemKey = input.dataset.itemKey;
    const newValue = parseInt(input.value) + change;

    if (newValue < 0) return;

    const cartItem = button.closest(this.selectors.cartItem);
    const priceContainer = cartItem.querySelector(this.selectors.itemPrice);

    this.toggleSpinner(priceContainer, true);
    this.toggleSummarySpinners(true);

    try {
      const cart = await this.updateCartItem(itemKey, newValue);

      if (newValue === 0) {
        cartItem?.remove();
      } else {
        input.value = newValue;
        const cartItem = cart.items.find(item => item.key === itemKey);
        cartItem && this.updateItemPrice(priceContainer, cartItem);
      }

      this.updateCartTotals(cart);
      cart.item_count === 0 && this.showEmptyCartMessage();
    } catch (error) {
      console.error('Error updating cart:', error);
    } finally {
      this.toggleSpinner(priceContainer, false);
      this.toggleSummarySpinners(false);
    }
  },

  async updateCartItem(itemKey, quantity) {
    const response = await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({ id: itemKey, quantity })
    });
    return response.json();
  },

  updateCartTotals(cart) {
    let totalOriginalPrice = 0;
    let totalSavings = 0;

    cart.items.forEach(item => {
      try {
        const variantId = item.variant_id.toString();
        const originalUnitPrice = parseInt(variantCompareAtPrices[variantId], 10) || item.price;
        const originalLinePrice = originalUnitPrice * item.quantity;
        const finalLinePrice = item.final_line_price;

        totalOriginalPrice += originalLinePrice;
        if (originalLinePrice > finalLinePrice) {
          totalSavings += originalLinePrice - finalLinePrice;
        }
      } catch (error) {
        console.error('Error processing cart item:', error);
      }
    });

    // Update UI elements
    const elements = {
      subtotal: document.querySelector(this.selectors.cartSubtotal),
      discountRow: document.querySelector(this.selectors.discountRow),
      total: document.querySelector(this.selectors.cartTotal),
      itemCount: document.querySelector(this.selectors.cartItemCount)
    };

    elements.subtotal && (elements.subtotal.textContent = this.formatMoney(totalOriginalPrice));

    if (elements.discountRow) {
      if (totalSavings > 0) {
        const discountAmount = elements.discountRow.querySelector('span:last-child');
        discountAmount && (discountAmount.textContent = '-' + this.formatMoney(totalSavings));
        elements.discountRow.style.display = 'flex';
      } else {
        elements.discountRow.style.display = 'none';
      }
    }

    elements.total && (elements.total.textContent = this.formatMoney(cart.total_price));
    elements.itemCount && (elements.itemCount.textContent = cart.item_count);
  },

  updateItemPrice(container, item) {
    if (!container || !item) return;

    const variantId = item.variant_id.toString();
    const originalUnitPrice = parseInt(variantCompareAtPrices[variantId], 10) || item.price;
    const originalLinePrice = originalUnitPrice * item.quantity;
    const finalLinePrice = item.final_line_price;

    let priceHtml = this.formatMoney(finalLinePrice);
    if (originalUnitPrice > item.price) {
      priceHtml += `<div class="compare-at-price">${this.formatMoney(originalLinePrice)}</div>`;
    }

    container.innerHTML = priceHtml;
  },

  async removeItem(itemKey, link) {
    const cartItem = link.closest(this.selectors.cartItem);
    const priceContainer = cartItem.querySelector(this.selectors.itemPrice);

    this.toggleSpinner(priceContainer, true);
    this.toggleSummarySpinners(true);

    try {
      const cart = await this.updateCartItem(itemKey, 0);
      cartItem?.remove();
      this.updateCartTotals(cart);
      cart.item_count === 0 && this.showEmptyCartMessage();
    } catch (error) {
      console.error('Error removing item:', error);
    } finally {
      this.toggleSpinner(priceContainer, false);
      this.toggleSummarySpinners(false);
    }
  },

  showEmptyCartMessage() {
    const cartContent = document.querySelector(this.selectors.cartContent);
    const cartEmpty = document.querySelector(this.selectors.cartEmpty);
    if (cartContent && cartEmpty) {
      cartContent.style.display = 'none';
      cartEmpty.style.display = 'block';
    }
  },

  // Initialize cart functionality
  init() {
    document.addEventListener('DOMContentLoaded', () => {
      // Setup quantity buttons
      document.querySelectorAll(this.selectors.quantityBtn).forEach(button => {
        button.addEventListener('click', () => {
          const change = button.dataset.action === 'increase-quantity' ? 1 : -1;
          this.updateQuantity(button, change);
        });
      });

      // Setup remove item buttons
      document.querySelectorAll(this.selectors.removeItem).forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          this.removeItem(link.dataset.itemKey, link);
        });
      });
    });
  }
};

// Initialize the cart
CartManager.init();
</script>

<style>
	:root {
  --color-primary: var(--curalin);
  --color-primary-dark: var(--curalin-dark);
  --color-text-main: #202124;
  --color-text-secondary: #5f6368;
  --color-border: #dadce0;
  --color-white: #ffffff;
  --color-danger: var(--bronze);
  --color-shadow: rgba(0, 0, 0, 0.1);
  --font-family: var(--sub-font);
}

.cart {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 50px;
}

.cart-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.cart-header h1 {
  font-size: 2rem;
  font-weight: 700;
}

.continue-shopping {
  color: var(--color-primary);
  text-decoration: none;
  font-weight: 500;
}

.continue-shopping:hover {
  text-decoration: underline;
}

.cart-content {
  display: grid;
  grid-template-columns: 1fr 350px;
  gap: 2rem;
}

.cart-items {
  background: var(--color-white);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
  padding: 1rem;
}

.cart-item {
  display: flex;
  padding: 1rem 0;
  border-bottom: 1px solid var(--color-border);
}

.cart-item:last-child {
  border-bottom: none;
}

.item-image {
  width: 120px;
  height: 120px;
  border-radius: 0.5rem;
  object-fit: cover;
  margin-right: 1.5rem;
}

.item-details {
  flex: 1;
}

.item-details h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.compare-at-price {
  color: var(--primary);
  opacity: 0.5;
  font-size: 16px;
  font-weight: 100;
  text-align: end;
  text-decoration: line-through;
}

.item-options,
.selling-plan-name {
  font-size: 1rem;
  color: var(--color-text-secondary);
}

.quantity-input {
  display: inline-flex;
  align-items: center;
  margin-top: 0.5rem;
}

.quantity-input {
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  overflow: hidden;
}

.quantity-input input {
  width: 3rem;
  text-align: center;
  border: none;
  padding: 0.5rem 0;
  font-size: 1rem;
}

.quantity-input input:focus {
  outline: none;
}

.quantity-btn {
  width: 2.5rem;
  height: 2.5rem;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background: none;
  border: none;
  font-size: 1.25rem;
  color: var(--color-primary);
  cursor: pointer;
  transition: color 0.3s;
}

.quantity-btn:hover {
  color: var(--color-primary-dark);
}

.remove-item {
  color: var(--color-danger);
  text-decoration: none;
  font-size: 0.875rem;
  margin-top: 0.5rem;
  display: inline-block;
}

.remove-item:hover {
  text-decoration: underline;
}

.item-price {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--color-text-main);
}

.cart-summary {
  background: var(--color-white);
  border-radius: 0.5rem;
  padding: 1.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
  position: sticky;
  top: 2rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 0;
}

.summary-total {
  font-size: 1.25rem;
  font-weight: 700;
  border-top: 1px solid var(--color-border);
  margin-top: 1rem;
  padding-top: 1rem;
}

.checkout-button {
  width: 100%;
  padding: 1rem;
  background-color: var(--color-primary);
  color: var(--color-white);
  border: none;
  border-radius: 0.5rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  margin-top: 1.5rem;
  transition: background-color 0.3s;
}

.checkout-button:hover {
  background-color: var(--color-primary-dark);
}

.checkout-button:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

.cart-empty {
  text-align: center;
  padding: 4rem 2rem;
  background: var(--color-white);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
}

.loading-spinner {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.spinner {
  width: 24px;
  height: 24px;
  border: 3px solid var(--color-border);
  border-top-color: var(--color-primary);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  margin: 0 auto;
}

/* Remove the full-page loading spinner styles since we're not using it anymore */
.loading-spinner {
  display: none !important;
}

.summary-spinner {
  display: inline-block;
  vertical-align: middle;
  width: 16px;
  height: 16px;
  border-width: 2px;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@media (max-width: 768px) {
  .cart-content {
    grid-template-columns: 1fr;
  }

  .cart-summary {
    position: static;
    margin-top: 2rem;
  }

  .cart-item {
    flex-direction: column;
    align-items: center;
  }

  .item-image {
    margin-right: 0;
    margin-bottom: 1rem;
  }

  .item-price {
    margin-top: 1rem;
  }
}
@media (max-width: 768px) {
  .cart-content {
    grid-template-columns: 1fr;
  }

  .cart-summary {
    position: static;
    margin-top: 2rem;
  }

  .cart-item {
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 1rem 0;
  }

  .item-image {
    margin: 0 auto 1rem;
    display: block;
    width: 200px;
    height: 200px;
  }

  .item-details {
    text-align: center;
  }

  .item-price {
    margin-top: 1rem;
  }
}

@media (max-width: 480px) {
  .cart {
    padding: 0 0.5rem;
  }

  .cart-header h1 {
    font-size: 1.5rem;
  }

  .item-image {
    width: 200px;
    height: 200px;
  }

  .item-details h3 {
    font-size: 1.125rem;
  }

  .quantity-btn {
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
  }

  .quantity-input input {
    width: 3rem;
    font-size: 0.9rem;
  }
}
</style>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}