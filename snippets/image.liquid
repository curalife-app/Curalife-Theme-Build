{%- comment -%}
# Responsive Image Component Documentation

This Liquid snippet creates a responsive image component with the following features:
- Responsive images with desktop/mobile variants
- Optional automatic mobile image detection
- Retina image support
- Lazy loading with priority options
- Error logging and fallback handling
- WebP format support
- Configurable breakpoints and sizes
- Link wrapper functionality
{%- endcomment -%}

{%- liquid
  #######################################
  # Initialize variables with defaults
  #######################################
  assign desktop_image = image
  assign mobile_image = mobile_image
  assign lazy_load = lazy | default: true
  assign is_priority = priority | default: false
  assign load_mobile = load_mobile | default: false
  assign load_global = load_global | default: false
  assign alt = alt | default: image.alt
  assign mobile_breakpoint = mobile_breakpoint | default: 768
  assign sizes = sizes | default: '(min-width: 1200px) 1200px, (min-width: 768px) 768px, 100vw'
  assign breakpoints = '375,640,768,1080,1200,1920,2560' | split: ','

  #######################################
  # Check if store is global
  #######################################
  assign shop_name = shop.name | downcase
  assign is_global_store = false
  if shop_name contains 'global'
    assign is_global_store = true
  endif

  #######################################
  # Process desktop image path
  #######################################
  assign full_path = desktop_image.src
  assign path_parts = full_path | split: '/'
  assign filename = path_parts | last
  assign image_name = filename | split: '.' | first
  assign image_ext = filename | split: '.' | last
  assign base_image_name = image_name

  #######################################
  # Check for global variant if enabled
  #######################################
  assign has_global_variant = false
  if load_global and is_global_store
    assign global_src = image_name | append: '-global.' | append: image_ext
    assign global_filename = global_src
    assign global_file = files | where: 'filename', global_filename | first

    if global_file
      assign has_global_variant = true
      assign global_variant_url = global_file.url
      assign image_name = image_name | append: '-global'

      # Check for global retina variant
      assign global_retina_src = image_name | append: '-x2.' | append: image_ext
      assign global_retina_filename = global_retina_src
      assign global_retina_file = files | where: 'filename', global_retina_filename | first

      if global_retina_file
        assign has_global_retina = true
        assign global_retina_url = global_retina_file.url
      endif
    endif
  endif

  #######################################
  # Check for retina variant of base image
  #######################################
  assign retina_src = base_image_name | append: '-x2.' | append: image_ext
  assign retina_filename = retina_src
  assign retina_file = files | where: 'filename', retina_filename | first

  if retina_file
    assign retina_image = retina_file.url
  endif

  #######################################
  # Initialize mobile variant flags
  #######################################
  assign has_mobile_variant = false
  assign has_mobile_retina = false
  assign mobile_variant_url = nil
  assign mobile_retina_url = nil

  #######################################
  # Check for mobile variant if enabled
  #######################################
  if load_mobile and mobile_image == blank
    if has_global_variant
      # Check for global mobile variant
      assign global_mobile_src = base_image_name | append: '-global-mbl.' | append: image_ext
      assign global_mobile_filename = global_mobile_src
      assign global_mobile_file = files | where: 'filename', global_mobile_filename | first

      if global_mobile_file
        assign has_mobile_variant = true
        assign mobile_variant_url = global_mobile_file.url

        # Check for global mobile retina variant
        assign global_mobile_retina_src = base_image_name | append: '-global-mbl-x2.' | append: image_ext
        assign global_mobile_retina_filename = global_mobile_retina_src
        assign global_mobile_retina_file = files | where: 'filename', global_mobile_retina_filename | first

        if global_mobile_retina_file
          assign has_mobile_retina = true
          assign mobile_retina_url = global_mobile_retina_file.url
        endif
      endif
    endif

    # If no global mobile variant, check for regular mobile variant
    if has_mobile_variant == false
      assign mobile_src = base_image_name | append: '-mbl.' | append: image_ext
      assign mobile_filename = mobile_src
      assign mobile_file = files | where: 'filename', mobile_filename | first

      if mobile_file
        assign has_mobile_variant = true
        assign mobile_variant_url = mobile_file.url

        # Check for mobile retina variant
        assign mobile_retina_src = base_image_name | append: '-mbl-x2.' | append: image_ext
        assign mobile_retina_filename = mobile_retina_src
        assign mobile_retina_file = files | where: 'filename', mobile_retina_filename | first

        if mobile_retina_file
          assign has_mobile_retina = true
          assign mobile_retina_url = mobile_retina_file.url
        endif
      endif
    endif
  endif

  #######################################
  # Set mobile image or default to desktop
  #######################################
  assign mobile_image = mobile_image | default: desktop_image

  #######################################
  # Initialize error log
  #######################################
  assign error_log = 'window.imageErrors = window.imageErrors || { missing_alt: [], missing_retina: [], missing_mobile: [], missing_global: [], load_errors: []};'

  #######################################
  # Validation checks
  #######################################
  if image == blank
    assign validation_error = '{ type: "Missing Image", message: "Image is required" }'
    assign error_log = error_log | append: 'window.imageErrors.missing_alt.push(' | append: validation_error | append: ');'
  endif

  if alt == blank
    assign validation_error = '{ type: "Missing Alt Text", message: "Image Alt text is required", src: "' | append: image.src | append: '" }'
    assign error_log = error_log | append: 'window.imageErrors.missing_alt.push(' | append: validation_error | append: ');'
  endif

  #######################################
  # Process retina images
  #######################################
  unless retina_image
    assign debug_data = '{ type: "Missing Retina Image", filename: "' | append: filename | append: '", expectedRetina: "' | append: retina_src | append: '", variant: "desktop", timestamp: "' | append: 'now' | date: '%Y-%m-%d %H:%M:%S' | append: '" }'
    assign error_log = error_log | append: 'window.imageErrors.missing_retina.push(' | append: debug_data | append: ');'
  endunless

  #######################################
  # Generate unique IDs and URLs
  #######################################
  assign unique_id = 'img-' | append: desktop_image.id | append: '-' | append: mobile_image.id | append: '-' | now | date: '%N'
  assign fallback_url = desktop_image | image_url: width: 1100

  if retina_image
    assign desktop_retina_url = retina_image | image_url: width: 2200
  endif

  if has_mobile_variant
    assign base_mobile_url = mobile_variant_url | image_url: width: 750, format: 'webp'
    if has_mobile_retina
      assign mobile_retina_url = mobile_retina_url | image_url: width: 1500
    endif
  endif
-%}

<picture>
  {% if has_mobile_variant %}
    <source
      media="(max-width: {{ mobile_breakpoint }}px)"
      srcset="
        {%- capture mobile_srcset -%}
          {{ base_mobile_url }}
          {%- if has_mobile_retina -%}
            , {{ mobile_retina_url }} 2x
          {%- endif -%}
        {%- endcapture -%}{{ mobile_srcset | strip }}"
      sizes="{{ sizes }}"
    >
  {% endif %}

  <source
    media="(min-width: {{ mobile_breakpoint | plus: 1 }}px)"
    {% if has_global_variant %}
      {%- capture desktop_srcset -%}
        {{ global_variant_url | image_url: width: 1200 }}
        {%- if has_global_retina -%}
          , {{ global_retina_url | image_url: width: 2400 }} 2x
        {%- endif -%}
      {%- endcapture -%}
      srcset="{{ desktop_srcset | strip }}"
    {% else %}
      {%- capture desktop_srcset -%}
        {{ desktop_image | image_url: width: 1200 }}
        {%- if retina_image -%}
          , {{ retina_image | image_url: width: 2400 }} 2x
        {%- endif -%}
      {%- endcapture -%}
      srcset="{{ desktop_srcset | strip }}"
    {% endif %}
    sizes="{{ sizes }}"
  >

  <img
    id="{{ unique_id }}"
    src="{% if has_global_variant %}{{ global_variant_url | image_url: width: 1100 }}{% else %}{{ fallback_url }}{% endif %}"
    {% if has_global_variant and has_global_retina %}
      srcset="{{ global_retina_url | image_url: width: 2200 }} 2x"
    {% elsif retina_image %}
      srcset="{{ retina_image | image_url: width: 2200 }} 2x"
    {% endif %}
    {% if lazy_load and is_priority != true %}
      loading="lazy"
      decoding="async"
    {% else %}
      loading="eager"
      decoding="sync"
      fetchpriority="high"
    {% endif %}
    alt="{{ alt | escape }}"
    width="{{ desktop_image.width }}"
    height="{{ desktop_image.height }}"
    class="object-cover opacity-0 m-0 transition-opacity duration-300 ease-in-out {% if link %}cursor-pointer{% endif %} {% if class %}{{ class }}{% endif %}"
    onload="this.classList.add('opacity-100');"
    {% if link %}
      onclick="window.location.href='{{ link }}'"
    {% endif %}
    onerror="window.logImageError('load_errors', {
      imageId: '{{ desktop_image.id }}',
      elementId: '{{ unique_id }}',
      fallbackUrl: '{{ fallback_url }}',
      originalSrc: this.src
    }); this.onerror=null; this.src='{{ fallback_url }}'"
    data-original-url="{{ fallback_url }}"
    {%- if retina_image -%}
      data-desktop-retina-url="{{ retina_image | image_url: width: 2200 }}"
    {%- endif -%}
    {%- if has_mobile_variant and has_mobile_retina -%}
      data-mobile-retina-url="{{ mobile_retina_url }}"
    {%- endif -%}
    {%- if link -%}
      data-href="{{ link }}"
    {%- endif -%}
  >
</picture>

<script>
  {{ error_log }}

  if (!window.logImageError) {
    window.hasDisplayedImageErrors = false;

    window.debouncedDisplayErrors = (function() {
      let timeoutId = null;
      return function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
          if (!window.hasDisplayedImageErrors) {
            const errors = window.imageErrors;
            const hasErrors = Object.values(errors).some(arr => arr.length > 0);

            if (hasErrors) {
              console.warn('🚨 Image Component Errors Summary:', {
                totalErrors: Object.values(errors).reduce((sum, arr) => sum + arr.length, 0),
                Errors: errors
              });

              window.hasDisplayedImageErrors = true;
            }
          }
          timeoutId = null;
        }, 1000);
      };
    })();

    window.logImageError = function(type, data) {
      if (!window.imageErrors[type]) {
        window.imageErrors[type] = [];
      }

      data.timestamp = new Date().toISOString();
      const existingError = window.imageErrors[type].find(
        error => error.imageId === data.imageId && error.type === data.type
      );

      if (!existingError) {
        window.imageErrors[type].push(data);
        window.debouncedDisplayErrors();
      }
    };
  }

  if (window.imageErrors && !window.hasDisplayedImageErrors) {
    window.debouncedDisplayErrors();
  }
</script>
