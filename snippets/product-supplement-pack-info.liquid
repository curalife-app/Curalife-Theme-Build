{% if product.tags contains 'sleep' %}
	{% assign bg_color = 'var(--light-turquoise)' %}
	{% assign number_color = 'var(--dark-turquoise)' %}
	{% assign link_color = 'var(--dark-turquoise)' %}
{% elsif product.tags contains 'joint' %}
	{% assign bg_color = 'var(--light-purple)' %}
	{% assign number_color = 'var(--purple)' %}
	{% assign link_color = 'var(--dark-purple)' %}
{% elsif product.tags contains 'immune' %}
	{% assign bg_color = 'var(--light-purple)' %}
	{% assign number_color = 'var(--purple)' %}
	{% assign link_color = 'var(--dark-purple)' %}
{% elsif product.tags contains 'multivitamin' %}
	{% assign bg_color = 'var(--lighter-peach)' %}
	{% assign number_color = 'var(--peach)' %}
	{% assign link_color = 'var(--dark-peach)' %}
{% endif %}

<section class="pack-info-section instance-{{ index }}">
	<div class="container">
		<div class="wrap mbl:flex-col mbl:items-center flex gap-4">
			<div class="titles mbl:flex-col mbl:items-baseline gap-2">
				<h2 class="title">{{ product.title }}</h2>
				<div class="subtitle">{{ product.description }}</div>

				<ul class="highlights check-list">
					{% for highlight in product.metafields.custom['product-highlights'].value %}
						<li class="highlight">
							<b>{{ highlight.title }}</b><br>
							{{ highlight.subtitle }}
						</li>
					{% endfor %}
				</ul>
			</div>

			<img class="product-image" src="{{ product.metafields.custom.pill_image | img_url: 'original' }}" alt="{{ product.title }}" loading="lazy">
		</div>

		<div class="tabbed-content tabs-side">
			<nav class="tabs">
				<div class="tab">
					<a href="#instructions-{{ index }}">
						Usage Instructions <i>></i>
					</a>
				</div>
				{% if product.metafields.custom.ingredients.value %}
					<div class="tab">
						<a href="#ingredients-{{ index }}">
							Ingredients <i>></i>
						</a>
					</div>
				{% endif %}
				<div class="tab">
					<a href="#facts-{{ index }}">
						Supplement Facts <i>></i>
					</a>
				</div>
			</nav>

			<div class="content">
				<div id="instructions-{{ index }}" class="item" data-title="Usage Instructions">
					<div class="instructions item-content">
						{% for step in product.metafields.custom.instructions.value %}
							<div class="step">
								<div class="capsules">
									{% for item in (1..step.capsules) %}
										{% if product.tags contains 'gummies' %}
											<img class="gummies m-0" src="{{ "icon-gummy.png" | asset_url }}" width="20" height="31" alt="Capsule Pill" loading="lazy">
										{% else %}
											<img class="caps m-0" src="{{ "icon-capsule.png" | asset_url }}" width="20" height="31" alt="Capsule Pill" loading="lazy" style="min-width: 35px">
										{% endif %}
									{% endfor %}
								</div>
								<div>{{ step.subtitle }}</div>
							</div>
						{% endfor %}
					</div>
				</div>

				{% if product.metafields.custom.ingredients.value %}
					<div id="ingredients-{{ index }}" class="item" data-title="Ingredients">
						<div class="ingredients item-content">
							{% for ingredient in product.metafields.custom.ingredients.value %}
								<div class="ingredient">
									{% assign ingredient_handle = ingredient | downcase | replace: ' ', '-' %}
									<img src="{{ "product-supplement-pack-info-ingredient-icon-" | append: ingredient_handle | append: ".png" | asset_url }}" alt="Ingredient" loading="lazy">
									<p>{{ ingredient }}</p>
								</div>
							{% endfor %}
						</div>
					</div>
				{% endif %}

				<div id="facts-{{ index }}" class="item" data-title="Supplement Facts">
					<div class="facts item-content">
						<img src="{{ product.metafields.custom.supplement_fact | image_url }}" alt="Supplement Facts" loading="lazy">
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	/* General styles */
	.pack-info-section {
		background: var(--primary-color-lightest);
	}
	/* (Other existing styles remain unchanged) */

	/* Mobile styles (below 768px): tabs/accordion behavior */
	@media all and (max-width: 768px) {
		.pack-info-section .tabbed-content .tabs {
			display: block;
		}
		.pack-info-section .tabbed-content .item .item-content {
			transition: opacity 0.8s ease-in-out;
			opacity: 0;
			visibility: hidden;
			height: 0;
		}
		.pack-info-section .tabbed-content .item.active .item-content {
			opacity: 1;
			visibility: visible;
			height: auto;
			padding: 5vw 0;
		}
		/* Optional accordion indicator */
		.pack-info-section .item::after {
			content: "+";
			font-size: 30px;
			position: absolute;
			top: 5px;
			right: 2vw;
			border: 2px solid var(--light-green);
			border-radius: 50%;
			width: 5vw;
			height: 5vw;
			display: flex;
			align-items: center;
			justify-content: center;
			color: var(--light-green);
		}
		.pack-info-section .item.active::after {
			content: "-";
		}
	}

	/* Desktop styles (above 800px): show all content side by side */
	@media all and (min-width: 800px) {
		.pack-info-section .tabbed-content {
			display: flex;
			flex-direction: row;
			align-items: flex-start;
			height: auto;
		}
		.pack-info-section .tabbed-content .tabs {
			display: none; /* Hide the tabs navigation */
		}
		.pack-info-section .tabbed-content .content {
			display: flex;
			gap: 20px;
			width: 100%;
		}
		.pack-info-section .tabbed-content .content .item {
			flex: 1;
		}
		.pack-info-section .tabbed-content .item .item-content {
			opacity: 1 !important;
			visibility: visible !important;
			height: auto !important;
			padding: 0; /* Adjust as needed */
		}
		.pack-info-section .item::after {
			display: none;
		}
	}
</style>

<script>
	(function () {
		function tabControl() {
			const instanceSelector = '.pack-info-section.instance-{{ index }}';
			const tabbedContent = document.querySelector(instanceSelector + ' .tabbed-content');
			if (!tabbedContent) return;

			if (window.innerWidth > 768) {
				// Desktop view: make sure all items are visible.
				document.querySelectorAll(instanceSelector + ' .tabbed-content .item').forEach(function(item) {
					item.classList.add('active');
				});
			} else {
				// Mobile view: initialize tab/accordion functionality.
				// Remove active class from all items to start collapsed.
				document.querySelectorAll(instanceSelector + ' .tabbed-content .item').forEach(function(item) {
					item.classList.remove('active');
				});

				const tabsNav = document.querySelector(instanceSelector + ' .tabbed-content .tabs');
				if (tabsNav && tabsNav.offsetParent !== null) {
					// Add click listeners to tab buttons.
					tabsNav.querySelectorAll('a').forEach(function (button) {
						button.addEventListener('click', function (event) {
							event.preventDefault();
							const target = button.getAttribute('href');
							// Remove active state from all buttons and items.
							tabsNav.querySelectorAll('a').forEach(btn => btn.classList.remove('active'));
							document.querySelectorAll(instanceSelector + ' .tabbed-content .item').forEach(item => item.classList.remove('active'));
							// Activate the clicked tab and corresponding content.
							button.classList.add('active');
							document.querySelector(target).classList.add('active');
						});
					});
				} else {
					// Fallback: allow clicking on the item to toggle it.
					document.querySelectorAll(instanceSelector + ' .tabbed-content .item').forEach(function (item) {
						item.addEventListener('click', function () {
							const container = item.closest('.tabbed-content');
							container.querySelectorAll('.item').forEach(it => it.classList.remove('active'));
							item.classList.add('active');
						});
					});
				}
			}
		}

		tabControl();

		let resizeTimer;
		window.addEventListener('resize', function () {
			clearTimeout(resizeTimer);
			resizeTimer = setTimeout(function () {
				tabControl();
			}, 250);
		});
	})();
</script>
