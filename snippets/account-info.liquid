{% comment %}
  Account Information Snippet

  This snippet displays the customer's contact information and shipping address in the account page.
  It also handles displaying success messages after contact information is updated.
  It now includes password change functionality right in the same card.

  Usage:
  {% render 'account-info' %}

  Dependencies:
  - Requires customer object to be available
  - Expects certain CSS classes to be defined in the parent template
  - Handles the contact-updated URL parameter for success messages
{% endcomment %}

<div class="account-info-container">
  <div class="info-section contact-section">
    <div class="section-header">
      <h3 class="section-title">Contact Information</h3>
      <a href="/account/addresses?edit_contact=true" class="action-button contact-edit-link" title="Edit Contact Information">
        <span class="action-text">Edit</span>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
      </a>
    </div>
    <div class="section-content">
      <div class="contact-info">
        <ul class="info-list no-style">
          <li class="info-item">
            <span class="info-label">First Name</span>
            <span class="info-value">{{ customer.first_name }}</span>
          </li>
          <li class="info-item">
            <span class="info-label">Last Name</span>
            <span class="info-value">{{ customer.last_name }}</span>
          </li>
          <li class="info-item">
            <span class="info-label">Email</span>
            <span class="info-value">{{ customer.email }}</span>
          </li>
        </ul>
      </div>
    </div>
  </div>

  <div class="info-section address-section">
    <div class="section-header">
      <h3 class="section-title">Shipping Address</h3>
      <a href="/account/addresses" class="action-button address-edit-link" title="Manage Addresses">
        <span class="action-text">Manage</span>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
      </a>
    </div>
    <div class="section-content">
      {% assign address = customer.default_address %}
      {% if address %}
        <div class="address-display">
          <p>
            {{ address.first_name }} {{address.last_name }}
            {% if address.company != blank %}<br />{{ address.company }}{% endif %}
            {% if address.street != blank %}<br />{{ address.street }}{% endif %}
            <br />{{ address.city }} {% if address.province_code != blank %}, {{ address.province_code }}{% endif %}
            <br />{{ address.country }} {{ address.zip }}
            {% if address.phone != blank %}<br />{{ address.phone }}{% endif %}
          </p>
        </div>
      {% else %}
        <div class="empty-address">
          <p>You don't have a shipping address yet. <a href="/account/addresses" class="add-address-link">Add one now</a></p>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="info-section password-section">
    <div class="section-header">
      <h3 class="section-title">Password Management</h3>
      <button type="button" class="action-button toggle-password-form" aria-label="Toggle password change form">
        <span class="action-text">Change</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
      </button>
    </div>
    <div class="section-content">
      <div class="password-form-wrapper" style="display: none;">
        {% form 'customer' %}
          <div class="form-fields">
            <div class="form-group">
              <label for="CustomerCurrentPassword">Current Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[current_password]" id="CustomerCurrentPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerNewPassword">New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password]" id="CustomerNewPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
              <div class="password-strength-meter">
                <div class="strength-label"></div>
                <div class="meter-bar">
                  <span class="strength-value"></span>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerPasswordConfirmation">Confirm New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password_confirmation]" id="CustomerPasswordConfirmation" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>
          </div>

          <input type="hidden" name="return_to" value="/account?password-updated=true#a">

          <div class="form-actions">
            <button type="submit" class="primary-button">Update Password</button>
            <button type="button" class="secondary-button cancel-password-btn">Cancel</button>
          </div>
        {% endform %}
      </div>
    </div>
  </div>

  <div class="info-section subscriptions-section" data-lazy-load="true">
    <div class="section-header">
      <h3 class="section-title">Active Subscriptions</h3>
      <a href="/account/orders" class="action-button view-orders-link" title="View All Orders">
        <span class="action-text">View Orders</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 20l-5.447-2.724A1 1 0 0 1 3 16.382V5.618a1 1 0 0 1 .553-.894L9 2m0 18v-4m0 4V2m0 0l6 3m-6-3v18m6-15l4.553 2.276A1 1 0 0 1 21 8.618v10.764a1 1 0 0 1-.553.894L15 22M9 2l6 3m0 0v18m0 0l-6-3"/></svg>
      </a>
    </div>
    <div class="section-content">
      <div class="subscriptions-placeholder">
        <div class="loading-indicator">
          <svg class="spinner" viewBox="0 0 50 50">
            <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
          </svg>
          <p>Loading your subscriptions...</p>
        </div>
      </div>
      <div class="subscriptions-content" style="display: none;">
        <!-- Content will be loaded via JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Check for query parameter indicating successful update
    const urlParams = new URLSearchParams(window.location.search);

    // Contact info update message
    if (urlParams.get('contact-updated') === 'true') {
      // Show success message if not already displayed
      const contactSection = document.querySelector('.contact-section');
      if (contactSection && !contactSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your contact information has been updated successfully!</p>';
        contactSection.querySelector('.section-content').insertBefore(successDiv, contactSection.querySelector('.contact-info'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('contact-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Password update message
    if (urlParams.get('password-updated') === 'true') {
      const passwordSection = document.querySelector('.password-section');
      if (passwordSection && !passwordSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your password has been updated successfully!</p>';
        passwordSection.querySelector('.section-content').insertBefore(successDiv, passwordSection.querySelector('.password-form-wrapper'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('password-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Toggle password form visibility
    const toggleFormBtn = document.querySelector('.toggle-password-form');
    const passwordForm = document.querySelector('.password-form-wrapper');
    const cancelBtn = document.querySelector('.cancel-password-btn');

    if (toggleFormBtn && passwordForm) {
      toggleFormBtn.addEventListener('click', function() {
        if (passwordForm.style.display === 'none') {
          passwordForm.style.display = 'block';
          passwordForm.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
          passwordForm.style.display = 'none';
        }
      });

      if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
          passwordForm.style.display = 'none';
          // Clear form values
          const passwordInputs = passwordForm.querySelectorAll('input[type="password"]');
          passwordInputs.forEach(input => {
            input.value = '';
          });
          // Reset strength meter
          const strengthBar = passwordForm.querySelector('.strength-value');
          if (strengthBar) {
            strengthBar.style.width = '0%';
          }
          const strengthLabel = passwordForm.querySelector('.strength-label');
          if (strengthLabel) {
            strengthLabel.textContent = '';
          }
        });
      }
    }

    // Toggle password visibility
    const togglePasswordBtns = document.querySelectorAll('.toggle-password-visibility');

    togglePasswordBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const passwordInput = this.parentElement.querySelector('input');
        const eyeIcon = this.querySelector('.eye-icon');
        const eyeOffIcon = this.querySelector('.eye-off-icon');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          eyeIcon.style.display = 'none';
          eyeOffIcon.style.display = 'block';
        } else {
          passwordInput.type = 'password';
          eyeIcon.style.display = 'block';
          eyeOffIcon.style.display = 'none';
        }
      });
    });

    // Password strength meter
    const newPasswordInput = document.getElementById('CustomerNewPassword');
    const strengthBar = document.querySelector('.strength-value');
    const strengthLabel = document.querySelector('.strength-label');

    if (newPasswordInput && strengthBar && strengthLabel) {
      newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        let strength = 0;
        let label = '';

        if (password.length >= 8) strength += 1;
        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
        if (password.match(/\d/)) strength += 1;
        if (password.match(/[^a-zA-Z\d]/)) strength += 1;

        switch (strength) {
          case 0:
            strengthBar.style.width = '0%';
            label = '';
            break;
          case 1:
            strengthBar.style.width = '25%';
            strengthBar.style.backgroundColor = '#ff4d4d'; // Red
            label = 'Weak';
            break;
          case 2:
            strengthBar.style.width = '50%';
            strengthBar.style.backgroundColor = '#ffa64d'; // Orange
            label = 'Fair';
            break;
          case 3:
            strengthBar.style.width = '75%';
            strengthBar.style.backgroundColor = '#99cc00'; // Light Green
            label = 'Good';
            break;
          case 4:
            strengthBar.style.width = '100%';
            strengthBar.style.backgroundColor = '#2ecc71'; // Green
            label = 'Strong';
            break;
        }

        strengthLabel.textContent = label;
        strengthLabel.style.color = strengthBar.style.backgroundColor;
      });

      // Password confirmation validation
      const confirmInput = document.getElementById('CustomerPasswordConfirmation');

      if (confirmInput) {
        confirmInput.addEventListener('input', function() {
          if (this.value !== newPasswordInput.value) {
            this.setCustomValidity('Passwords do not match');
          } else {
            this.setCustomValidity('');
          }
        });
      }
    }

    // Lazy load subscriptions
    const lazyLoadSubscriptions = () => {
      const subscriptionsSection = document.querySelector('.subscriptions-section');
      const subscriptionsContent = document.querySelector('.subscriptions-content');
      const placeholder = document.querySelector('.subscriptions-placeholder');

      if (!subscriptionsSection || !subscriptionsContent) return;

      // Function to check if element is in viewport
      const isInViewport = (el) => {
        const rect = el.getBoundingClientRect();
        return (
          rect.top <= (window.innerHeight || document.documentElement.clientHeight) + 300 &&
          rect.bottom >= 0
        );
      };

      // Observer for intersection detection
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            loadSubscriptionData();
            observer.unobserve(entry.target);
          }
        });
      }, { rootMargin: '300px' });

      // Start observing the subscriptions section
      observer.observe(subscriptionsSection);

      // Load subscription data
      const loadSubscriptionData = async () => {
        try {
          // Generate the subscriptions HTML - in a real implementation,
          // this could be an AJAX request to a specific endpoint
          // For this example, we'll use inline Liquid rendering

          const subscriptionsHTML = `
            {% assign subscription_items = '' | split: '' %}
            {% assign subscription_count = 0 %}
            {% assign max_visible = 5 %}

            {% for order in customer.orders %}
              {% if order.tags contains 'Subscription' or order.attributes['Subscription'] %}
                {% for line_item in order.line_items %}
                  {% if line_item.selling_plan_allocation %}
                    {% assign subscription_items = subscription_items | concat: line_item %}
                    {% assign subscription_count = subscription_count | plus: 1 %}
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}

            {% if subscription_count > 0 %}
              <div class="subscriptions-list">
                <ul class="subscription-items">
                  {% for i in (1..subscription_count) %}
                    {% if forloop.index <= max_visible %}
                      {% assign line_item = subscription_items[forloop.index0] %}
                      {% assign order = line_item.order %}
                      <li class="subscription-item">
                        <div class="subscription-item-inner">
                          <div class="subscription-product">
                            <div class="product-image" data-src="{{ line_item.image | img_url: '60x60', crop: 'center' }}">
                              <!-- Image will be loaded via JavaScript -->
                            </div>
                            <div class="product-details">
                              <p class="product-title">{{ line_item.title }}</p>
                              <p class="product-variant">{{ line_item.variant.title }}</p>
                            </div>
                          </div>
                          <div class="subscription-info">
                            <div class="subscription-detail">
                              <span class="detail-label">Plan:</span>
                              <span class="detail-value">{{ line_item.selling_plan_allocation.selling_plan.name }}</span>
                            </div>
                            <div class="subscription-detail">
                              <span class="detail-label">Next:</span>
                              <span class="detail-value">
                                {% assign next_date = order.attributes['next_billing_date'] %}
                                {{ next_date | default: 'Not available' | date: "%b %d, %Y" }}
                              </span>
                            </div>
                            <div class="subscription-detail">
                              <span class="status-indicator active">Active</span>
                              <a href="/account/orders/{{ order.id }}" class="action-link">Manage</a>
                            </div>
                          </div>
                        </div>
                      </li>
                    {% endif %}
                  {% endfor %}
                </ul>

                {% if subscription_count > max_visible %}
                  <div class="subscription-footer">
                    <a href="/account/orders" class="view-all-link">View all {{ subscription_count }} subscriptions</a>
                  </div>
                {% endif %}
              </div>
            {% else %}
              <div class="empty-subscriptions">
                <p>You don't have any active subscriptions. <a href="/collections/all" class="browse-link">Browse products</a></p>
              </div>
            {% endif %}
          `;

          // Set the HTML content
          subscriptionsContent.innerHTML = subscriptionsHTML;

          // Show content, hide placeholder
          subscriptionsContent.style.display = 'block';
          placeholder.style.display = 'none';

          // Lazy load images
          const lazyImages = subscriptionsContent.querySelectorAll('.product-image[data-src]');
          lazyImages.forEach(imgContainer => {
            const imgSrc = imgContainer.getAttribute('data-src');
            if (imgSrc) {
              const img = new Image();
              img.src = imgSrc;
              img.alt = 'Product image';
              img.onload = () => {
                imgContainer.appendChild(img);
                imgContainer.removeAttribute('data-src');
              };

              // Add placeholder until image loads
              imgContainer.innerHTML = `
                <div class="placeholder-image">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
                </div>
              `;
            }
          });

        } catch (error) {
          console.error('Error loading subscriptions:', error);
          subscriptionsContent.innerHTML = `
            <div class="error-message">
              <p>Unable to load your subscriptions. Please try again later.</p>
            </div>
          `;
          subscriptionsContent.style.display = 'block';
          placeholder.style.display = 'none';
        }
      };

      // If IntersectionObserver is not supported, fallback to scroll events
      if (!('IntersectionObserver' in window)) {
        const checkScroll = () => {
          if (isInViewport(subscriptionsSection)) {
            loadSubscriptionData();
            window.removeEventListener('scroll', checkScroll);
          }
        };

        window.addEventListener('scroll', checkScroll);
        // Check once on load
        checkScroll();
      }
    };

    // Initialize lazy loading
    lazyLoadSubscriptions();
  });
</script>

<style>
  /* Optimized subscription styles */
  .subscriptions-placeholder {
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .loading-indicator {
    text-align: center;
  }

  .spinner {
    animation: rotate 2s linear infinite;
    width: 30px;
    height: 30px;
    margin-bottom: 10px;
  }

  .spinner .path {
    stroke: var(--color-primary, #555);
    stroke-linecap: round;
    animation: dash 1.5s ease-in-out infinite;
  }

  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes dash {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }

  .subscription-items {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .subscription-item {
    margin-bottom: 15px;
    border-bottom: 1px solid var(--color-border-light, #eee);
    padding-bottom: 15px;
  }

  .subscription-item:last-child {
    margin-bottom: 0;
  }

  .subscription-item-inner {
    display: flex;
    flex-direction: row;
    gap: 15px;
  }

  @media (max-width: 767px) {
    .subscription-item-inner {
      flex-direction: column;
    }
  }

  .subscription-product {
    display: flex;
    align-items: flex-start;
    flex: 0 0 240px;
  }

  .product-image {
    width: 60px;
    height: 60px;
    margin-right: 10px;
    border-radius: 4px;
    overflow: hidden;
    background-color: #f5f5f5;
    flex-shrink: 0;
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f5f5f5;
  }

  .subscription-info {
    display: flex;
    flex-wrap: wrap;
    gap: 10px 20px;
    flex: 1;
  }

  .subscription-detail {
    display: flex;
    flex-direction: column;
  }

  .detail-label {
    font-size: 12px;
    color: var(--color-text-light, #777);
    margin-bottom: 4px;
  }

  .detail-value {
    font-weight: 500;
  }

  .product-title {
    font-weight: 500;
    margin: 0 0 5px 0;
  }

  .product-variant {
    color: var(--color-text-light, #777);
    font-size: 12px;
    margin: 0;
  }

  .status-indicator {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    margin-bottom: 5px;
  }

  .status-indicator.active {
    background-color: #e3f3ea;
    color: #2ecc71;
  }

  .action-link {
    color: var(--color-primary, #555);
    text-decoration: none;
    font-weight: 500;
    transition: opacity 0.2s ease;
    font-size: 14px;
  }

  .action-link:hover {
    opacity: 0.8;
  }

  .empty-subscriptions {
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 4px;
    text-align: center;
  }

  .subscription-footer {
    margin-top: 15px;
    text-align: center;
    padding-top: 10px;
    border-top: 1px solid var(--color-border-light, #eee);
  }

  .view-all-link {
    color: var(--color-primary, #555);
    text-decoration: none;
    font-weight: 500;
    display: inline-block;
    padding: 8px 16px;
    background-color: #f5f5f5;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .view-all-link:hover {
    background-color: #e9e9e9;
  }

  .error-message {
    padding: 15px;
    background-color: #fff1f0;
    border-radius: 4px;
    color: #e74c3c;
    text-align: center;
  }
</style>