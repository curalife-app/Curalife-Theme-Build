<section class="quiz-results-section">
	<div class="container text-center">
		<div class="flex-col flex items-center gap-y-8 gap-x-20 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full">
			<div class="titles">
				<h1 class="h1 !text-black text-center text-[25px] font-thin mbl:text-start">
					You can lose at least
					<span class="text-[--primary]"><span id="can"></span> lbs</span><br>
					in just 6 months with Curaslim
				</h1>

				<p class="text-[--bronze] text-center mbl:text-start font-bold font-[21px]">
					No Injectables Required!
				</p>
			</div>

			<div class="estimated-results mbl:flex-col flex items-center justify-between w-full gap-8">
				<img class="m-0" src="{{ 'curaslim_results_v2.png' | file_url }}" alt="Curaslim Quiz Results">
				<div class="estimated-results-wrapper mbl:w-full w-1/2" id="results-bars-container">
					<!-- The results bars will be inserted here by JS -->
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	@media (max-width: 768px) {
		.quiz-results-section .titles h1,
		.quiz-results-section .titles p {
			text-align: start;
		}
	}

	/* Progress Bar Styles */
	.quiz-bar-wrapper {
		opacity: 0;
		transform: translateY(20px);
		animation: fadeInUp 0.5s forwards;
	}
	.quiz-bar-label {
		margin-bottom: 0.5rem;
		font-weight: bold;
	}
	.quiz-bar-container {
		background: #e5e7eb;
		border-radius: 9999px;
		height: 1rem;
		overflow: hidden;
		position: relative;
	}
	.quiz-bar-fill {
		background: var(--primary, #2563eb);
		height: 100%;
		width: 0%;
		line-height: 1rem;
		color: white;
		font-size: 0.75rem;
		text-align: right;
		padding-right: 0.5rem;
		transition: width 1.5s ease-out;
	}
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>

<script>
	function sendToZapier(params) {
		// Replace this URL with your actual Zapier webhook URL
		const ZAPIER_WEBHOOK_URL = 'https://hooks.zapier.com/hooks/catch/10900898/2zlu7dg/';

		// Create an object with all URL parameters
		const webhookData = {};
		params.forEach((value, key) => {
			webhookData[key] = value;
		});

		// Send the data to Zapier
		fetch(ZAPIER_WEBHOOK_URL, {
			method: 'POST',
			body: JSON.stringify(webhookData),
			headers: {
				'Content-Type': 'application/json'
			}
		})
		.then(response => {
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			console.log('Data successfully sent to Zapier');
		})
		.catch(error => {
			console.error('Error sending data to Zapier:', error);
		});
	}

	function processGeneralUrlParams() {
		console.log('Processing general URL parameters...');
		const urlParams = new URLSearchParams(window.location.search);

		// Send parameters to Zapier first
		sendToZapier(urlParams);

		urlParams.forEach((value, key) => {
			console.log(`Processing parameter: ${key} with value: ${value}`);
			const element = document.getElementById(key);
			if (element) {
				console.log(`Found element with ID: ${key}. Setting text content to: ${value}`);
				element.textContent = value;
			} else {
				console.warn(`No element found with ID: ${key}`);
			}
		});

		console.log('Finished processing general URL parameters.');
	}

	function processCanParam() {
		console.log("Processing 'can' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const canValue = urlParams.get('wgt');

		if (canValue !== null) {
			const element = document.getElementById('can');
			if (element) {
				const processedValue = parseFloat(canValue) - (parseFloat(canValue) - parseFloat(canValue) * 0.075);
				console.log(`Original value of 'wgt': ${canValue}, Processed value: ${processedValue}`);
				element.textContent = processedValue.toFixed(0);
			} else {
				console.warn("No element found with ID: 'can'");
			}
		}

		console.log("Finished processing 'can' URL parameter.");
	}

	function processGoalsParam() {
		console.log("Processing 'gls' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const goalsValue = urlParams.get('gls');

		if (goalsValue !== null) {
			const goalsArray = goalsValue.split(',');
			let quizBenefitsData = [];

			goalsArray.forEach((goal, index) => {
				const trimmedGoal = goal.trim();
				if (trimmedGoal.toLowerCase() !== 'other') {
					// Example logic: Start with 80% and decrease by 5% per goal (min 50%)
					let percentage = 80 - (index * 5);
					if (percentage < 50) percentage = 50;
					quizBenefitsData.push({ goal: trimmedGoal, percentage });
				}
			});

			console.log("Quiz Benefits Data:", quizBenefitsData);
			renderResultsBars(quizBenefitsData);
		} else {
			console.warn("No 'gls' parameter found in the URL.");
		}

		console.log("Finished processing 'gls' URL parameter.");
	}

	function renderResultsBars(benefits) {
		const container = document.getElementById('results-bars-container');
		if (!container) return;

		// Clear any existing content
		container.innerHTML = '';

		benefits.forEach((item, idx) => {
			// Create the container for each bar
			const barWrapper = document.createElement('div');
			barWrapper.className = 'quiz-bar-wrapper mb-4';
			// Add a slight animation delay for a staggered effect
			barWrapper.style.animationDelay = `${idx * 0.15}s`;

			// Create the label element
			const label = document.createElement('div');
			label.className = 'quiz-bar-label';
			label.textContent = item.goal;

			// Create the progress bar container
			const progressBarContainer = document.createElement('div');
			progressBarContainer.className = 'quiz-bar-container';

			// Create the progress bar fill element
			const progressBarFill = document.createElement('div');
			progressBarFill.className = 'quiz-bar-fill';
			// Set a data attribute for the target width for later animation
			progressBarFill.setAttribute('data-target-width', item.percentage);

			// Optionally, you can display the percentage text inside the bar:
			progressBarFill.textContent = `${item.percentage}%`;

			// Assemble the elements
			progressBarContainer.appendChild(progressBarFill);
			barWrapper.appendChild(label);
			barWrapper.appendChild(progressBarContainer);
			container.appendChild(barWrapper);
		});

		// Trigger the animation after a short delay to ensure elements are rendered
		setTimeout(() => {
			document.querySelectorAll('.quiz-bar-fill').forEach(bar => {
				const targetWidth = bar.getAttribute('data-target-width');
				bar.style.width = `${targetWidth}%`;
			});
		}, 100); // 100ms delay
	}

	document.addEventListener('DOMContentLoaded', () => {
		processGeneralUrlParams();
		processCanParam();
		processGoalsParam();
	});
</script>

{% schema %}
	{
		"name": "Quiz Results V2",
		"class": "quiz-results-section",
		"settings": [],
		"presets": [
			{
				"name": "Quiz Results"
			}
		]
	}
{% endschema %}
