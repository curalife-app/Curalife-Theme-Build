{%- comment -%}
	Countdown Timer Snippet
	Configuration:
	- section_id: Unique section identifier
	- bgColor: Background color setting
	- isShowDays: Toggle days display
	- showLabels: Toggle time unit labels
	- urgencyMinutes: Reset duration in minutes
	- targetDate: Specific end date (Month Day, Year Hour:Minute:00)
{%- endcomment -%}

<div id="countdown-{{ section_id }}" class="countdown">
	<ul class="no-style">
		{%- if isShowDays -%}
			<li>
				<span id="days-{{ section_id }}"></span>
				{%- if showLabels -%}
					<span class="label">Days</span>
				{%- endif -%}
			</li>
		{%- endif -%}
		<li>
			<span id="hours-{{ section_id }}"></span>
			{%- if showLabels -%}
				<span class="label">Hours</span>
			{%- endif -%}
		</li>
		<li>
			<span id="minutes-{{ section_id }}"></span>
			{%- if showLabels -%}
				<span class="label">Minutes</span>
			{%- endif -%}
		</li>
		<li>
			<span id="seconds-{{ section_id }}"></span>
			{%- if showLabels -%}
				<span class="label">Seconds</span>
			{%- endif -%}
		</li>
	</ul>
</div>

<style>
	.countdown {
		background-color: {{ bgColor }};
		margin: auto;
		max-width: fit-content;
		padding: 1rem;
	}

	.countdown ul {
		display: flex;
		gap: 1rem;
		list-style: none;
		margin: 0;
		padding: 0;
	}

	.countdown li {
		display: flex;
		flex-direction: column;
		align-items: center;
		min-width: 70px;
	}

	.countdown li span:first-child {
		font-size: 2.5rem;
		font-weight: 500;
		font-variant-numeric: tabular-nums;
	}

	.countdown .label {
		font-size: 0.875rem;
		text-transform: uppercase;
		margin-top: 0.25rem;
	}

	@media screen and (max-width: 640px) {
		.countdown li {
			min-width: 60px;
		}

		.countdown li span:first-child {
			font-size: 2rem;
		}

		.countdown .label {
			font-size: 0.75rem;
		}
	}
</style>

<script>
(function() {
	const SECOND = 1000;
	const MINUTE = SECOND * 60;
	const HOUR = MINUTE * 60;
	const DAY = HOUR * 24;
	const SECTION_ID = '{{ section_id }}';

	const pad = num => String(num).padStart(2, '0');

	const getStorageKey = () => `countdown_${SECTION_ID}`;

	const getStoredEndTime = () => {
		const stored = localStorage.getItem(getStorageKey());
		return stored ? parseInt(stored, 10) : null;
	};

	const setStoredEndTime = (time) => {
		localStorage.setItem(getStorageKey(), time.toString());
	};

	const updateDisplay = (timeLeft) => {
		{% if isShowDays %}
		document.getElementById(`days-${SECTION_ID}`).textContent = pad(timeLeft.days);
		{% endif %}
		document.getElementById(`hours-${SECTION_ID}`).textContent = pad(timeLeft.hours);
		document.getElementById(`minutes-${SECTION_ID}`).textContent = pad(timeLeft.minutes);
		document.getElementById(`seconds-${SECTION_ID}`).textContent = pad(timeLeft.seconds);
	};

	{% if urgencyMinutes > 0 %}
		let endTime = getStoredEndTime() || Date.now() + ({{ urgencyMinutes }} * MINUTE);
		setStoredEndTime(endTime);

		const updateUrgencyTimer = () => {
			const now = Date.now();
			let distance = endTime - now;

			if (distance < 0) {
				endTime = now + ({{ urgencyMinutes }} * MINUTE);
				setStoredEndTime(endTime);
				distance = {{ urgencyMinutes }} * MINUTE;
			}

			updateDisplay({
				days: Math.floor(distance / DAY),
				hours: Math.floor((distance % DAY) / HOUR),
				minutes: Math.floor((distance % HOUR) / MINUTE),
				seconds: Math.floor((distance % MINUTE) / SECOND)
			});
		};

		setInterval(updateUrgencyTimer, 1000);
		updateUrgencyTimer();
	{% else %}
		const targetDate = new Date("{{ month }} {{ day }}, {{ year }} {{ hour }}:{{ minute }}:00").getTime();

		const updateTimer = () => {
			const now = Date.now();
			const distance = targetDate - now;

			if (distance < 0) {
				document.getElementById(`countdown-${SECTION_ID}`).remove();
				return;
			}

			updateDisplay({
				days: Math.floor(distance / DAY),
				hours: Math.floor((distance % DAY) / HOUR),
				minutes: Math.floor((distance % HOUR) / MINUTE),
				seconds: Math.floor((distance % MINUTE) / SECOND)
			});
		};

		setInterval(updateTimer, 1000);
		updateTimer();
	{% endif %}
})();
</script>
