{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      {% comment %} {% assign subscriptionFeatures = "Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs" | split: ',' %}
       {% endcomment %}
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
          {% comment %} {% render 'tooltip', SID: SID, linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>', title: 'Subscription Details', description: '', features: subscriptionFeatures %} {% endcomment %}
        </span>
      </button>

      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, index: forloop.index %}
    {% endfor %}

    {% comment %} {% if customer.email == 'yotam@curalife.com' and false %}
      {% for additionalVariant in product.metafields.custom.additional_variants.value %}
        {% assign variantsAmount = variantsAmount | plus: 1 %}
        {% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: additionalVariant.product, var: additionalVariant, index: variantsAmount %}
      {% endfor %}

      {% for block in blocks %}
        {% case block.type %}
          {% when 'variant' %}
            {% assign pathsToReveal = block.settings.reveal_on_paths | split: "," %}
            {% if pathsToReveal contains request.path or pathsToReveal == blank %}
              {% assign referenced_variant_product = block.settings.prod %}
              {% assign referenced_variant = blank %}
              {% assign blockVarID = block.settings.variant_id | plus: 0 %}
              {% for vari in referenced_variant_product.variants %}
                {% assign currVarID = vari.id | plus: 0 %}
                {% if currVarID == blockVarID %}
                  {% assign referenced_variant = vari %}
                {% endif %}
              {% endfor %}

              {% if referenced_variant != blank %}
                {% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: referenced_variant_product, var: referenced_variant %}
              {% endif %}
            {% endif %}
        {% endcase %}
      {% endfor %}
    {% endif %} {% endcomment %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id , product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function() {
  const $productActions = $("#product-actions-{{ SID }}");
  const $purchaseOptionBoxes = $productActions.find('.purchase-option-box');
  const enableToggleAnimation = {{ isVariantBoxToggle | default: false }};

  function isSubscriptionSelected() {
    return $('#product-actions-{{ SID }} .purchase-type button.subscription').hasClass('selected');
  }

  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = urlParams.get('default-variant') ? parseInt(urlParams.get('default-variant')) : {{ defaultSelectionIndex | default: 1 }};

    $('#product-actions-{{ SID }} .purchase-type .subscription').trigger('click');

    const InitialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
    $purchaseOptionBoxes.eq(InitialDefaultVariant).trigger('click').find("input[type='radio']").prop('checked', true);
  }

  function togglePurchaseType(parentBox, isSubscriptionSelected) {
    const subscriptionContent = parentBox.find('.subscription');
    const buyOnceContent = parentBox.find('.buy-once');
    const bwpButton = $('#product-actions-{{ SID }} .bwp-button');

    if (isSubscriptionSelected) {
      {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').show();{% endunless %}
      bwpButton.hide();
      buyOnceContent.hide();
      subscriptionContent.show();

      const sellingPlanId = parentBox.data('subscription-selling-plan-id');
      if (sellingPlanId > 0) {
        $('#product-actions-{{ SID }} .submit-selling-plan-id').val(sellingPlanId);
        parentBox.removeAttr('inert');
      } else {
        parentBox.attr('inert', '');
        parentBox.removeClass('selected');
        $purchaseOptionBoxes.filter(':not([inert])').first().trigger('click');
      }
    } else {
      {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').hide();{% endunless %}
      bwpButton.show();
      $('.submit-selling-plan-id').val('');
      parentBox.removeAttr('inert');
      subscriptionContent.hide();
      buyOnceContent.show();
    }

    updatePriceDisplay(parentBox, isSubscriptionSelected);
    adjustMaxHeight(parentBox, isSubscriptionSelected);
  }

  function updatePriceDisplay(parentBox, isSubscriptionSelected) {
    const itemPrice = parseFloat(parentBox.data('item-price'));
    const subscriptionItemPrice = parseFloat(parentBox.data('subscription-item-price'));
    const originalItemCap = parseFloat(parentBox.data('original-item-cap'));

    const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
    const priceElement = parentBox.find('.current-price');
    const comparedAtPriceElement = parentBox.find('.compared-at-price');

    priceElement.text('$' + currentPrice.toFixed(2));

    if (originalItemCap > currentPrice) {
      comparedAtPriceElement.text('$' + originalItemCap.toFixed(2)).fadeIn();
    } else {
      comparedAtPriceElement.fadeOut();
    }

    updateYotpoPointsWidget(parentBox, currentPrice);
  }

  function updateYotpoPointsWidget(parentBox, currentPrice) {
    const pointsElement = parentBox.find('.reward-points-widget .current-price');
    if (pointsElement.length) {
      const newPoints = Math.floor(currentPrice);
      pointsElement.text(newPoints);
    }
  }

  function adjustMaxHeight(element, isSubscriptionSelected) {
    if (enableToggleAnimation) {
      if (isSubscriptionSelected) {
        const openHeight = element.get(0).scrollHeight;
        element.css('max-height', openHeight + 'px');
        element.find('.toggle-icon').show();
      } else {
        element.css('max-height', 'none');
      }
    } else {
      element.css('max-height', 'none');
    }
  }

  function togglePurchaseBox(element) {
    const isSubscription = isSubscriptionSelected();
    const wasSelected = element.hasClass('selected');
    const subscriptionPlanID = isSubscription ? element.data('subscription-selling-plan-id') : '';
    const variantID = isSubscription ? element.data('original-variant') : element.data('variant');

    if (wasSelected) {
      return;
    }

    $purchaseOptionBoxes.removeClass('selected').each(function() {
      if (enableToggleAnimation && isSubscription) {
        $(this).css('max-height', '72px');
        $(this).find('.toggle-icon').hide();
      }
    });

    $('#product-actions-{{ SID }} .submit-selling-plan-id').val(subscriptionPlanID);
    $('#product-actions-{{ SID }} .submit-variant-id').val(variantID);

    element.addClass('selected');
    element.find("input[type='radio']").prop('checked', true);

    togglePurchaseType(element, isSubscription);
    updateVariantImage(element);
  }

  function updateVariantImage(element) {
    {% if variantsAmount > 1 %}
      {% if isSlideOnLoad %}
        let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
        window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
      {% else %}
        if (window.hasInitialImageUpdateHappened) {
          let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
          window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
        }
        window.hasInitialImageUpdateHappened = true;
      {% endif %}
    {% endif %}
  }

  function handleMainButtonClick(event, button) {
    event.preventDefault();

    {% if buyType == 'buy_now' %}
      let subscriptionPlanID = $('#product-actions-{{ SID }} .purchase-option-box.selected').data('subscription-selling-plan-id');
      buyButtonHandler(subscriptionPlanID, button);
    {% else %}
      button.closest('form').submit();
    {% endif %}
  }

  function buyButtonHandler(subscription_selling_plan_id, buttonElement) {
    const selectedBox = $('#product-actions-{{ SID }} .purchase-option-box.selected');
    toggleButtonLoading(buttonElement, true);

    if (isSubscriptionSelected()) {
      let variant_id = selectedBox.data('original-variant');
      buySubscription(variant_id, 1, subscription_selling_plan_id);
    } else {
      let variant_id = selectedBox.data('variant');
      let dc = buttonElement.closest('.purchase-option-box').data('dc');
      redirectToCheckout(variant_id, dc);
    }
  }

  function toggleButtonLoading(buttonElement, isLoading) {
    let loader = buttonElement.find('.loading-overlay__spinner');
    let buttonText = buttonElement.find('.button-text');

    if (loader.length === 0) {
      console.error("Loader element not found");
      return;
    }

    if (isLoading) {
      loader.show();
      buttonText.hide();
    } else {
      loader.hide();
      buttonText.show();
    }
  }

  function redirectToCheckout(variant_id, dc) {
    let checkoutLink = `https://${location.hostname}/cart/${variant_id}:1`;
    if (dc) {
      checkoutLink += "?discount=" + atob(dc);
    }
    window.location.href = checkoutLink;
  }

  function buySubscription(variant_id, qty, selling_plan) {
    clearCart(function() {
      let data = {
        "id": variant_id,
        "quantity": qty,
        "selling_plan": selling_plan
      };

      jQuery.ajax({
        type: 'POST',
        url: '/cart/add.js',
        data: data,
        dataType: 'json',
        success: function() {
          console.log('Item added to cart successfully');
          window.location.href = '/checkout';
        },
        error: function() {
          console.log('Failed to add item to cart');
          toggleButtonLoading(buttonElement, false);
        }
      });
    });
  }

  function clearCart(callback) {
    jQuery.ajax({
      type: 'POST',
      url: '/cart/clear.js',
      success: function() {
        console.log('Cart cleared');
        callback();
      },
      error: function() {
        console.log('Failed to clear cart');
      }
    });
  }

  // Event Listeners
  $productActions.on('click', '.purchase-type button', function(event) {
    event.preventDefault();
    const isSubscription = $(this).hasClass('subscription');

    $('#product-actions-{{ SID }} .purchase-type button').removeClass('selected');
    $(this).addClass('selected');

    $purchaseOptionBoxes.each(function() {
      togglePurchaseType($(this), isSubscription);
    });
  });

  $productActions.on('click', '.purchase-option-box', function(event) {
    event.preventDefault();
    togglePurchaseBox($(this));
  });

  $productActions.on('click', '.checkout-button.subscription, .add-to-cart-button.buy-once, .submit-wrap button.main-btn', function(event) {
    handleMainButtonClick(event, $(this));
  });

  // Initialize
  initializePurchaseOptions();
});
</script>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;

    &.selected {
      color: white !important;
    }

    &:not(.selected) {
      background: var(--primary-color-light);
      border: 1px solid var(--primary-color);

      .subscription-details {
        color: var(--primary-color-dark);
      }
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
      display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
      cursor: pointer;
      width: 19px;
      height: 19px;
      border: 1px solid var(--primary-color);
      border-radius: 50%;
      position: relative;
  }

  /* This will only apply the style when the variant box is selected and the radio button is checked */
  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
      content: '\2713';
      position: absolute;
      top: -2px;
      left: -2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary-color);
      text-align: center;
      line-height: 22px;
      color: #fff;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;

    @media (width < 768px) {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid #cbcbcb;
    cursor: pointer;
    max-height: 72px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;

    &:hover {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    }

    &.selected {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      background-color: #EBF1F3;
      border-width: 3px;
      max-height: max-content;
    }

    &[inert] {
      max-height: 72px !important;
      background: #ededed;
      opacity: 0.6;

      .option-title {
        color: grey;
      }
    }

    @media (width < 1270px) {
      width: 100%;
    }

    @media (width < 768px) {
      font-size: 4vw;
    }

    .save-title {
      background-color: var(--orange);
      font-weight: bold;
    }

    .radio-box {
      align-items: center;
      display: flex;

      @media (width < 768px) {
        padding: 3vw 0;
      }
    }

    .top-wrapper {
      min-height: 36px;
    }

    .price-wrapper {
      min-width: 5rem;

      .total-price {
        color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
      }
    }
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }
</style>