{"version":3,"file":"quiz-telemedicine.js","sources":["../../src/js/components/quiz-telemedicine.js"],"sourcesContent":["/**\r\n * Telemedicine Workflow Module\r\n * Handles HIPAA-compliant dietitian workflow orchestration and status polling\r\n */\r\n\r\nexport class TelemedicineWorkflow {\r\n\tconstructor(container, responses) {\r\n\t\tthis.container = container;\r\n\t\tthis.responses = responses;\r\n\r\n\t\t// Workflow state\r\n\t\tthis.eligibilityWorkflowPromise = null;\r\n\t\tthis.eligibilityWorkflowResult = null;\r\n\t\tthis.eligibilityWorkflowError = null;\r\n\t\tthis.userCreationWorkflowPromise = null;\r\n\t\tthis.statusPollingInterval = null;\r\n\t\tthis.statusTrackingId = null;\r\n\r\n\t\t// Test mode\r\n\t\tthis.isTestMode = this.container.hasAttribute(\"data-test-mode\");\r\n\t}\r\n\r\n\tasync startWorkflow() {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"üöÄ Starting telemedicine workflow orchestration\");\r\n\r\n\t\t\t// Show initial loading\r\n\t\t\tthis._showLoadingScreen();\r\n\r\n\t\t\t// Start the orchestrator workflow\r\n\t\t\tconst result = await this._startOrchestratorWorkflow();\r\n\r\n\t\t\tconsole.log(\"‚úÖ Workflow orchestration completed:\", result);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Workflow orchestration failed:\", error);\r\n\t\t\treturn this._handleWorkflowError(error);\r\n\t\t}\r\n\t}\r\n\r\n\tasync _startOrchestratorWorkflow() {\r\n\t\tconst url = this._getOrchestratorUrl();\r\n\t\tconst payload = this._buildWorkflowPayload();\r\n\r\n\t\tconsole.log(\"üì§ Submitting workflow to orchestrator:\", { url, payload });\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await this._submitOrchestratorToWebhook(url, payload);\r\n\r\n\t\t\tif (result.statusTrackingId) {\r\n\t\t\t\tthis.statusTrackingId = result.statusTrackingId;\r\n\t\t\t\tconsole.log(\"üìã Starting status polling with ID:\", this.statusTrackingId);\r\n\t\t\t\tthis._startStatusPolling(this.statusTrackingId);\r\n\t\t\t}\r\n\r\n\t\t\treturn this._handleWorkflowCompletion(result);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Orchestrator workflow submission failed:\", error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t_buildWorkflowPayload() {\r\n\t\tconst formData = this._collectFormData();\r\n\t\tconst insuranceData = this._collectInsuranceData();\r\n\r\n\t\treturn {\r\n\t\t\tresponses: this.responses,\r\n\t\t\tformData: formData,\r\n\t\t\tinsuranceData: insuranceData,\r\n\t\t\thasInsurance: this._hasInsurance(),\r\n\t\t\tmetadata: {\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t\tuserAgent: navigator.userAgent,\r\n\t\t\t\treferrer: document.referrer || \"direct\",\r\n\t\t\t\ttestMode: this.isTestMode\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t_collectFormData() {\r\n\t\tconst formData = {};\r\n\r\n\t\tthis.responses.forEach((stepResponses, stepIndex) => {\r\n\t\t\tObject.entries(stepResponses).forEach(([questionId, response]) => {\r\n\t\t\t\t// Map common form fields\r\n\t\t\t\tconst fieldMappings = {\r\n\t\t\t\t\t\"first-name\": \"firstName\",\r\n\t\t\t\t\t\"last-name\": \"lastName\",\r\n\t\t\t\t\temail: \"email\",\r\n\t\t\t\t\tphone: \"phone\",\r\n\t\t\t\t\taddress: \"address\",\r\n\t\t\t\t\tcity: \"city\",\r\n\t\t\t\t\tstate: \"state\",\r\n\t\t\t\t\tzip: \"zipCode\",\r\n\t\t\t\t\t\"date-of-birth\": \"dateOfBirth\"\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst mappedField = fieldMappings[questionId] || questionId;\r\n\t\t\t\tformData[mappedField] = response;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn formData;\r\n\t}\r\n\r\n\t_collectInsuranceData() {\r\n\t\tconst insuranceData = {};\r\n\r\n\t\tthis.responses.forEach(stepResponses => {\r\n\t\t\tObject.entries(stepResponses).forEach(([questionId, response]) => {\r\n\t\t\t\tif (questionId.includes(\"insurance\") || questionId.includes(\"coverage\")) {\r\n\t\t\t\t\tinsuranceData[questionId] = response;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn insuranceData;\r\n\t}\r\n\r\n\t_hasInsurance() {\r\n\t\treturn this._getResponseValue(\"has-insurance\") === \"yes\" || this._getResponseValue(\"insurance-status\") === \"yes\";\r\n\t}\r\n\r\n\t_getResponseValue(questionId) {\r\n\t\tfor (const stepResponses of this.responses) {\r\n\t\t\tif (stepResponses[questionId] !== undefined) {\r\n\t\t\t\treturn stepResponses[questionId];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tasync _submitOrchestratorToWebhook(url, payload) {\r\n\t\tconst response = await fetch(url, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAccept: \"application/json\"\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(payload)\r\n\t\t});\r\n\r\n\t\tif (!response.ok) {\r\n\t\t\tconst errorText = await response.text();\r\n\t\t\tconsole.error(\"Orchestrator submission failed:\", {\r\n\t\t\t\tstatus: response.status,\r\n\t\t\t\tstatusText: response.statusText,\r\n\t\t\t\tbody: errorText\r\n\t\t\t});\r\n\t\t\tthrow new Error(`Orchestrator submission failed: ${response.status} ${response.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst result = await response.json();\r\n\t\tconsole.log(\"üì® Orchestrator response received:\", result);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t_getOrchestratorUrl() {\r\n\t\t// Try to get URL from data attribute first\r\n\t\tconst orchestratorUrl = this.container?.dataset?.orchestratorUrl;\r\n\r\n\t\tif (orchestratorUrl) {\r\n\t\t\tconsole.log(\"üîó Using orchestrator URL from data attribute:\", orchestratorUrl);\r\n\t\t\treturn orchestratorUrl;\r\n\t\t}\r\n\r\n\t\t// Fallback to hardcoded URL (for development/testing)\r\n\t\tconst fallbackUrl = \"https://workflow-orchestrator-xxn52lyizq-uc.a.run.app\";\r\n\t\tconsole.log(\"üîó Using fallback orchestrator URL:\", fallbackUrl);\r\n\t\treturn fallbackUrl;\r\n\t}\r\n\r\n\t_startStatusPolling(statusTrackingId) {\r\n\t\tif (this.statusPollingInterval) {\r\n\t\t\tclearInterval(this.statusPollingInterval);\r\n\t\t}\r\n\r\n\t\t// Start polling immediately, then every 3 seconds\r\n\t\tthis._pollWorkflowStatus();\r\n\t\tthis.statusPollingInterval = setInterval(() => {\r\n\t\t\tthis._pollWorkflowStatus();\r\n\t\t}, 3000);\r\n\r\n\t\t// Stop polling after 5 minutes to prevent infinite polling\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis._stopStatusPolling();\r\n\t\t}, 300000);\r\n\t}\r\n\r\n\tasync _pollWorkflowStatus() {\r\n\t\tif (!this.statusTrackingId) return;\r\n\r\n\t\ttry {\r\n\t\t\tconst url = this._getStatusPollingUrl();\r\n\t\t\tconst response = await fetch(`${url}?statusTrackingId=${this.statusTrackingId}`, {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAccept: \"application/json\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tconsole.warn(\"Status polling request failed:\", response.status);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst statusData = await response.json();\r\n\t\t\tconsole.log(\"üìä Status polling response:\", statusData);\r\n\r\n\t\t\tthis._updateWorkflowStatus(statusData);\r\n\r\n\t\t\t// Check if workflow is complete\r\n\t\t\tif (statusData.completed || statusData.error) {\r\n\t\t\t\tthis._stopStatusPolling();\r\n\r\n\t\t\t\tif (statusData.error) {\r\n\t\t\t\t\tthrow new Error(statusData.error);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Status polling error:\", error);\r\n\t\t\t// Don't stop polling for network errors, but log them\r\n\t\t}\r\n\t}\r\n\r\n\t_updateWorkflowStatus(statusData) {\r\n\t\t// Update loading progress if available\r\n\t\tif (statusData.progress !== undefined) {\r\n\t\t\tthis._updateLoadingProgress(statusData.progress);\r\n\t\t}\r\n\r\n\t\t// Update status message if available\r\n\t\tif (statusData.message) {\r\n\t\t\tthis._updateLoadingStep(statusData.message);\r\n\t\t}\r\n\r\n\t\t// Store latest status data\r\n\t\tthis.latestStatusData = statusData;\r\n\t}\r\n\r\n\t_stopStatusPolling() {\r\n\t\tif (this.statusPollingInterval) {\r\n\t\t\tclearInterval(this.statusPollingInterval);\r\n\t\t\tthis.statusPollingInterval = null;\r\n\t\t\tconsole.log(\"‚èπÔ∏è Status polling stopped\");\r\n\t\t}\r\n\t}\r\n\r\n\t_getStatusPollingUrl() {\r\n\t\t// Try to get URL from data attribute first\r\n\t\tconst statusPollingUrl = this.container?.dataset?.statusPollingUrl;\r\n\r\n\t\tif (statusPollingUrl) {\r\n\t\t\tconsole.log(\"üîó Using status polling URL from data attribute:\", statusPollingUrl);\r\n\t\t\treturn statusPollingUrl;\r\n\t\t}\r\n\r\n\t\t// Fallback to hardcoded URL\r\n\t\tconst fallbackUrl = \"https://workflow-status-polling-xxn52lyizq-uc.a.run.app\";\r\n\t\tconsole.log(\"üîó Using fallback status polling URL:\", fallbackUrl);\r\n\t\treturn fallbackUrl;\r\n\t}\r\n\r\n\t_updateLoadingProgress(progress) {\r\n\t\tconst progressBar = this.container.querySelector(\".quiz-loading-progress-bar\");\r\n\t\tif (progressBar) {\r\n\t\t\tprogressBar.style.width = `${Math.min(progress, 100)}%`;\r\n\t\t}\r\n\r\n\t\tconst progressText = this.container.querySelector(\".quiz-loading-progress-text\");\r\n\t\tif (progressText) {\r\n\t\t\tprogressText.textContent = `${Math.round(progress)}%`;\r\n\t\t}\r\n\t}\r\n\r\n\t_updateLoadingStep(step) {\r\n\t\tconst stepElement = this.container.querySelector(\".quiz-loading-step\");\r\n\t\tif (stepElement) {\r\n\t\t\tstepElement.textContent = step;\r\n\t\t}\r\n\t}\r\n\r\n\t_showLoadingScreen() {\r\n\t\tconst loadingElement = this.container.querySelector(\".quiz-loading\");\r\n\t\tif (loadingElement) {\r\n\t\t\tloadingElement.style.display = \"block\";\r\n\t\t}\r\n\r\n\t\t// Hide other sections\r\n\t\tconst questionsElement = this.container.querySelector(\".quiz-questions\");\r\n\t\tif (questionsElement) {\r\n\t\t\tquestionsElement.style.display = \"none\";\r\n\t\t}\r\n\r\n\t\tthis._showComprehensiveLoadingSequence();\r\n\t}\r\n\r\n\tasync _showComprehensiveLoadingSequence() {\r\n\t\tconst steps = [\r\n\t\t\t{ text: \"Processing your responses...\", duration: 2000 },\r\n\t\t\t{ text: \"Checking insurance eligibility...\", duration: 3000 },\r\n\t\t\t{ text: \"Creating your profile...\", duration: 2500 },\r\n\t\t\t{ text: \"Scheduling your consultation...\", duration: 3000 },\r\n\t\t\t{ text: \"Finalizing your appointment...\", duration: 2000 }\r\n\t\t];\r\n\r\n\t\tfor (let i = 0; i < steps.length; i++) {\r\n\t\t\tconst step = steps[i];\r\n\t\t\tthis._updateLoadingStep(step.text);\r\n\t\t\tthis._updateLoadingProgress(((i + 1) / steps.length) * 80); // Cap at 80% during sequence\r\n\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, step.duration));\r\n\t\t}\r\n\t}\r\n\r\n\t_handleWorkflowCompletion(result) {\r\n\t\tconsole.log(\"‚úÖ Workflow completed successfully:\", result);\r\n\r\n\t\t// Process the result and return structured data\r\n\t\treturn {\r\n\t\t\tsuccess: true,\r\n\t\t\teligibilityStatus: result.eligibilityStatus || \"eligible\",\r\n\t\t\tisEligible: result.isEligible !== false,\r\n\t\t\tschedulingData: result.schedulingData,\r\n\t\t\tmessage: result.message || \"Your appointment request has been processed successfully!\",\r\n\t\t\tstatusTrackingId: result.statusTrackingId\r\n\t\t};\r\n\t}\r\n\r\n\t_handleWorkflowError(error) {\r\n\t\tconsole.error(\"‚ùå Workflow error:\", error);\r\n\r\n\t\t// Determine error type and create appropriate response\r\n\t\tlet errorType = \"general\";\r\n\t\tlet errorMessage = \"We're experiencing technical difficulties. Please try again or contact support.\";\r\n\r\n\t\tif (error.message?.includes(\"validation\")) {\r\n\t\t\terrorType = \"validation\";\r\n\t\t\terrorMessage = \"Please check your information and try again.\";\r\n\t\t} else if (error.message?.includes(\"duplicate\")) {\r\n\t\t\terrorType = \"duplicate\";\r\n\t\t\terrorMessage = \"It looks like you already have an appointment scheduled.\";\r\n\t\t} else if (error.message?.includes(\"eligibility\")) {\r\n\t\t\terrorType = \"eligibility\";\r\n\t\t\terrorMessage = \"We're having trouble verifying your insurance. Our team will contact you within 24 hours.\";\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsuccess: false,\r\n\t\t\terror: true,\r\n\t\t\terrorType: errorType,\r\n\t\t\terrorMessage: errorMessage,\r\n\t\t\teligibilityStatus: \"processing\",\r\n\t\t\tisEligible: false\r\n\t\t};\r\n\t}\r\n\r\n\t// Method to create mock processing status (for fallback scenarios)\r\n\t_createProcessingEligibilityData() {\r\n\t\treturn {\r\n\t\t\tsuccess: true,\r\n\t\t\teligibilityStatus: \"processing\",\r\n\t\t\tisEligible: true,\r\n\t\t\tmessage: \"Your request is being processed. Our team will contact you within 24 hours to schedule your appointment.\",\r\n\t\t\trequiresManualReview: true\r\n\t\t};\r\n\t}\r\n\r\n\t// Method to process webhook results\r\n\t_processWebhookResult(webhookResult) {\r\n\t\tif (!webhookResult) {\r\n\t\t\treturn this._createProcessingEligibilityData();\r\n\t\t}\r\n\r\n\t\t// Handle different response formats\r\n\t\tif (webhookResult.eligibilityStatus) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: !webhookResult.error,\r\n\t\t\t\teligibilityStatus: webhookResult.eligibilityStatus,\r\n\t\t\t\tisEligible: webhookResult.isEligible !== false,\r\n\t\t\t\tschedulingData: webhookResult.schedulingData,\r\n\t\t\t\tmessage: webhookResult.message,\r\n\t\t\t\terrorType: webhookResult.errorType,\r\n\t\t\t\terrorMessage: webhookResult.errorMessage\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Legacy format support\r\n\t\treturn {\r\n\t\t\tsuccess: true,\r\n\t\t\teligibilityStatus: \"eligible\",\r\n\t\t\tisEligible: true,\r\n\t\t\tmessage: \"Your appointment request has been processed successfully!\"\r\n\t\t};\r\n\t}\r\n\r\n\t// Cleanup method\r\n\tcleanup() {\r\n\t\tthis._stopStatusPolling();\r\n\t\tthis.eligibilityWorkflowPromise = null;\r\n\t\tthis.eligibilityWorkflowResult = null;\r\n\t\tthis.eligibilityWorkflowError = null;\r\n\t\tthis.userCreationWorkflowPromise = null;\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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"}