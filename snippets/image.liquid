{% comment %}
  Optimized Shopify CDN Responsive Image Component

  Accepts:
  - image: The main image object (required)
  - mobile_image: An optional image object for mobile devices
  - sizes: Custom sizes attribute (optional, default provided)
  - breakpoint: Custom breakpoint in pixels (optional, default: 768)
  - lazy: Enable lazy loading (optional, default: true)
  - alt: Alt text for the image (required for accessibility)
  - class: Additional CSS classes (optional)

  Usage:
  {% render 'shopify-cdn-image',
    image: product.featured_image,
    mobile_image: product.images[1],
    sizes: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw',
    breakpoint: 768,
    lazy: true,
    alt: product.title,
    class: 'my-custom-class'
  %}
{% endcomment %}

{%- liquid
  assign desktop_image = image
  assign mobile_image = mobile_image | default: image
  assign lazy_load = lazy | default: true
  assign breakpoint = breakpoint | default: 768
  assign sizes = sizes | default: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw'

  assign widths = '375,750,1080,1500,2200,3000'
  assign widths_array = widths | split: ','

  assign unique_id = 'img-' | append: desktop_image.id | append: '-' | append: mobile_image.id

  assign desktop_width = desktop_image.width
  assign desktop_height = desktop_image.height
  assign mobile_width = mobile_image.width
  assign mobile_height = mobile_image.height

  # Automatically detect and adjust for 2x images
  if desktop_image.src contains '2x'
    assign desktop_width = desktop_width | divided_by: 2
    assign desktop_height = desktop_height | divided_by: 2
  endif
  if mobile_image.src contains '2x'
    assign mobile_width = mobile_width | divided_by: 2
    assign mobile_height = mobile_height | divided_by: 2
  endif

  # Calculate aspect ratio for padding-bottom trick
  assign aspect_ratio = desktop_height | divided_by: desktop_width | times: 100 | append: '%'
-%}

<div class="responsive-image-wrapper" style="padding-bottom: {{ aspect_ratio }}; background-color: {{ desktop_image.dominant_color | default: '#f0f0f0' }};">
  <picture>
    <source
      type="image/webp"
      media="(max-width: {{ breakpoint }}px)"
      srcset="
        {%- for width in widths_array -%}
          {{ mobile_image | image_url: width: width, format: 'webp' }} {{ width }}w{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >
    <source
      type="image/webp"
      media="(min-width: {{ breakpoint | plus: 1 }}px)"
      srcset="
        {%- for width in widths_array -%}
          {{ desktop_image | image_url: width: width, format: 'webp' }} {{ width }}w{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >
    <source
      media="(max-width: {{ breakpoint }}px)"
      srcset="
        {%- for width in widths_array -%}
          {{ mobile_image | image_url: width: width }} {{ width }}w{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >
    <source
      media="(min-width: {{ breakpoint | plus: 1 }}px)"
      srcset="
        {%- for width in widths_array -%}
          {{ desktop_image | image_url: width: width }} {{ width }}w{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >

    <img
      id="{{ unique_id }}"
      src="{{ desktop_image | image_url: width: 40 }}"
      {% if lazy_load %}
        loading="lazy"
        data-src="{{ desktop_image | image_url: width: desktop_width }}"
        data-srcset="{{ desktop_image | image_url: width: desktop_width }} 1x, {{ desktop_image | image_url: width: desktop_width | times: 2 }} 2x"
      {% else %}
        src="{{ desktop_image | image_url: width: desktop_width }}"
        srcset="{{ desktop_image | image_url: width: desktop_width }} 1x, {{ desktop_image | image_url: width: desktop_width | times: 2 }} 2x"
      {% endif %}
      alt="{{ alt | escape }}"
      width="{{ desktop_width }}"
      height="{{ desktop_height }}"
      class="responsive-image {% if class %}{{ class }}{% endif %}"
    >
  </picture>
</div>

<script>
  // This script should be included once in your theme's JavaScript bundle
  document.addEventListener('DOMContentLoaded', function() {
    if ('IntersectionObserver' in window) {
      var lazyImageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
          if (entry.isIntersecting) {
            var lazyImage = entry.target;
            lazyImage.src = lazyImage.dataset.src;
            lazyImage.srcset = lazyImage.dataset.srcset;
            lazyImage.classList.add('loaded');
            lazyImageObserver.unobserve(lazyImage);
          }
        });
      }, {
        rootMargin: '0px 0px 300px 0px'
      });

      document.querySelectorAll('img.responsive-image[data-src]').forEach(function(lazyImage) {
        lazyImageObserver.observe(lazyImage);
      });
    } else {
      // Fallback for browsers that don't support IntersectionObserver
      document.querySelectorAll('img.responsive-image[data-src]').forEach(function(img) {
        img.src = img.dataset.src;
        img.srcset = img.dataset.srcset;
        img.classList.add('loaded');
      });
    }
  });
</script>

<style>
  .responsive-image-wrapper {
    position: relative;
    width: 100%;
    height: 0; /* Height will be determined by padding-bottom */
    overflow: hidden;
  }
  .responsive-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  .responsive-image.loaded {
    opacity: 1;
  }
</style>