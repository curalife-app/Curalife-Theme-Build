{% assign referenced_variant_product = prod %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}" data-default-variant-index="{{ defaultSelectionIndex }}">
  <div class="purchase-options flex flex-col gap-2">
    {% for block in blocks %}
      {% assign referenced_variant = blank %}
      {% assign blockVarID = block.settings.variant_id | plus: 0 %}
      {% for vari in referenced_variant_product.variants %}
        {% assign currVarID = vari.id | plus: 0 %}
        {% if currVarID == blockVarID %}
          {% assign referenced_variant = vari %}
        {% endif %}
      {% endfor %}

      {% if block.type == 'variant' %}
          {% render 'product-cta-section-actions-variant-2024-new-4',
            SID: SID,
            prod: referenced_variant_product,
            var: referenced_variant,
            buyBoxColor: block.settings.box_color,
            pricePer: pricePer,
            saveFormat: saveFormat,
            badgeText: block.settings.badge_text,
            variantTitle: block.settings.title,
            index: forloop.index,
            purchase_type: block.settings.purchase_type,
            buyType: buyType,
          %}
      {% endif %}
    {% endfor %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% assign buttonSID = SID | append: '-checkout' %}
        {% render 'buy-buttons-new-4', SID: buttonSID, product: prod, variant: '', buttonText: "Add to Cart", selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productActions = document.getElementById('product-actions-{{ SID }}');
    const SID = productActions.id.split('-').pop();
    const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
    const submitButton = productActions.querySelector('.checkout-button button');
    const submitSellingPlanIdInput = document.querySelector('.submit-selling-plan-id');
    const submitVariantIdInput = document.querySelector('.submit-variant-id');

    const state = {
      selectedBox: null,
    };

    function togglePurchaseBox(element) {
      if (!element) return;

      // Remove selected class and uncheck radio from all boxes
      purchaseOptionBoxes.forEach(box => {
        box.classList.remove('selected');
        const radio = box.querySelector('input[type="radio"]');
        if (radio) {
          radio.checked = false;
        }
      });

      const isSubscription = element.getAttribute('data-purchase-type') === 'subscribe';
      const subscriptionPlanID = isSubscription ? element.getAttribute('data-subscription-selling-plan-id') : '';
      const variantID = element.getAttribute('data-variant');
      const buyType = element.getAttribute('data-buy-type');

      if (submitSellingPlanIdInput) {
        submitSellingPlanIdInput.value = subscriptionPlanID;
      }
      if (submitVariantIdInput) {
        submitVariantIdInput.value = variantID;
      }

      // Add selected class and check radio of clicked box
      element.classList.add('selected');
      const radioInput = element.querySelector('input[type="radio"]');
      if (radioInput) {
        radioInput.checked = true;
      }

      state.selectedBox = element;
      updateSubmitButtonText(isSubscription, buyType);
    }

    function updateSubmitButtonText(isSubscription, buyType) {
      const buttonText = submitButton.querySelector('.button-text');
      if (buttonText) {
        if (isSubscription) {
          buttonText.textContent = "Subscribe Now";
        } else if (buyType === 'buy_now') {
          buttonText.textContent = "Buy Now";
        } else {
          buttonText.textContent = "Add to Cart";
        }
      }
    }

    function initializePurchaseOptions() {
      const defaultVariantIndex = parseInt(productActions.getAttribute('data-default-variant-index')) || 0;
      const defaultBox = purchaseOptionBoxes[defaultVariantIndex - 1] || purchaseOptionBoxes[0];

      if (defaultBox) {
        togglePurchaseBox(defaultBox);
      }
    }

    // Handle clicks on the purchase option box
    productActions.addEventListener('click', (event) => {
      // Check if clicked on radio input or its parent
      const radioInput = event.target.closest('input[type="radio"]');
      const purchaseOptionBox = event.target.closest('.purchase-option-box');

      if (radioInput) {
        // If radio input was clicked, find its parent purchase option box
        const parentBox = radioInput.closest('.purchase-option-box');
        if (parentBox) {
          event.preventDefault(); // Prevent default radio behavior
          togglePurchaseBox(parentBox);
        }
      } else if (purchaseOptionBox) {
        // If purchase option box was clicked
        event.preventDefault();
        togglePurchaseBox(purchaseOptionBox);
      }
    });

    // Add change event listener for radio inputs
    productActions.addEventListener('change', (event) => {
      if (event.target.type === 'radio') {
        const parentBox = event.target.closest('.purchase-option-box');
        if (parentBox) {
          togglePurchaseBox(parentBox);
        }
      }
    });

    initializePurchaseOptions();
  });
</script>

<style>
  /* Product Actions Styles */
  .product-actions {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 90%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
    --radio-size: 1em;
    --radio-size-mobile: 1.5em;
    --transition-speed: 0.4s;

    /* Base styles */
    &:not(.with-animation) .purchase-option-box {
      max-height: none !important;
      transition: none !important;
    }
  }

  /* Radio Input Component */
  .radio-input {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;

    input[type='radio'] {
      appearance: none;
      width: var(--radio-size);
      height: var(--radio-size);
      background-color: #636363;
      box-shadow: inset 2px 5px 10px rgb(5, 5, 5);
      border-radius: 50%;
      transition: transform var(--transition-speed) ease-in-out;
      margin: 0;
      position: relative;
      z-index: 1;

      &:hover,
      .purchase-option-box:hover & {
        transform: scale(1.2);
        cursor: pointer;
      }

      &:checked {
        border: 1px solid var(--orange);

        & + .circle {
          transform: rotate(360deg);
          scale: 1;
        }
      }
    }

    .circle {
      position: absolute;
      width: calc(var(--radio-size) * 0.6);
      height: calc(var(--radio-size) * 0.6);
      background-color: var(--orange);
      scale: 0;
      border-radius: 50%;
      transition: all var(--transition-speed) ease-in-out;
      pointer-events: none;
      z-index: 2;
    }
  }

  /* Purchase Option Box */
  .purchase-option-box {
    --box-padding: 1rem;
    --box-max-height: 72px;

    background: #fff;
    border: 1px solid var(--primary-color);
    border-radius: 10px;
    cursor: pointer;
    max-height: var(--box-max-height);
    padding: var(--box-padding);
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: all var(--transition-speed) ease-in-out;

    &:hover {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    }

    &.selected {
      background-color: var(--primary-color-light);
      max-height: max-content;
    }

    &[inert] {
      max-height: var(--box-max-height) !important;
      background: #ededed;
      opacity: 0.6;

      .option-title {
        color: grey;
      }
    }
  }

  /* Responsive Styles */
  @media (max-width: 767px) {
    .product-actions {
      --radio-size: var(--radio-size-mobile);
      --box-padding: 3vw;
      --box-max-height: 16vw;
    }

    .purchase-option-box {
      font-size: 4vw;

      .option-title {
        font-size: 3.9vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .terms {
        .subtitle,
        .terms-title {
          font-size: 3.5vw;
        }
      }
    }
  }
</style>