{% assign totalOriginalPrice = 0 %}
{% assign totalSavings = 0 %}

<script>
  const variantCompareAtPrices = {
    {% for item in cart.items %}
      "{{ item.variant.id }}": {{ item.variant.compare_at_price | default: item.price }}{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };
  console.log('variantCompareAtPrices:', variantCompareAtPrices);
</script>

<div class="cart">
  <div class="loading-spinner" id="loadingSpinner" style="display: none;">
    <div class="spinner"></div>
  </div>

  <div class="cart-header">
    <h1>Shopping Cart</h1>
    <a href="{{ routes.all_products_collection_url }}" class="continue-shopping">Continue Shopping</a>
  </div>

  {% if cart == empty %}
    <div class="cart-empty">
      <h2>Your cart is empty</h2>
      <a href="{{ routes.all_products_collection_url }}" class="checkout-button">Start Shopping</a>
    </div>
  {% else %}
    <div class="cart-content">
      <div class="cart-items">
        {% for item in cart.items %}
          <div class="cart-item" id="CartItem-{{ item.key }}">
            <img src="{{ item.image | img_url: 'medium' }}" alt="{{ item.title }}" class="item-image">

            <div class="item-details">
              <h3>{{ item.product.title }}</h3>
              {% if item.options_with_values.size > 0 %}
                <div class="item-options">
                  {% for option in item.options_with_values %}
                    {{ option.name }}: {{ option.value }}{% unless forloop.last %}, {% endunless %}
                  {% endfor %}
                </div>
              {% endif %}
              {% if item.selling_plan_allocation %}
                <div class="selling-plan-name">
                  {{ item.selling_plan_allocation.selling_plan.name }}
                </div>
              {% endif %}

							{% if item.title contains 'Free' %}
								{% assign isFreeItem = true %}
							{% endif %}

							<!-- Quantity Selector: Only show if no selling plan and title doesn't contain 'Free' -->
              {% if item.selling_plan_allocation == nil and isFreeItem != true %}
                <div class="quantity-input quantity-selector">
                  <button type="button" class="quantity-btn" data-action="decrease-quantity">âˆ’</button>
                  <input type="number"
                    name="updates[]"
                    value="{{ item.quantity }}"
                    min="0"
                    aria-label="Quantity for {{ item.title | escape }}"
                    data-item-key="{{ item.key }}">
                  <button type="button" class="quantity-btn" data-action="increase-quantity">+</button>
                </div>
              {% endif %}

              <a href="/cart/change?line={{ forloop.index }}&quantity=0" class="remove-item" data-item-key="{{ item.key }}">Remove</a>
            </div>

						{% assign lineItemCAP = item.variant.compare_at_price | times: item.quantity %}
						{% assign lineItemPrice = item.price | times: item.quantity %}
						{% assign lineItemSaving = lineItemCAP | minus: lineItemPrice %}
						{% assign totalOriginalPrice = totalOriginalPrice | plus: lineItemPrice %}
						{% if item.variant.compare_at_price and item.variant.compare_at_price > item.price %}
							{% assign totalSavings = totalSavings | plus: lineItemSaving %}
						{% endif %}
            <div class="item-price text-[--primary]"
								data-line-cap="{{ lineItemCAP }}"
								data-variant-cap="{{ item.variant.compare_at_price }}"
								data-unit-price="{{ item.price }}">
							{{ lineItemPrice | money }}

							{% if item.variant.compare_at_price and item.variant.compare_at_price > item.price %}
								<div class="compare-at-price">{{ lineItemCAP | money }}</div>
							{% endif %}
						</div>
          </div>
        {% endfor %}
      </div>

      <div class="cart-summary">
        <div class="summary-row">
          <span>Subtotal</span>
          <span data-cart-subtotal>{{ totalOriginalPrice | plus: totalSavings | money }}</span>
        </div>

        {% if totalSavings > 0 %}
					<div class="summary-row" data-discount-row>
						<span>Discounts</span>
						<span data-discount-amount>-{{ totalSavings | money }}</span>
					</div>
				{% endif %}

        <div class="summary-row summary-total">
          <span>Total</span>
          <span data-cart-total>{{ cart.total_price | money }}</span>
        </div>

        <a href="/checkout" class="checkout-button">Proceed to Checkout</a>
      </div>
    </div>
  {% endif %}
</div>

<script>
// Cart Management System
var moneyFormat = window.shop?.moneyFormat || '${{amount}}';

function formatMoney(cents, inputFormat) {
  try {
    // Ensure cents is an integer
    cents = parseInt(cents, 10) || 0;
    let format = inputFormat || moneyFormat;

    function formatWithDelimiters(number, precision, thousands, decimal) {
      thousands = thousands || ',';
      decimal = decimal || '.';

      if (isNaN(number) || number === null) {
        return '0';
      }

      number = (number / Math.pow(10, precision)).toFixed(precision);
      var parts = number.split('.');
      var dollarsAmount = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousands);
      var centsAmount = parts[1] ? decimal + parts[1] : '';

      return dollarsAmount + centsAmount;
    }

    // Validate and sanitize format
    if (!format || typeof format !== 'string') {
      format = '${{amount}}';
    }

    // Find format match with more robust regex
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var match = format.match(placeholderRegex);

    // If no match, return formatted amount with default format
    if (!match || !match[1]) {
      return '$' + formatWithDelimiters(cents, 2);
    }

    var value;
    switch (match[1]) {
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount':
      default:
        value = formatWithDelimiters(cents, 2);
    }

    return format.replace(placeholderRegex, value);
  } catch (error) {
    console.error('Error formatting money:', error);
    // Return a fallback formatted value instead of generic $0.00
    return '$' + ((parseInt(cents, 10) || 0) / 100).toFixed(2);
  }
}

function updateCartTotals(cart) {
  try {
    if (!cart || !Array.isArray(cart.items)) {
      console.error('Invalid cart object:', cart);
      return;
    }

    let totalOriginalPrice = 0;
    let totalSavings = 0;

    cart.items.forEach(item => {
      try {
        if (!item || typeof item !== 'object') return;

        const variantId = item.variant_id?.toString();
        const itemPrice = item.price || 0;
        const itemQuantity = item.quantity || 0;
        const variantCap = parseInt(window.variantCompareAtPrices?.[variantId], 10) || itemPrice;
        const originalLinePrice = variantCap * itemQuantity;
        const finalLinePrice = item.final_line_price || 0;

        totalOriginalPrice += originalLinePrice;
        if (originalLinePrice > finalLinePrice) {
          totalSavings += originalLinePrice - finalLinePrice;
        }
      } catch (error) {
        console.error('Error processing cart item:', error, item);
      }
    });

    // Update subtotal with error handling
    const subtotalElement = document.querySelector('[data-cart-subtotal]');
    if (subtotalElement) {
      subtotalElement.textContent = formatMoney(totalOriginalPrice);
    }

    // Update discount row with error handling
    const discountRow = document.querySelector('.summary-row[data-discount-row]');
    if (discountRow) {
      if (totalSavings > 0) {
        const discountAmount = discountRow.querySelector('span:last-child');
        if (discountAmount) {
          discountAmount.textContent = '-' + formatMoney(totalSavings);
        }
        discountRow.style.display = 'flex';
      } else {
        discountRow.style.display = 'none';
      }
    }

    // Update final total with error handling
    const totalElement = document.querySelector('[data-cart-total]');
    if (totalElement && typeof cart.total_price !== 'undefined') {
      totalElement.textContent = formatMoney(cart.total_price);
    }

    // Update item count with error handling
    const itemCountElement = document.querySelector('[data-cart-item-count]');
    if (itemCountElement && typeof cart.item_count !== 'undefined') {
      itemCountElement.textContent = cart.item_count;
    }
  } catch (error) {
    console.error('Error updating cart totals:', error);
  }
}

function showLoadingSpinner(container) {
  if (!container) return;

  container.dataset.originalContent = container.innerHTML;
  const spinner = document.createElement('div');
  spinner.className = 'item-spinner';
  spinner.innerHTML = '<div class="spinner"></div>';
  container.innerHTML = '';
  container.appendChild(spinner);
}

function hideLoadingSpinner(container) {
  if (!container || !container.dataset.originalContent) return;

  container.innerHTML = container.dataset.originalContent;
  delete container.dataset.originalContent;
}

function showSummaryLoadingSpinners() {
  const elements = document.querySelectorAll('[data-cart-subtotal], [data-cart-total], [data-discount-amount]');
  elements.forEach(element => {
    element.innerHTML = '<div class="spinner summary-spinner"></div>';
  });
}

function hideSummaryLoadingSpinners() {
  const elements = document.querySelectorAll('[data-cart-subtotal], [data-cart-total], [data-discount-amount]');
  elements.forEach(element => {
    if (element.querySelector('.spinner')) {
      element.innerHTML = '';
    }
  });
}

function updateItemPrice(priceContainer, cartItem) {
  if (!priceContainer || !cartItem) return;

  try {
    const variantId = cartItem.variant_id.toString();
    const variantCap = parseInt(window.variantCompareAtPrices?.[variantId], 10) || cartItem.price;
    const originalLinePrice = variantCap * cartItem.quantity;
    const finalLinePrice = cartItem.final_line_price;

    let priceHtml = formatMoney(finalLinePrice);
    if (variantCap > cartItem.price) {
      priceHtml += `<div class="compare-at-price">${formatMoney(originalLinePrice)}</div>`;
    }

    priceContainer.innerHTML = priceHtml;
  } catch (error) {
    console.error('Error updating item price:', error);
  }
}

function showEmptyCartMessage() {
  const cartContent = document.querySelector('.cart-content');
  const cartEmptyMessage = document.querySelector('.cart-empty');

  if (cartContent && cartEmptyMessage) {
    cartContent.style.display = 'none';
    cartEmptyMessage.style.display = 'block';
  }
}

async function updateQuantity(button, change) {
  const input = button.parentNode.querySelector('input');
  if (!input) return;

  const itemKey = input.getAttribute('data-item-key');
  const currentValue = parseInt(input.value, 10);
  const newValue = currentValue + change;

  if (newValue < 0) return;

  const cartItemElement = button.closest('.cart-item');
  const priceContainer = cartItemElement?.querySelector('.item-price');

  try {
    showLoadingSpinner(priceContainer);
    showSummaryLoadingSpinners();

    const response = await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        id: itemKey,
        quantity: newValue
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const cart = await response.json();

    if (newValue === 0) {
      cartItemElement?.remove();
    } else {
      input.value = newValue;
      const cartItem = cart.items.find(item => item.key === itemKey);
      if (cartItem) {
        updateItemPrice(priceContainer, cartItem);
      }
    }

    updateCartTotals(cart);

    if (cart.item_count === 0) {
      showEmptyCartMessage();
    }
  } catch (error) {
    console.error('Error updating quantity:', error);
  } finally {
    hideLoadingSpinner(priceContainer);
    hideSummaryLoadingSpinners();
  }
}

async function removeItemFromCart(itemKey, link) {
  const cartItemElement = link.closest('.cart-item');
  const priceContainer = cartItemElement?.querySelector('.item-price');

  try {
    showLoadingSpinner(priceContainer);
    showSummaryLoadingSpinners();

    const response = await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        id: itemKey,
        quantity: 0
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const cart = await response.json();
    cartItemElement?.remove();
    updateCartTotals(cart);

    if (cart.item_count === 0) {
      showEmptyCartMessage();
    }
  } catch (error) {
    console.error('Error removing item:', error);
  } finally {
    hideLoadingSpinner(priceContainer);
    hideSummaryLoadingSpinners();
  }
}

// Initialize event listeners when DOM is ready
function initializeCart() {
  // Quantity adjustment buttons
  document.querySelectorAll('.quantity-btn').forEach(button => {
    button.addEventListener('click', function() {
      const change = this.getAttribute('data-action') === 'increase-quantity' ? 1 : -1;
      updateQuantity(this, change);
    });
  });

  // Remove item buttons
  document.querySelectorAll('.remove-item').forEach(link => {
    link.addEventListener('click', function(event) {
      event.preventDefault();
      const itemKey = this.getAttribute('data-item-key');
      removeItemFromCart(itemKey, this);
    });
  });
}

// Initialize cart when DOM is ready or immediately if already loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeCart);
} else {
  initializeCart();
}
</script>

<style>
	:root {
  --color-primary: var(--curalin);
  --color-primary-dark: var(--curalin-dark);
  --color-text-main: #202124;
  --color-text-secondary: #5f6368;
  --color-border: #dadce0;
  --color-white: #ffffff;
  --color-danger: var(--bronze);
  --color-shadow: rgba(0, 0, 0, 0.1);
  --font-family: var(--sub-font);
}

.cart {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 50px;
}

.cart-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.cart-header h1 {
  font-size: 2rem;
  font-weight: 700;
}

.continue-shopping {
  color: var(--color-primary);
  text-decoration: none;
  font-weight: 500;
}

.continue-shopping:hover {
  text-decoration: underline;
}

.cart-content {
  display: grid;
  grid-template-columns: 1fr 350px;
  gap: 2rem;
}

.cart-items {
  background: var(--color-white);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
  padding: 1rem;
}

.cart-item {
  display: flex;
  padding: 1rem 0;
  border-bottom: 1px solid var(--color-border);
}

.cart-item:last-child {
  border-bottom: none;
}

.item-image {
  width: 120px;
  height: 120px;
  border-radius: 0.5rem;
  object-fit: cover;
  margin-right: 1.5rem;
}

.item-details {
  flex: 1;
}

.item-details h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.compare-at-price {
  color: var(--primary);
  opacity: 0.5;
  font-size: 16px;
  font-weight: 100;
  text-align: end;
  text-decoration: line-through;
}

.item-options,
.selling-plan-name {
  font-size: 1rem;
  color: var(--color-text-secondary);
}

.quantity-input {
  display: inline-flex;
  align-items: center;
  margin-top: 0.5rem;
}

.quantity-input {
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  overflow: hidden;
}

.quantity-input input {
  width: 3rem;
  text-align: center;
  border: none;
  padding: 0.5rem 0;
  font-size: 1rem;
}

.quantity-input input:focus {
  outline: none;
}

.quantity-btn {
  width: 2.5rem;
  height: 2.5rem;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background: none;
  border: none;
  font-size: 1.25rem;
  color: var(--color-primary);
  cursor: pointer;
  transition: color 0.3s;
}

.quantity-btn:hover {
  color: var(--color-primary-dark);
}

.remove-item {
  color: var(--color-danger);
  text-decoration: none;
  font-size: 0.875rem;
  margin-top: 0.5rem;
  display: inline-block;
}

.remove-item:hover {
  text-decoration: underline;
}

.item-price {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--color-text-main);
}

.cart-summary {
  background: var(--color-white);
  border-radius: 0.5rem;
  padding: 1.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
  position: sticky;
  top: 2rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 0;
}

.summary-total {
  font-size: 1.25rem;
  font-weight: 700;
  border-top: 1px solid var(--color-border);
  margin-top: 1rem;
  padding-top: 1rem;
}

.checkout-button {
  width: 100%;
  padding: 1rem;
  background-color: var(--color-primary);
  color: var(--color-white);
  border: none;
  border-radius: 0.5rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  margin-top: 1.5rem;
  transition: background-color 0.3s;
}

.checkout-button:hover {
  background-color: var(--color-primary-dark);
}

.checkout-button:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

.cart-empty {
  text-align: center;
  padding: 4rem 2rem;
  background: var(--color-white);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px var(--color-shadow);
}

.loading-spinner {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.spinner {
  width: 24px;
  height: 24px;
  border: 3px solid var(--color-border);
  border-top-color: var(--color-primary);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  margin: 0 auto;
}

/* Remove the full-page loading spinner styles since we're not using it anymore */
.loading-spinner {
  display: none !important;
}

.summary-spinner {
  display: inline-block;
  vertical-align: middle;
  width: 16px;
  height: 16px;
  border-width: 2px;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@media (max-width: 768px) {
  .cart-content {
    grid-template-columns: 1fr;
  }

  .cart-summary {
    position: static;
    margin-top: 2rem;
  }

  .cart-item {
    flex-direction: column;
    align-items: center;
  }

  .item-image {
    margin-right: 0;
    margin-bottom: 1rem;
  }

  .item-price {
    margin-top: 1rem;
  }
}
@media (max-width: 768px) {
  .cart-content {
    grid-template-columns: 1fr;
  }

  .cart-summary {
    position: static;
    margin-top: 2rem;
  }

  .cart-item {
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 1rem 0;
  }

  .item-image {
    margin: 0 auto 1rem;
    display: block;
    width: 200px;
    height: 200px;
  }

  .item-details {
    text-align: center;
  }

  .item-price {
    margin-top: 1rem;
  }
}

@media (max-width: 480px) {
  .cart {
    padding: 0 0.5rem;
  }

  .cart-header h1 {
    font-size: 1.5rem;
  }

  .item-image {
    width: 200px;
    height: 200px;
  }

  .item-details h3 {
    font-size: 1.125rem;
  }

  .quantity-btn {
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
  }

  .quantity-input input {
    width: 3rem;
    font-size: 0.9rem;
  }
}
</style>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}