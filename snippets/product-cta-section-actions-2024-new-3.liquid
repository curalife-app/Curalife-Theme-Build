{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, index: forloop.index %}
    {% endfor %}

    <div class="subscription-benefits">
      <div>Complimentary subscriber benefits:</div>
      <ul class="check">
        <li>Free gift in every box!</li>
        <li>Free Expert Consultations</li>
        <li>Best Price Guarantee</li>
      </ul>
      <a href="#" id="see-all-benefits">See all benefits</a>
    </div>

    {% render 'subscription-benefits-modal' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<script>
$(document).ready(function() {
  const $productActions = $("#product-actions-{{ SID }}");
  const $purchaseOptionBoxes = $productActions.find('.purchase-option-box');
  const enableToggleAnimation = {{ isVariantBoxToggle | default: false }};

  function isSubscriptionSelected() {
    return $('#product-actions-{{ SID }} .purchase-type button.subscription').hasClass('selected');
  }

  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = urlParams.get('default-variant') ? parseInt(urlParams.get('default-variant')) : {{ defaultSelectionIndex | default: 1 }};

    $('#product-actions-{{ SID }} .purchase-type .subscription').trigger('click');

    const initialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
    $purchaseOptionBoxes.eq(initialDefaultVariant).trigger('click').find("input[type='radio']").prop('checked', true);
  }

  function togglePurchaseType(parentBox, isSubscriptionSelected) {
    const subscriptionContent = parentBox.find('.subscription');
    const buyOnceContent = parentBox.find('.buy-once');
    const bwpButton = $('#product-actions-{{ SID }} .bwp-button');

    if (isSubscriptionSelected) {
      parentBox.find('.per-month').show();
      bwpButton.hide();
      buyOnceContent.hide();
      subscriptionContent.show();
      parentBox.find('.subscription-terms').show();

      const sellingPlanId = parentBox.data('subscription-selling-plan-id');
      if (sellingPlanId > 0) {
        $('#product-actions-{{ SID }} .submit-selling-plan-id').val(sellingPlanId);
        parentBox.removeAttr('inert');
      } else {
        parentBox.attr('inert', '');
        parentBox.removeClass('selected');
        $purchaseOptionBoxes.filter(':not([inert])').first().trigger('click');
      }
    } else {
      parentBox.find('.per-month').hide();
      bwpButton.show();
      $('.submit-selling-plan-id').val('');
      parentBox.removeAttr('inert');
      subscriptionContent.hide();
      buyOnceContent.show();
      parentBox.find('.subscription-terms').hide();
    }

    updatePriceDisplay(parentBox, isSubscriptionSelected);
    adjustMaxHeight(parentBox, isSubscriptionSelected);
  }

  function updatePriceDisplay(parentBox, isSubscriptionSelected) {
    const itemPrice = parseInt(parentBox.data('item-price'));
    const subscriptionItemPrice = parseInt(parentBox.data('subscription-item-price'));
    const originalItemCap = parseInt(parentBox.data('original-item-cap'));

    const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
    const priceElement = isSubscriptionSelected ?
      parentBox.find('.real-price.subscription .floor') :
      parentBox.find('.real-price.buy-once .floor');
    const totalPriceElement = isSubscriptionSelected ?
      parentBox.find('.total-price.subscription .floor') :
      parentBox.find('.total-price.buy-once .floor');
    const comparedAtPriceElement = parentBox.find('.compared-at-price');

    priceElement.text('$' + formatPrice(currentPrice));
    if (totalPriceElement.length) {
      totalPriceElement.text('$' + formatPrice(currentPrice));
    }

    if (originalItemCap > currentPrice) {
      comparedAtPriceElement.text('$' + formatPrice(originalItemCap)).show();
    } else {
      comparedAtPriceElement.hide();
    }

    const saveTag = isSubscriptionSelected ?
      parentBox.find('.save-title.subscription') :
      parentBox.find('.save-title.buy-once');
    saveTag.show().siblings('.save-title').hide();
  }

  function formatPrice(cents) {
    return (cents / 100).toFixed(2);
  }

  function adjustMaxHeight(element, isSubscriptionSelected) {
    if (enableToggleAnimation) {
      if (isSubscriptionSelected) {
        const openHeight = element.get(0).scrollHeight;
        element.css('max-height', openHeight + 'px');
        element.find('.toggle-icon').show();
      } else {
        element.css('max-height', 'none');
      }
    } else {
      element.css('max-height', 'none');
    }
  }

  function togglePurchaseBox(element) {
    const isSubscription = isSubscriptionSelected();
    const wasSelected = element.hasClass('selected');
    const subscriptionPlanID = isSubscription ? element.data('subscription-selling-plan-id') : '';
    const variantID = isSubscription ? element.data('original-variant') : element.data('variant');

    if (wasSelected) {
      return;
    }

    $purchaseOptionBoxes.removeClass('selected').each(function() {
      if (enableToggleAnimation && isSubscription) {
        $(this).css('max-height', '72px');
        $(this).find('.toggle-icon').hide();
      }
    });

    $('#product-actions-{{ SID }} .submit-selling-plan-id').val(subscriptionPlanID);
    $('#product-actions-{{ SID }} .submit-variant-id').val(variantID);

    element.addClass('selected');
    element.find("input[type='radio']").prop('checked', true);

    togglePurchaseType(element, isSubscription);
    updateVariantImage(element);
  }

  function updateVariantImage(element) {
    {% if variantsAmount > 1 %}
      {% if isSlideOnLoad %}
        let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
        window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
      {% else %}
        if (window.hasInitialImageUpdateHappened) {
          let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
          window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
        }
        window.hasInitialImageUpdateHappened = true;
      {% endif %}
    {% endif %}
  }

  $productActions.on('click', '.purchase-type button', function(event) {
    event.preventDefault();
    const isSubscription = $(this).hasClass('subscription');

    $('#product-actions-{{ SID }} .purchase-type button').removeClass('selected');
    $(this).addClass('selected');

    $purchaseOptionBoxes.each(function() {
      togglePurchaseType($(this), isSubscription);
    });
  });

  $productActions.on('click', '.purchase-option-box', function(event) {
    event.preventDefault();
    togglePurchaseBox($(this));
  });

  initializePurchaseOptions();
});
</script>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid #cbcbcb;
    cursor: pointer;
    max-height: 72px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .purchase-option-box .radio-box {
      padding: 3vw 0;
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }
</style>