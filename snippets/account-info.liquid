{% comment %}
  Account Information Snippet

  This snippet displays the customer's contact information and shipping address in the account page.
  It also handles displaying success messages after contact information is updated.
  It now includes password change functionality right in the same card.

  Usage:
  {% render 'account-info' %}

  Dependencies:
  - Requires customer object to be available
  - Expects certain CSS classes to be defined in the parent template
  - Handles the contact-updated URL parameter for success messages
{% endcomment %}

<div class="account-info-container">
  <div class="info-section contact-address-section">
    <div class="section-header">
      <h3 class="section-title">Personal Information</h3>
      <div class="action-buttons">
        <a href="/account/addresses" class="action-button address-edit-link" title="Manage Addresses">
          <span class="action-text">Manage Addresses</span>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
        </a>
      </div>
    </div>
    <div class="section-content">
      <div class="contact-address-grid">
        <div class="contact-info">
          <h4 class="subsection-title">Contact Details</h4>
          <ul class="info-list no-style">
            <li class="info-item">
              <span class="info-label">First Name</span>
              <span class="info-value">{{ customer.first_name }}</span>
            </li>
            <li class="info-item">
              <span class="info-label">Last Name</span>
              <span class="info-value">{{ customer.last_name }}</span>
            </li>
            <li class="info-item">
              <span class="info-label">Email</span>
              <span class="info-value">{{ customer.email }}</span>
            </li>
          </ul>
        </div>

        <div class="address-info">
          <h4 class="subsection-title">Default Shipping Address</h4>
          {% assign address = customer.default_address %}
          {% if address %}
            <div class="address-display">
              <p>
                {{ address.first_name }} {{ address.last_name }}
                {% if address.company != blank %}<br />{{ address.company }}{% endif %}
                {% if address.street != blank %}<br />{{ address.street }}{% endif %}
                <br />{{ address.city }} {% if address.province_code != blank %}, {{ address.province_code }}{% endif %}
                <br />{{ address.country }} {{ address.zip }}
                {% if address.phone != blank %}<br />{{ address.phone }}{% endif %}
              </p>
            </div>
          {% else %}
            <div class="empty-address">
              <p>You don't have a shipping address yet. <a href="/account/addresses" class="add-address-link">Add one now</a></p>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <div class="info-section password-section">
    <div class="section-header">
      <h3 class="section-title">Password Management</h3>
      <button type="button" class="action-button toggle-password-form" aria-label="Toggle password change form">
        <span class="action-text">Change</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
      </button>
    </div>
    <div class="section-content">
      <div class="password-form-wrapper" style="display: none;">
        {% form 'customer' %}
          <div class="form-fields">
            <div class="form-group">
              <label for="CustomerCurrentPassword">Current Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[current_password]" id="CustomerCurrentPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerNewPassword">New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password]" id="CustomerNewPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
              <div class="password-strength-meter">
                <div class="strength-label"></div>
                <div class="meter-bar">
                  <span class="strength-value"></span>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerPasswordConfirmation">Confirm New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password_confirmation]" id="CustomerPasswordConfirmation" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>
          </div>

          <input type="hidden" name="return_to" value="/account?password-updated=true#a">

          <div class="form-actions">
            <button type="submit" class="primary-button">Update Password</button>
            <button type="button" class="secondary-button cancel-password-btn">Cancel</button>
          </div>
        {% endform %}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Check for query parameter indicating successful update
    const urlParams = new URLSearchParams(window.location.search);

    // Contact info update message
    if (urlParams.get('contact-updated') === 'true') {
      // Show success message if not already displayed
      const contactSection = document.querySelector('.contact-address-section');
      if (contactSection && !contactSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your contact information has been updated successfully!</p>';
        contactSection.querySelector('.section-content').insertBefore(successDiv, contactSection.querySelector('.contact-address-grid'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('contact-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Password update message
    if (urlParams.get('password-updated') === 'true') {
      const passwordSection = document.querySelector('.password-section');
      if (passwordSection && !passwordSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your password has been updated successfully!</p>';
        passwordSection.querySelector('.section-content').insertBefore(successDiv, passwordSection.querySelector('.password-form-wrapper'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('password-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Toggle password form visibility
    const toggleFormBtn = document.querySelector('.toggle-password-form');
    const passwordForm = document.querySelector('.password-form-wrapper');
    const cancelBtn = document.querySelector('.cancel-password-btn');

    if (toggleFormBtn && passwordForm) {
      toggleFormBtn.addEventListener('click', function() {
        if (passwordForm.style.display === 'none') {
          passwordForm.style.display = 'block';
          passwordForm.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
          passwordForm.style.display = 'none';
        }
      });

      if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
          passwordForm.style.display = 'none';
          // Clear form values
          const passwordInputs = passwordForm.querySelectorAll('input[type="password"]');
          passwordInputs.forEach(input => {
            input.value = '';
          });
          // Reset strength meter
          const strengthBar = passwordForm.querySelector('.strength-value');
          if (strengthBar) {
            strengthBar.style.width = '0%';
          }
          const strengthLabel = passwordForm.querySelector('.strength-label');
          if (strengthLabel) {
            strengthLabel.textContent = '';
          }
        });
      }
    }

    // Toggle password visibility
    const togglePasswordBtns = document.querySelectorAll('.toggle-password-visibility');

    togglePasswordBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const passwordInput = this.parentElement.querySelector('input');
        const eyeIcon = this.querySelector('.eye-icon');
        const eyeOffIcon = this.querySelector('.eye-off-icon');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          eyeIcon.style.display = 'none';
          eyeOffIcon.style.display = 'block';
        } else {
          passwordInput.type = 'password';
          eyeIcon.style.display = 'block';
          eyeOffIcon.style.display = 'none';
        }
      });
    });

    // Password strength meter
    const newPasswordInput = document.getElementById('CustomerNewPassword');
    const strengthBar = document.querySelector('.strength-value');
    const strengthLabel = document.querySelector('.strength-label');

    if (newPasswordInput && strengthBar && strengthLabel) {
      newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        let strength = 0;
        let label = '';

        if (password.length >= 8) strength += 1;
        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
        if (password.match(/\d/)) strength += 1;
        if (password.match(/[^a-zA-Z\d]/)) strength += 1;

        switch (strength) {
          case 0:
            strengthBar.style.width = '0%';
            label = '';
            break;
          case 1:
            strengthBar.style.width = '25%';
            strengthBar.style.backgroundColor = '#ff4d4d'; // Red
            label = 'Weak';
            break;
          case 2:
            strengthBar.style.width = '50%';
            strengthBar.style.backgroundColor = '#ffa64d'; // Orange
            label = 'Fair';
            break;
          case 3:
            strengthBar.style.width = '75%';
            strengthBar.style.backgroundColor = '#99cc00'; // Light Green
            label = 'Good';
            break;
          case 4:
            strengthBar.style.width = '100%';
            strengthBar.style.backgroundColor = '#2ecc71'; // Green
            label = 'Strong';
            break;
        }

        strengthLabel.textContent = label;
        strengthLabel.style.color = strengthBar.style.backgroundColor;
      });

      // Password confirmation validation
      const confirmInput = document.getElementById('CustomerPasswordConfirmation');

      if (confirmInput) {
        confirmInput.addEventListener('input', function() {
          if (this.value !== newPasswordInput.value) {
            this.setCustomValidity('Passwords do not match');
          } else {
            this.setCustomValidity('');
          }
        });
      }
    }
  });
</script>

<style>
  /* Merged contact and address styles */
  .action-buttons {
    display: flex;
    gap: 10px;
  }

  .contact-address-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-top: 15px;
  }

  .subsection-title {
    font-size: 16px;
    font-weight: 500;
    margin: 0 0 15px 0;
    padding-bottom: 8px;
    border-bottom: 1px solid var(--color-border-light);
  }

  .contact-info, .address-info {
    background-color: #f9f9f9;
    border-radius: 6px;
    padding: 20px;
  }

  @media screen and (max-width: 767px) {
    .contact-address-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .action-buttons {
      flex-direction: column;
      gap: 5px;
    }
  }
</style>