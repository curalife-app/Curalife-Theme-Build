{% assign referenced_variant_product = prod %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}" data-default-variant-index="{{ defaultSelectionIndex }}">
  <div class="purchase-options flex flex-col gap-2">
    {% for block in blocks %}
      {% assign referenced_variant = blank %}
      {% assign blockVarID = block.settings.variant_id | plus: 0 %}
      {% for vari in referenced_variant_product.variants %}
        {% assign currVarID = vari.id | plus: 0 %}
        {% if currVarID == blockVarID %}
          {% assign referenced_variant = vari %}
        {% endif %}
      {% endfor %}

      {% if block.type == 'variant' %}
          {% render 'product-cta-section-actions-variant-2024-new-4',
            SID: SID,
            prod: referenced_variant_product,
            var: referenced_variant,
            buyBoxColor: block.settings.box_color,
            pricePer: pricePer,
            saveFormat: saveFormat,
            badgeText: block.settings.badge_text,
            variantTitle: block.settings.title,
            index: forloop.index,
            purchase_type: block.settings.purchase_type
          %}
      {% endif %}
    {% endfor %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% assign buttonSID = SID | append: '-checkout' %}
        {% render 'buy-buttons-new-4', SID: buttonSID, product: prod, variant: '', buttonText: "Add to Cart", selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productForm = document.querySelector('product-form');
  if (!productForm) return;

  const form = productForm.querySelector('form');
  const productActions = document.getElementById('product-actions-{{ SID }}');
  if (!productActions) return;

  const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
  const variantInput = form.querySelector('input[name="id"]');
  const sellingPlanInput = form.querySelector('input[name="selling_plan"]');
  const submitButton = form.querySelector('button[type="submit"]');

  function updateFormInputs(selectedBox) {
    const variantId = selectedBox.getAttribute('data-variant');
    const sellingPlanId = selectedBox.getAttribute('data-subscription-selling-plan-id');
    const purchaseType = selectedBox.getAttribute('data-purchase-type');

    variantInput.value = variantId;
    sellingPlanInput.value = purchaseType === 'subscribe' ? sellingPlanId : '';

    const buttonText = purchaseType === 'subscribe' ? "Subscribe Now" : "Add to Cart";
    submitButton.querySelector('span').textContent = buttonText;

    console.log('Updated form inputs:', { variantId, sellingPlanId, purchaseType });
  }

  function togglePurchaseBox(element) {
    if (!element || element.classList.contains('selected')) return;

    purchaseOptionBoxes.forEach(box => box.classList.remove('selected'));
    element.classList.add('selected');

    updateFormInputs(element);
  }

  productActions.addEventListener('click', (event) => {
    const purchaseOptionBox = event.target.closest('.purchase-option-box');
    if (purchaseOptionBox) {
      event.preventDefault();
      togglePurchaseBox(purchaseOptionBox);
    }
  });

  // Initialize with the default selected option
  const defaultSelectedBox = productActions.querySelector('.purchase-option-box.selected');
  if (defaultSelectedBox) {
    updateFormInputs(defaultSelectedBox);
  }

  // Override the onSubmitHandler to include our custom logic
  const originalOnSubmitHandler = productForm.onSubmitHandler;
  productForm.onSubmitHandler = function(evt) {
    evt.preventDefault();
    const submitButton = evt.submitter;
    const selectedBox = productActions.querySelector('.purchase-option-box.selected');

    if (selectedBox) {
      updateFormInputs(selectedBox);
    }

    // Call the original onSubmitHandler
    originalOnSubmitHandler.call(this, evt);
  };
});
</script>

<style>
  #cta-section-{{ section.id }} {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 90%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;

    .product-container {
      grid-template-columns: 54% 42% !important;
    }

    .product-actions {
      grid-area: 2/2/3/3;
      min-height: 415px;
    }

    .purchase-type {
      button {
        background-color: var(--primary-color);
        color: black;
        border-radius: 5px;
        font-size: 16px;
        min-width: 49%;
        padding: 0.65rem;
        transition: background-color 0.3s, color 0.3s;

        &.selected {
          color: white !important;
        }

        &:not(.selected) {
          background: var(--primary-color-light);
          border: 1px solid var(--primary-color);

          .subscription-details {
            color: var(--primary-color-dark);
          }
        }
      }
    }

    .purchase-option-box {
      background: #fff;
      border: 1px solid var(--border-color);
      cursor: pointer;
      max-height: 72px; /* Start all boxes collapsed */
      filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
      transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
      border-radius: 10px;
      border-color: var(--primary-color);
      padding: 1rem;

      &:hover {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      }

      &.selected {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
        background-color: var(--primary-color-light);
        max-height: max-content;
      }

      &[inert] {
        max-height: 72px !important;
        background: #ededed;
        opacity: 0.6;

        .option-title {
          color: grey;
        }
      }

      .radio-box {
        align-items: center;
        display: flex;

        input[type='radio'] {
          display: none;
        }

        label {
          cursor: pointer;
          width: 19px;
          height: 19px;
          border: 1px solid var(--primary-color);
          border-radius: 50%;
          position: relative;
        }
      }

      &.selected {
        .radio-box {
          input[type='radio'] + label:after {
            content: '\2713';
            position: absolute;
            top: -2px;
            left: -2px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            text-align: center;
            line-height: 22px;
            color: #fff;
          }
        }
      }

      .save-title {
        background-color: var(--orange);
        font-weight: bold;
      }

      .terms {
        margin-left: 32px;

        @media (max-width: 767px) {
          margin-left: 5vw;
        }
      }

      .price-wrapper {
        min-width: 5rem;

        .total-price {
          color: {{ buyBoxColor | default: 'var(--primary-color-dark)' }};
        }
      }
    }

    .purchase-options {
      .purchase-type {
        font-weight: 600px;
      }
    }

    .product-actions:not(.with-animation) {
      .purchase-option-box {
        max-height: none !important;
        transition: none !important;
      }
    }

    @media (max-width: 1269px) {
      .purchase-option-box {
        width: 100%;
      }
    }

    @media (max-width: 767px) {
      .product-actions {
        grid-area: unset;
        grid-row: 3;
        max-width: unset;
        min-height: unset;
      }

      .purchase-option-box {
        font-size: 4vw;
        padding: 3vw;
        max-height: 16vw;

        &.selected {
          max-height: none;
        }

        .top-wrapper {
          min-height: 9vw;
        }

        .left-wrapper {
          gap: 2vw;
        }

        .option-title {
          font-size: 3.9vw;
        }

        .price-wrapper {
          min-width: 17.7vw;

          .real-price {
            font-size: 4.5vw;
          }
        }

        .terms {
          .subtitle,
          .terms-title {
            font-size: 3.5vw;
          }
        }

        .radio-box {
          label {
            width: 3vw;
            height: 3vw;

            &:after {
              font-size: 2vw;
              width: 3vw !important;
              height: 3vw !important;
              top: -0.25vw !important;
              left: -0.25vw !important;
              display: flex;
              justify-content: center;
              align-items: center;
            }
          }
        }
      }

      .purchase-option-box.selected {
        max-height: max-content;
      }

      .purchase-option-box[inert] {
        max-height: 16vw !important;
      }
    }
  }
</style>