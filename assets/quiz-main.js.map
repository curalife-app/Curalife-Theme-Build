{"version":3,"file":"quiz-main.js","sources":["../../src/js/components/quiz-main.js"],"sourcesContent":["/**\n * Main Quiz Orchestrator\n * Coordinates all quiz modules and handles the overall quiz lifecycle\n */\n\nimport { QuizCore } from \"./quiz-core.js\";\nimport { TelemedicineWorkflow } from \"./quiz-telemedicine.js\";\nimport { QuizValidation } from \"./quiz-validation.js\";\nimport { QuizTemplates } from \"./quiz-templates.js\";\n\nexport class ModularQuiz {\n\tconstructor(options = {}) {\n\t\t// Find container\n\t\tthis.container = document.querySelector(\"#quiz-container\");\n\t\tif (!this.container) {\n\t\t\tconsole.error(\"Quiz container not found\");\n\t\t\treturn;\n\t\t}\n\n\t\t// Initialize modules\n\t\tthis.core = new QuizCore(this.container, options);\n\t\tthis.validation = new QuizValidation(this.container);\n\t\tthis.templates = new QuizTemplates();\n\t\tthis.telemedicine = null; // Will be initialized when needed\n\n\t\t// Test mode\n\t\tthis.isTestMode = this.container.hasAttribute(\"data-test-mode\");\n\n\t\t// Initialize notification system\n\t\tthis._initializeNotificationManager().then(() => {\n\t\t\tthis.init();\n\t\t});\n\t}\n\n\tasync _initializeNotificationManager() {\n\t\ttry {\n\t\t\tconst notificationsUrl = this.container.getAttribute(\"data-notifications-url\");\n\t\t\tif (!notificationsUrl) {\n\t\t\t\tthrow new Error(\"Notifications asset URL not found\");\n\t\t\t}\n\n\t\t\tconsole.log(\"üîó Loading notification system from:\", notificationsUrl);\n\t\t\tconst { NotificationManager } = await import(notificationsUrl);\n\n\t\t\tthis.notificationManager = new NotificationManager(this.container, {\n\t\t\t\tmaxNotifications: 3,\n\t\t\t\tdisplayDuration: 5000,\n\t\t\t\tanimationDuration: 300,\n\t\t\t\tdefaultType: \"info\",\n\t\t\t\ttestMode: this.isTestMode\n\t\t\t});\n\n\t\t\tconsole.log(\"‚úÖ Notification system initialized\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"‚ùå Failed to initialize notification system:\", error);\n\t\t}\n\t}\n\n\tasync init() {\n\t\ttry {\n\t\t\tif (!this.core._validateEssentialElements()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Load quiz data\n\t\t\tconst dataLoaded = await this.core.loadQuizData();\n\t\t\tif (!dataLoaded) return;\n\n\t\t\t// Apply test data if in test mode\n\t\t\tif (this.isTestMode) {\n\t\t\t\tthis._applyTestDataIfEnabled();\n\t\t\t\tthis._addTestModeIndicator();\n\t\t\t}\n\n\t\t\t// Attach navigation listeners\n\t\t\tthis._attachNavigationListeners();\n\n\t\t\t// Start with first step\n\t\t\tthis.core.renderCurrentStep();\n\n\t\t\tconsole.log(\"‚úÖ Quiz initialized successfully\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"‚ùå Quiz initialization failed:\", error);\n\t\t\tthis.core._displayCriticalError(\"Failed to initialize quiz\");\n\t\t}\n\t}\n\n\t_applyTestDataIfEnabled() {\n\t\t// Test data for form fields\n\t\tconst testData = {\n\t\t\t\"first-name\": \"Test\",\n\t\t\t\"last-name\": \"User\",\n\t\t\temail: \"test@example.com\",\n\t\t\tphone: \"5551234567\",\n\t\t\taddress: \"123 Test St\",\n\t\t\tcity: \"Test City\",\n\t\t\tstate: \"CA\",\n\t\t\tzip: \"12345\",\n\t\t\t\"date-of-birth\": { month: \"01\", day: \"15\", year: \"1990\" }\n\t\t};\n\n\t\t// Apply test data to responses\n\t\tthis.core.responses.forEach((stepResponses, stepIndex) => {\n\t\t\tconst step = this.core.quizData.steps[stepIndex];\n\t\t\tif (step && step.type === \"form\") {\n\t\t\t\tstep.questions.forEach(question => {\n\t\t\t\t\tif (testData[question.id]) {\n\t\t\t\t\t\tstepResponses[question.id] = testData[question.id];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(\"üß™ Test data applied to form fields\");\n\t}\n\n\t_addTestModeIndicator(text = \"üß™ TEST MODE\") {\n\t\tconst existingIndicator = this.container.querySelector(\".quiz-test-mode-indicator\");\n\t\tif (existingIndicator) {\n\t\t\texistingIndicator.remove();\n\t\t}\n\n\t\tconst indicatorHTML = this.templates.generateTestModeIndicator(text);\n\t\tthis.container.insertAdjacentHTML(\"afterbegin\", indicatorHTML);\n\t}\n\n\t_attachNavigationListeners() {\n\t\t// Back button\n\t\tconst backButton = this.container.querySelector(\"#quiz-back-button\");\n\t\tif (backButton) {\n\t\t\tbackButton.addEventListener(\"click\", () => this.core.goToPreviousStep());\n\t\t}\n\n\t\t// Next button\n\t\tconst nextButton = this.container.querySelector(\"#quiz-next-button\");\n\t\tif (nextButton) {\n\t\t\tnextButton.addEventListener(\"click\", () => this._handleNextButtonClick());\n\t\t}\n\n\t\t// Listen for quiz completion\n\t\tthis.container.addEventListener(\"quizComplete\", event => {\n\t\t\tthis.finishQuiz();\n\t\t});\n\t}\n\n\t_handleNextButtonClick() {\n\t\tconst step = this.core.getCurrentStep();\n\t\tif (!step) return;\n\n\t\t// Validate form steps before proceeding\n\t\tif (step.type === \"form\") {\n\t\t\tconst isValid = this.validation.validateFormStep(step, this.core.responses[this.core.currentStepIndex]);\n\t\t\tif (!isValid) {\n\t\t\t\treturn; // Stop if validation fails\n\t\t\t}\n\t\t}\n\n\t\t// Check if this is the final step\n\t\tconst isLastStep = this.core.currentStepIndex === this.core.quizData.steps.length - 1;\n\t\tconst isLastQuestion = step.type !== \"form\" && this.core.currentQuestionIndex === step.questions.length - 1;\n\n\t\tif (isLastStep && (step.type === \"form\" || isLastQuestion)) {\n\t\t\tthis.finishQuiz();\n\t\t} else {\n\t\t\tthis.core.goToNextStep();\n\t\t}\n\t}\n\n\tasync finishQuiz() {\n\t\ttry {\n\t\t\tconsole.log(\"üèÅ Starting quiz completion process\");\n\n\t\t\t// Initialize telemedicine workflow if not already done\n\t\t\tif (!this.telemedicine) {\n\t\t\t\tthis.telemedicine = new TelemedicineWorkflow(this.container, this.core.responses);\n\t\t\t}\n\n\t\t\t// Show loading screen\n\t\t\tthis._showLoadingScreen();\n\n\t\t\t// Start the telemedicine workflow\n\t\t\tconst workflowResult = await this.telemedicine.startWorkflow();\n\n\t\t\t// Process and display results\n\t\t\tthis._showResults(workflowResult);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"‚ùå Quiz completion failed:\", error);\n\t\t\tthis._showResults({\n\t\t\t\tsuccess: false,\n\t\t\t\terror: true,\n\t\t\t\terrorType: \"general\",\n\t\t\t\terrorMessage: \"We're experiencing technical difficulties. Please try again or contact support.\"\n\t\t\t});\n\t\t}\n\t}\n\n\t_showLoadingScreen() {\n\t\tconst loadingElement = this.core.loading;\n\t\tconst questionsElement = this.core.questions;\n\t\tconst navigationElement = this.core.navigationButtons;\n\n\t\tif (loadingElement) {\n\t\t\tloadingElement.innerHTML = this.templates.generateLoadingHTML();\n\t\t\tloadingElement.style.display = \"block\";\n\t\t}\n\n\t\tif (questionsElement) {\n\t\t\tquestionsElement.style.display = \"none\";\n\t\t}\n\n\t\tif (navigationElement) {\n\t\t\tnavigationElement.style.display = \"none\";\n\t\t}\n\t}\n\n\t_showResults(resultData) {\n\t\tconsole.log(\"üìä Displaying quiz results:\", resultData);\n\n\t\t// Hide loading screen\n\t\tif (this.core.loading) {\n\t\t\tthis.core.loading.style.display = \"none\";\n\t\t}\n\n\t\t// Show results section\n\t\tif (this.core.results) {\n\t\t\tthis.core.results.style.display = \"block\";\n\t\t\tthis.core.results.innerHTML = this._generateResultsHTML(resultData);\n\t\t}\n\n\t\t// Test mode notification\n\t\tif (this.isTestMode && this.notificationManager) {\n\t\t\tconst statusText = resultData.success ? \"‚úÖ Completed\" : \"‚ùå Failed\";\n\t\t\tthis.notificationManager.show(\"üß™ TEST MODE - Quiz Completion: \" + statusText, \"info\");\n\t\t}\n\t}\n\n\t_generateResultsHTML(resultData) {\n\t\tif (resultData.success && resultData.schedulingData) {\n\t\t\treturn this.templates.generateSuccessfulSchedulingHTML(resultData.schedulingData);\n\t\t} else if (resultData.error) {\n\t\t\treturn this.templates.generateSchedulingErrorHTML({\n\t\t\t\ttype: resultData.errorType,\n\t\t\t\tmessage: resultData.errorMessage,\n\t\t\t\ttitle: this._getErrorTitle(resultData.errorType),\n\t\t\t\tdescription: this._getErrorDescription(resultData.errorType)\n\t\t\t});\n\t\t} else {\n\t\t\t// Fallback for processing status\n\t\t\treturn this.templates.generateSchedulingErrorHTML({\n\t\t\t\ttype: \"processing\",\n\t\t\t\ttitle: \"‚è≥ Processing Your Request\",\n\t\t\t\tdescription: \"Your request is being processed. Our team will contact you within 24 hours to schedule your appointment.\"\n\t\t\t});\n\t\t}\n\t}\n\n\t_getErrorTitle(errorType) {\n\t\tconst errorTitles = {\n\t\t\tduplicate: \"‚ö†Ô∏è Appointment Already Exists\",\n\t\t\tvalidation: \"‚ùå Information Needs Review\",\n\t\t\teligibility: \"‚è≥ Insurance Verification Needed\",\n\t\t\tgeneral: \"‚ö†Ô∏è Scheduling Temporarily Unavailable\"\n\t\t};\n\t\treturn errorTitles[errorType] || errorTitles.general;\n\t}\n\n\t_getErrorDescription(errorType) {\n\t\tconst errorDescriptions = {\n\t\t\tduplicate: \"Good news! You already have an appointment scheduled with our dietitian.\",\n\t\t\tvalidation: \"Please check your information and try again.\",\n\t\t\teligibility: \"We're having trouble verifying your insurance. Our team will contact you within 24 hours.\",\n\t\t\tgeneral: \"We're experiencing temporary difficulties with our scheduling system.\"\n\t\t};\n\t\treturn errorDescriptions[errorType] || errorDescriptions.general;\n\t}\n\n\t// Public API methods for external access\n\tgetCurrentStep() {\n\t\treturn this.core.getCurrentStep();\n\t}\n\n\tgetCurrentQuestion() {\n\t\treturn this.core.getCurrentQuestion();\n\t}\n\n\tgetResponses() {\n\t\treturn this.core.responses;\n\t}\n\n\tisFormStep() {\n\t\treturn this.core.isFormStep();\n\t}\n\n\tshowNotification(message, type = \"info\") {\n\t\tif (this.notificationManager) {\n\t\t\tthis.notificationManager.show(message, type);\n\t\t}\n\t}\n\n\tclearNotifications() {\n\t\tif (this.notificationManager) {\n\t\t\tthis.notificationManager.clear();\n\t\t}\n\t}\n\n\t// Cleanup method\n\tcleanup() {\n\t\tif (this.telemedicine) {\n\t\t\tthis.telemedicine.cleanup();\n\t\t}\n\t\tif (this.notificationManager) {\n\t\t\tthis.notificationManager.clear();\n\t\t}\n\t}\n}\n\n// Auto-initialize if container exists\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst quizContainer = document.querySelector(\"#quiz-container\");\n\tif (quizContainer) {\n\t\twindow.curaQuiz = new ModularQuiz();\n\t}\n});\n"],"names":[],"mappings":"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"}