<script>
  var moneyFormat = {{ shop.money_format | json }};

function formatMoney(cents, format) {
  if (typeof cents === 'string') {
    cents = cents.replace('.', '');
  }
  var value = '';
  var formatString = format || moneyFormat;

  // Match the placeholder with optional whitespace
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;

  function formatWithDelimiters(number, precision, thousands, decimal) {
    thousands = thousands || ',';
    decimal = decimal || '.';

    if (isNaN(number) || number == null) {
      return 0;
    }

    number = (number / 100.0).toFixed(precision);

    var parts = number.split('.');
    var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
    var centsAmount = parts[1] ? decimal + parts[1] : '';

    return dollarsAmount + centsAmount;
  }

  var match = formatString.match(placeholderRegex);
  if (!match) {
    return formatString;
  }

  switch (match[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
    case 'amount_with_space_separator':
      value = formatWithDelimiters(cents, 2, ' ');
      break;
    case 'amount_with_period_and_space_separator':
      value = formatWithDelimiters(cents, 2, ' ', '.');
      break;
    case 'amount_no_decimals_with_space_separator':
      value = formatWithDelimiters(cents, 0, ' ');
      break;
    case 'amount_with_apostrophe_separator':
      value = formatWithDelimiters(cents, 2, "'");
      break;
    case 'amount_no_decimals_with_apostrophe_separator':
      value = formatWithDelimiters(cents, 0, "'");
      break;
    default:
      value = formatWithDelimiters(cents, 2);
  }

  return formatString.replace(placeholderRegex, value);
}

function updateQuantity(button, change) {
  const input = button.parentNode.querySelector('input');
  const itemKey = input.getAttribute('data-item-key');
  const currentValue = parseInt(input.value);
  const newValue = currentValue + change;

  if (newValue >= 0) {
    // Show the loading spinner
    showLoadingSpinner();

    fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      body: JSON.stringify({
        id: itemKey,
        quantity: newValue,
      }),
    })
      .then((response) => response.json())
      .then((cart) => {
        if (newValue === 0) {
          const cartItemElement = button.closest('.cart-item');
          if (cartItemElement) {
            cartItemElement.remove();
          }
        } else {
          input.value = newValue;
          updateItemPrice(button, cart);
        }
        updateCartTotals(cart);
      })
      .catch((error) => {
        console.error('Error:', error);
      })
      .finally(() => {
        // Hide the loading spinner
        hideLoadingSpinner();
      });
  }
}

  function updateCartTotals(cart) {
    const cartSubtotal = document.querySelector('[data-cart-subtotal]');
    const cartTotal = document.querySelector('[data-cart-total]');
    const cartItemCount = document.querySelector('[data-cart-item-count]');
    if (cartSubtotal && cartTotal) {
      cartSubtotal.textContent = formatMoney(cart.total_price);
      cartTotal.textContent = formatMoney(cart.total_price);
    }
    if (cartItemCount) {
      cartItemCount.textContent = cart.item_count;
    }

    if (cart.item_count === 0) {
      const cartContent = document.querySelector('.cart-content');
      const cartEmptyMessage = document.querySelector('.cart-empty');
      if (cartContent && cartEmptyMessage) {
        cartContent.style.display = 'none';
        cartEmptyMessage.style.display = 'block';
      }
    }
  }

  function updateItemPrice(button, cart) {
    const input = button.parentNode.querySelector('input');
    const itemKey = input.getAttribute('data-item-key');
    const cartItem = cart.items.find(item => item.key === itemKey);
    if (cartItem) {
      const itemPriceElement = button.closest('.cart-item').querySelector('.item-price');
      if (itemPriceElement) {
        itemPriceElement.textContent = formatMoney(cartItem.final_line_price);
      }
    }
  }

  function removeItemFromCart(itemKey, link) {
  // Show the loading spinner
  showLoadingSpinner();

  fetch('/cart/change.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json',
    },
    body: JSON.stringify({
      id: itemKey,
      quantity: 0,
    }),
  })
    .then((response) => response.json())
    .then((cart) => {
      const cartItemElement = link.closest('.cart-item');
      if (cartItemElement) {
        cartItemElement.remove();
      }
      updateCartTotals(cart);
    })
    .catch((error) => {
      console.error('Error:', error);
    })
    .finally(() => {
      // Hide the loading spinner
      hideLoadingSpinner();
    });
}


  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.quantity-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        const action = button.getAttribute('data-action');
        const change = action === 'increase-quantity' ? 1 : -1;
        updateQuantity(button, change);
      });
    });

    document.querySelectorAll('.remove-item').forEach(function(link) {
      link.addEventListener('click', function(event) {
        event.preventDefault();
        const itemKey = link.getAttribute('data-item-key');
        removeItemFromCart(itemKey, link);
      });
    });
  });

	function showLoadingSpinner() {
  const spinner = document.getElementById('loadingSpinner');
  if (spinner) {
    spinner.style.display = 'flex';
  }
}

function hideLoadingSpinner() {
  const spinner = document.getElementById('loadingSpinner');
  if (spinner) {
    spinner.style.display = 'none';
  }
}
</script>

<style>
	:root {
		--color-primary: var(--curalin);
		--color-primary-dark: var(--curalin-dark);
		--color-text-main: #111827;
		--color-text-secondary: #6b7280;
		--color-border: #e5e7eb;
		--color-white: white;
		--color-danger: #ef4444;
		--color-shadow: rgba(0,0,0,0.1);
	}

	.cart {
		max-width: 1200px;
		margin: 4rem auto;
		padding: 0 1.5rem;
	}

	.cart-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
	}

	.cart-header h1 {
		font-size: 1.875rem;
		font-weight: 600;
		color: var(--color-text-main);
	}

	.continue-shopping {
		color: var(--color-primary);
		text-decoration: none;
		font-weight: 500;
	}

	.cart-content {
		display: grid;
		grid-template-columns: 1fr 320px;
		gap: 2rem;
	}

	.cart-items {
		background: var(--color-white);
		border-radius: 1rem;
		box-shadow: 0 1px 3px var(--color-shadow);
	}

	.cart-item {
		display: grid;
		grid-template-columns: auto 1fr auto;
		gap: 1.5rem;
		padding: 1.5rem;
		border-bottom: 1px solid var(--color-border);
	}

	.cart-item:last-child {
		border-bottom: none;
	}

	.item-image {
		width: 150px;
		height: 150px;
		border-radius: 0.75rem;
		object-fit: cover;
	}

	.item-details h3 {
		font-size: 20px;
		font-weight: 500;
		color: var(--color-text-main);
		margin-bottom: 0.5rem;
	}

	.item-price {
		color: var(--color-text-main);
		font-weight: 500;
	}

	.quantity-input {
		display: inline-flex;
		align-items: center;
		border: 1px solid var(--color-border);
		border-radius: 0.5rem;
	}

	.quantity-input input {
		width: 2.5rem;
		text-align: center;
		border: none;
		padding: 0.5rem 0;
		-webkit-appearance: none;
		-moz-appearance: textfield;
	}

	.quantity-input input::-webkit-outer-spin-button,
	.quantity-input input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	.quantity-btn {
		border: none;
		color: var(--color-primary);
		cursor: pointer;
	}

	.remove-item {
		color: var(--color-danger);
		font-size: 0.875rem;
		text-decoration: none;
		margin-top: 0.5rem;
		display: inline-block;
	}

	.cart-summary {
		background: var(--color-white);
		border-radius: 1rem;
		padding: 1.5rem;
		position: sticky;
		top: 2rem;
		box-shadow: 0 1px 3px var(--color-shadow);
	}

	.summary-row {
		display: flex;
		justify-content: space-between;
		padding: 0.75rem 0;
		color: var(--color-text-secondary);
	}

	.summary-total {
		font-weight: 600;
		color: var(--color-text-main);
		font-size: 1.125rem;
		border-top: 1px solid var(--color-border);
		margin-top: 0.5rem;
		padding-top: 1rem;
	}

	.checkout-button {
		width: 100%;
		padding: 1rem;
		background: var(--color-primary);
		color: var(--color-white);
		border: none;
		border-radius: 0.5rem;
		font-weight: 500;
		margin-top: 1.5rem;
		cursor: pointer;
		transition: background-color 0.15s;
	}

	.checkout-button:hover {
		background: var(--color-primary-dark);
	}

	.cart-empty {
		text-align: center;
		padding: 4rem 2rem;
		background: var(--color-white);
		border-radius: 1rem;
		box-shadow: 0 1px 3px var(--color-shadow);
	}

	/* Loading Spinner Styles */
.loading-spinner {
  position: fixed; /* Overlay the entire page */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999; /* Ensure it's above other elements */
}

.loading-spinner .spinner {
  width: 50px;
  height: 50px;
  border: 5px solid var(--color-border);
  border-top-color: var(--color-primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* Spin Animation */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

	@media (max-width: 768px) {
		.cart { margin: 2rem auto; }
		.cart-content { grid-template-columns: 1fr; }
		.cart-summary { position: static; }
		.item-image { width: 80px; height: 80px; }
	}
</style>

<div class="cart">
	<!-- Loading Spinner -->
<div class="loading-spinner" id="loadingSpinner" style="display: none;">
  <div class="spinner"></div>
</div>

  <div class="cart-header">
    <h1>Shopping Cart ({{ cart.item_count }})</h1>
    <a href="{{ routes.all_products_collection_url }}" class="continue-shopping">Continue Shopping</a>
  </div>

  {% if cart == empty %}
    <div class="cart-empty">
      <h2>Your cart is empty</h2>
      <a href="{{ routes.all_products_collection_url }}" class="checkout-button">Start Shopping</a>
    </div>
  {% else %}
    <div class="cart-content">
      <div class="cart-items">
        {% for item in cart.items %}
          <div class="cart-item" id="CartItem-{{ item.key }}">
            <img src="{{ item.image | img_url: 'medium' }}" alt="{{ item.title }}" class="item-image">

            <div class="item-details">
              <h3>{{ item.product.title }}</h3>
              {% if item.product.options_with_values.size > 0 %}
                <div class="item-options">
                  {% for option in item.product.options_with_values %}
                    {{ option.name }}: {{ option.value }}{% unless forloop.last %}, {% endunless %}
                  {% endfor %}
                </div>
              {% endif %}
              <div class="quantity-input quantity-selector">
                <button type="button" class="quantity-btn" data-action="decrease-quantity">−</button>
                <input type="number"
                       name="updates[]"
                       value="{{ item.quantity }}"
                       min="0"
                       aria-label="Quantity for {{ item.title | escape }}"
                       data-item-key="{{ item.key }}">
                <button type="button" class="quantity-btn" data-action="increase-quantity">+</button>
              </div>
              <a href="/cart/change?line={{ forloop.index }}&quantity=0" class="remove-item">Remove</a>
            </div>

            <div class="item-price">
              {{ item.final_line_price | money }}
            </div>
          </div>
        {% endfor %}
      </div>

      <div class="cart-summary">
				<div class="summary-row">
					<span>Subtotal</span>
					<span data-cart-subtotal>{{ cart.total_price | money }}</span>
				</div>
				{% if cart.total_discount > 0 %}
					<div class="summary-row">
						<span>Discount</span>
						<span>-{{ cart.total_discount | money }}</span>
					</div>
				{% endif %}
				<div class="summary-row summary-total">
					<span>Total</span>
					<span data-cart-total>{{ cart.total_price | money }}</span>
				</div>

				<a href="/checkout" class="checkout-button">
					Proceed to Checkout
				</a>
			</div>
    </div>
  {% endif %}
</div>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}