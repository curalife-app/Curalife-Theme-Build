{% comment %}
  FAQ Section with optimized HTML, CSS, and JavaScript
{% endcomment %}

<div id="faq-{{ section_id }}" class="faq space-y-4">
  {% for faqItem in faqItems %}
    <div class="faq-item bg-{{ closed_bg_color | default: 'white' }} transition-colors duration-200 rounded-lg overflow-hidden">
      {% assign question = faqItem.question | default: faqItem | split: ":" | first | strip %}
      {% assign answer = faqItem.answer | default: faqItem | split: ":" | last | strip %}

      <button class="question focus:outline-none flex items-center justify-between w-full px-4 py-6 text-left cursor-pointer" aria-expanded="false">
        <h3 class="h5 m-0 text-{{ titles_color | default: 'current' }}">{{ question }}</h3>
        <span class="toggle-icon text-2xl transition-transform duration-300">+</span>
      </button>
      <div class="answer hidden px-4 pb-6">
        {{ answer }}
      </div>
    </div>
  {% endfor %}
</div>

<style>
  #faq-{{ section_id }} .faq-item.active {
    background-color: {{ opened_bg_color | default: closed_bg_color | default: 'white' }};
  }

  #faq-{{ section_id }} .faq-item.active .toggle-icon {
    transform: rotate(45deg);
  }

  @media screen and (max-width: 768px) {
    #faq-{{ section_id }} .question h3 {
      font-size: 5vw;
    }

    #faq-{{ section_id }} .answer {
      font-size: 4vw;
      line-height: 1.5;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const faqSection = document.getElementById('faq-{{ section_id }}');
    const accordionItems = faqSection.querySelectorAll('.faq-item');

    accordionItems.forEach((item, index) => {
      const question = item.querySelector('.question');
      const answer = item.querySelector('.answer');

      question.addEventListener('click', () => {
        const isExpanded = question.getAttribute('aria-expanded') === 'true';

        {% if is_allow_one_open %}
          accordionItems.forEach(otherItem => {
            if (otherItem !== item) {
              otherItem.classList.remove('active');
              otherItem.querySelector('.question').setAttribute('aria-expanded', 'false');
              otherItem.querySelector('.answer').classList.add('hidden');
            }
          });
        {% endif %}

        item.classList.toggle('active');
        question.setAttribute('aria-expanded', !isExpanded);
        answer.classList.toggle('hidden');

        // Tracking (assuming Woopra is properly set up)
        if (typeof woopra !== 'undefined') {
          woopra.track('Open FAQ', {
            question_display_text: question.textContent.trim(),
            question_order: index + 1
          });
        }
      });
    });
  });
</script>

<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [
    {% for faqItem in faqItems %}
      {
        "@type": "Question",
        "name": {{ faqItem.question | default: faqItem | split: ':' | first | strip | json }},
        "acceptedAnswer": {
          "@type": "Answer",
          "text": {{ faqItem.answer | default: faqItem | split: ':' | last | strip | json }}
        }
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}
</script>