{% if shop.name == 'CuraLife Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if buyType == 'buy_now' %}
	<div class="submit-wrap flex flex-col w-full">
		<input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}">
		<button name="add" class="buy-button clickable main-btn w-full p-0 text-black bg-[--orange] min-h-[50px]" id="buy-button-{{ SID }}" data-buybox-submit>
			<span class="button-text flex justify-center md:text-[5vw]">{{ buttonText | default: 'Shop Now' }}</span>

			<div class="loading-overlay__spinner hidden m-auto">
				<svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
					<circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
				</svg>
			</div>
		</button>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			var buyButton = document.getElementById('buy-button-{{ SID }}');

			if (buyButton) {
				buyButton.addEventListener('click', function (event) {
					var submitButton = this;
					var buttonText = submitButton.querySelector('.button-text');
					var loadingSpinner = submitButton.querySelector('.loading-overlay__spinner');

					if (buttonText && loadingSpinner) {
						buttonText.style.display = 'none';
						loadingSpinner.classList.remove('hidden');
					}

					var variantIdInput = document.querySelector('.submit-variant-id');
					var sellingPlanIdInput = document.querySelector('.submit-selling-plan-id');

					if (variantIdInput) {
						console.log('Variant ID input found.');
					} else {
						console.error('Variant ID input not found.');
					}

					var variantId = variantIdInput ? variantIdInput.value : '{{ variant | default: product.selected_or_first_available_variant.id }}';
					var sellingPlanId = sellingPlanIdInput ? sellingPlanIdInput.value : '';
					console.log('Variant ID:', variantId);
					console.log('Selling Plan ID:', sellingPlanId);

					var quantity = 1;

					var data = {
						id: variantId,
						quantity: quantity
					};

					if (sellingPlanId) {
						data['selling_plan'] = sellingPlanId;
					}

					// Adding product to the cart
					console.log('Sending request to add product to the cart:', data);

					fetch('/cart/add.js', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(data)
					})
						.then(function (response) {
							console.log('Received response from add to cart:', response);
							return response.json();
						})
						.then(function (data) {
							console.log('Product successfully added to cart:', data);
							console.log('Redirecting to checkout.');
							window.location.href = '/checkout';
						})
						.catch(function (error) {
							console.error('Error adding product to cart:', error);
							if (buttonText && loadingSpinner) {
								console.log('An error occurred. Resetting button to normal state.');
								buttonText.style.display = '';
								loadingSpinner.classList.add('hidden');
							}
						});
				});
			} else {
				console.error('Buy button not found. Cannot attach event listener.');
			}
		});
	</script>

{% else %}
	<script src="{{ 'product-info.js' | asset_url }}" defer="defer"></script>
	<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>

	<div>
		<product-form class="product-form temp" data-hide-errors="false" data-section-id="{{ section.id }}">
			{%- form 'product', product, id: product_form_id, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
				<input
					class="submit-variant-id"
					type="hidden"
					name="id"
					value="{{ variant | default: product.selected_or_first_available_variant.id }}"
					class="product-variant-id">
				<input class="submit-selling-plan-id" type="hidden" name="selling_plan" value="{{ selling_plan_id }}">

				<div class="product-form__buttons main-submit-wrapper flex">
					{% if isBuyQuantity %}
						<div class="qty flex overflow-hidden border border-gray-300 rounded-lg shadow-sm">
							<button type="button" class="decrement-btn hover:bg-gray-200 flex items-center justify-center w-10 h-10 transition-colors bg-gray-100">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<line x1="5" y1="12" x2="19" y2="12"></line>
								</svg>
							</button>

							<input type="text" name="quantity" maxlength="3" value="1" title="Quantity" class="input-text border-x w-12 text-center border-gray-300 outline-none">

							<button type="button" class="increment-btn hover:bg-gray-200 flex items-center justify-center w-10 h-10 transition-colors bg-gray-100">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<line x1="12" y1="5" x2="12" y2="19"></line>
									<line x1="5" y1="12" x2="19" y2="12"></line>
								</svg>
							</button>
						</div>
					{% endif %}

					<button
						id="ProductSubmitButton-{{SID}}"
						data-variant-id="{{ variant | default: product.selected_or_first_available_variant.id }}"
						type="submit"
						name="add"
						data-buybox-submit
						class="buy-button clickable !text-black product-form__submit button--full-width justify-center button--primary text-[20px] p-0 min-h-[50px] items-center !bg-[--orange]">
						<span class="submit-title">Add To Cart</span>
						<div class="loading-overlay__spinner hidden">
							<svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
								<circle class="path !stroke-white" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
							</svg>
						</div>
					</button>
				</div>
			{%- endform -%}

			<div class="product-form__error-message-wrapper p-2 mt-1 text-center rounded-sm bg-[--light-red]" role="alert" hidden>
				<div class="error-wrapper flex items-center justify-center">
					<svg aria-hidden="true" focusable="false" class="icon icon-error h-[20px] mr-1" viewBox="0 0 13 13">
						<circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
						<circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
						<path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
						<path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
					</svg>
					<span class="product-form__error-message text-[12px]"></span>
				</div>

				<div class="notice">
					Please
					<a class="underline" href="https://help{% if isGlobal %}-global{% endif %}.curalife.com/">Contact Us</a>
					, we'd love to help!
				</div>
			</div>
		</product-form>
	</div>
{% endif %}

{% if isBuyWithPrime and isGlobal != true and customer.b2b? == false %}
	<div class="bwp-button">
		{% render 'buy-with-prime-button' %}
	</div>
{% endif %}

{% if customer %}
	{% render 'yotpo-product-points-widget' %}
{% endif %}

{% if isBuyQuantity %}
	<style>
		/* Main quantity selector styles */
		.qty {
			max-width: 120px;
			height: 40px;
			margin-right: 10px;
			transition: transform 0.2s, box-shadow 0.2s;
		}

		/* Focus state for the quantity container */
		.qty:focus-within {
			border-color: var(--orange);
			box-shadow: 0 0 0 1px var(--orange);
		}

		/* Input field styles */
		.input-text {
			height: 100%;
			-moz-appearance: textfield;
			background-color: white;
		}

		/* Remove spinner arrows from number input */
		.input-text::-webkit-outer-spin-button,
		.input-text::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}

		/* Button styles */
		.decrement-btn, .increment-btn {
			transition: background-color 0.2s;
			cursor: pointer;
			border: none;
			outline: none;
		}

		/* Hover states for buttons */
		.decrement-btn:hover, .increment-btn:hover {
			background-color: #e5e5e5;
		}

		.decrement-btn:active, .increment-btn:active {
			background-color: #d9d9d9;
		}

		/* Animation for quantity change */
		@keyframes pulse {
			0% { transform: scale(1); }
			50% { transform: scale(1.05); }
			100% { transform: scale(1); }
		}

		.qty-changed {
			animation: pulse 0.3s ease-in-out;
		}

		/* Animation for cart quantity indicator */
		@keyframes rotate-x {
			0% { transform: rotateX(0deg); }
			100% { transform: rotateX(360deg); }
		}

		.rotate-x {
			animation: rotate-x 0.5s ease-in-out;
		}
	</style>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Select all required elements
			const quantityInput = document.querySelector('.qty input[name="quantity"]');
			const incrementBtn = document.querySelector('.increment-btn');
			const decrementBtn = document.querySelector('.decrement-btn');

			// Exit if any required elements are missing
			if (!quantityInput || !incrementBtn || !decrementBtn) {
				console.error('Could not find all required elements for quantity selector');
				return;
			}

			// Handle increment button click
			incrementBtn.addEventListener('click', function(event) {
				// Prevent default button behavior
				event.preventDefault();
				event.stopPropagation();

				// Get current value and calculate new value
				const currentValue = parseInt(quantityInput.value, 10) || 1;
				const newValue = currentValue + 1;

				// Enforce maximum value of 999
				if (newValue <= 999) {
					quantityInput.value = newValue;
					updateCartQty(newValue);
					animateQuantityChange();
				}
			});

			// Handle decrement button click
			decrementBtn.addEventListener('click', function(event) {
				// Prevent default button behavior
				event.preventDefault();
				event.stopPropagation();

				// Get current value and calculate new value (minimum of 1)
				const currentValue = parseInt(quantityInput.value, 10) || 1;
				const newValue = Math.max(1, currentValue - 1);

				// Update input value
				quantityInput.value = newValue;
				updateCartQty(newValue);
				animateQuantityChange();
			});

			// Handle manual input changes
			quantityInput.addEventListener('change', function() {
				// Parse input value
				let value = parseInt(this.value, 10);

				// Validate: must be a number between 1 and 999
				value = isNaN(value) ? 1 : value;
				value = Math.max(1, Math.min(999, value));

				// Update with validated value
				this.value = value;
				updateCartQty(value);
			});

			// Prevent non-numeric input in quantity field
			quantityInput.addEventListener('keypress', function(event) {
				// Only allow digits 0-9
				if (!/[0-9]/.test(event.key)) {
					event.preventDefault();
				}
			});

			// Update cart quantity display if it exists
			function updateCartQty(value) {
				const cartQty = document.querySelector('.cart-qty');
				if (cartQty) {
					// Update text content
					cartQty.textContent = value;

					// Remove animation class if it exists
					cartQty.classList.remove('rotate-x');

					// Force reflow to restart animation
					void cartQty.offsetWidth;

					// Add animation class back
					cartQty.classList.add('rotate-x');
				}
			}

			// Add animation effect when quantity changes
			function animateQuantityChange() {
				const qty = document.querySelector('.qty');
				if (!qty) return;

				// Remove animation class if it exists
				qty.classList.remove('qty-changed');

				// Force reflow to restart animation
				void qty.offsetWidth;

				// Add animation class back
				qty.classList.add('qty-changed');

				// Remove class after animation completes
				setTimeout(() => {
					qty.classList.remove('qty-changed');
				}, 300);
			}
		});
	</script>
{% endif %}