{% comment %}
  Responsive Image Component for Shopify with Console Debugging

  Accepts:
  - image: The main image object (required)
  - mobile_image: An optional image object for mobile devices
  - sizes: Custom sizes attribute (optional, default provided)
  - breakpoint: Custom breakpoint in pixels (optional, default: 768)
  - lazy: Enable lazy loading (optional, default: true)
  - preload: Preload the image (optional, default: false)
  - alt: Alt text for the image (required for accessibility)
  - class: Additional CSS classes (optional)

  Usage:
  {% render 'image',
    image: product.featured_image,
    mobile_image: product.images[1],
    sizes: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw',
    breakpoint: 768,
    lazy: true,
    preload: false,
    alt: product.title,
    class: 'my-custom-class'
  %}
{% endcomment %}

<script>
  console.log('Responsive Image Snippet - Input Parameters:', {
    image: {{ image | json }},
    mobile_image: {{ mobile_image | json }},
    sizes: '{{ sizes }}',
    breakpoint: {{ breakpoint | default: 768 }},
    lazy: {{ lazy | default: true }},
    preload: {{ preload | default: false }},
    alt: '{{ alt | escape }}',
    class: '{{ class }}'
  });
</script>

{%- liquid
  assign desktop_image = image
  assign mobile_image = mobile_image | default: image
  assign lazy_load = lazy | default: true
  assign preload_image = preload | default: false
  assign breakpoint = breakpoint | default: 768
  assign sizes = sizes | default: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw'

  assign mobile_widths = '375,750,1080,1500'
  assign desktop_widths = '750,1100,1500,2200,3000'

  assign mobile_widths_array = mobile_widths | split: ','
  assign desktop_widths_array = desktop_widths | split: ','

  assign unique_id = 'img-' | append: desktop_image.id | append: '-' | append: mobile_image.id
-%}

<script>
  console.log('Responsive Image Snippet - Processed Variables:', {
    desktop_image: {{ desktop_image | json }},
    mobile_image: {{ mobile_image | json }},
    lazy_load: {{ lazy_load }},
    preload_image: {{ preload_image }},
    breakpoint: {{ breakpoint }},
    sizes: '{{ sizes }}',
    mobile_widths_array: {{ mobile_widths_array | json }},
    desktop_widths_array: {{ desktop_widths_array | json }},
    unique_id: '{{ unique_id }}'
  });
</script>

{% if preload_image %}
  <script>console.log('Responsive Image Snippet - Preloading image');</script>
  <link rel="preload" as="image" href="{{ desktop_image | img_url: '1100x' }}" imagesrcset="
    {%- for width in desktop_widths_array -%}
      {{ desktop_image | img_url: width | append: 'x' }} {{ width }}w,
    {%- endfor -%}
  " imagesizes="{{ sizes }}">
{% endif %}

<div class="responsive-image-wrapper" style="aspect-ratio: {{ desktop_image.aspect_ratio }}; background-color: {{ desktop_image.dominant_color | default: '#f0f0f0' }};">
  <picture>
    <script>console.log('Responsive Image Snippet - WebP enabled:', {{ settings.enable_webp }});</script>
    {%- if settings.enable_webp -%}
      <source
        type="image/webp"
        media="(max-width: {{ breakpoint }}px)"
        srcset="
          {%- for width in mobile_widths_array -%}
            {{ mobile_image | img_url: width | append: 'x.webp' }} {{ width }}w,
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >
      <source
        type="image/webp"
        media="(min-width: {{ breakpoint | plus: 1 }}px)"
        srcset="
          {%- for width in desktop_widths_array -%}
            {{ desktop_image | img_url: width | append: 'x.webp' }} {{ width }}w,
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >
    {%- endif -%}

    <script>console.log('Responsive Image Snippet - Adding regular image sources');</script>
    <source
      media="(max-width: {{ breakpoint }}px)"
      srcset="
        {%- for width in mobile_widths_array -%}
          {{ mobile_image | img_url: width | append: 'x' }} {{ width }}w,
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >
    <source
      media="(min-width: {{ breakpoint | plus: 1 }}px)"
      srcset="
        {%- for width in desktop_widths_array -%}
          {{ desktop_image | img_url: width | append: 'x' }} {{ width }}w,
        {%- endfor -%}
      "
      sizes="{{ sizes }}"
    >

    <script>console.log('Responsive Image Snippet - Adding img tag');</script>
    <img
      id="{{ unique_id }}"
      src="{{ desktop_image | img_url: '1100x' }}"
      srcset="{{ desktop_image | img_url: '2200x' }} 2x"
      {% if lazy_load and preload_image == false %}loading="lazy"{% endif %}
      {% if lazy_load and preload_image == false %}
        data-src="{{ desktop_image | img_url: '1100x' }}"
        data-srcset="
          {%- for width in desktop_widths_array -%}
            {{ desktop_image | img_url: width | append: 'x' }} {{ width }}w,
          {%- endfor -%}
        "
      {% endif %}
      alt="{{ alt | escape }}"
      width="{{ desktop_image.width }}"
      height="{{ desktop_image.height }}"
      class="responsive-image {% if class %}{{ class }}{% endif %}"
      style="width: 100%; height: 100%; object-fit: cover;"
      onload="this.style.backgroundColor='transparent'; console.log('Responsive Image Snippet - Image loaded:', '{{ unique_id }}');"
    >
  </picture>
</div>

{% if lazy_load and preload_image == false %}
  <script>
    console.log('Responsive Image Snippet - Setting up lazy loading');
    document.addEventListener('DOMContentLoaded', function() {
      var lazyImageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
          if (entry.isIntersecting) {
            let lazyImage = entry.target;
            console.log('Responsive Image Snippet - Lazy loading image:', lazyImage.id);
            lazyImage.src = lazyImage.dataset.src;
            lazyImage.srcset = lazyImage.dataset.srcset;
            lazyImage.classList.add('loaded');
            lazyImageObserver.unobserve(lazyImage);
          }
        });
      }, {
        rootMargin: '0px 0px 300px 0px'
      });

      document.querySelectorAll('img[data-src]').forEach(function(lazyImage) {
        console.log('Responsive Image Snippet - Observing image:', lazyImage.id);
        lazyImageObserver.observe(lazyImage);
      });
    });
  </script>
{% endif %}

<style>
  .responsive-image-wrapper {
    overflow: hidden;
    position: relative;
  }
  .responsive-image {
    transition: opacity 0.3s ease-in-out;
  }
  .responsive-image:not(.loaded) {
    opacity: 0;
  }
  .responsive-image.loaded {
    opacity: 1;
  }
</style>

<script>console.log('Responsive Image Snippet - End of snippet');</script>