{"version":3,"file":"quiz-validation.js","sources":["../../src/js/components/quiz-validation.js"],"sourcesContent":["/**\r\n * Quiz Validation Module\r\n * Handles form validation logic for quiz questions and form steps\r\n */\r\n\r\nexport class QuizValidation {\r\n\tconstructor(container) {\r\n\t\tthis.container = container;\r\n\t}\r\n\r\n\tvalidateFormStep(step, responses) {\r\n\t\tconst validationErrors = [];\r\n\r\n\t\tstep.questions.forEach(question => {\r\n\t\t\tconst response = responses[question.id];\r\n\t\t\tconst validationResult = this._validateQuestionInForm(question, response);\r\n\r\n\t\t\tif (!validationResult.isValid) {\r\n\t\t\t\tvalidationErrors.push({\r\n\t\t\t\t\tquestionId: question.id,\r\n\t\t\t\t\tmessages: validationResult.errors\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (validationErrors.length > 0) {\r\n\t\t\tthis._displayValidationErrors(validationErrors);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t_validateQuestionInForm(question, response) {\r\n\t\tconst errorMessages = [];\r\n\t\tconst value = response;\r\n\r\n\t\t// Required field validation\r\n\t\tif (question.required && this._isEmptyValue(value, question.type)) {\r\n\t\t\tconst requiredError = this._validateRequired(question, value);\r\n\t\t\tif (requiredError) {\r\n\t\t\t\terrorMessages.push(requiredError);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Format validation (only if field has a value)\r\n\t\tif (this._hasValue(value)) {\r\n\t\t\tconst trimmedValue = typeof value === \"string\" ? value.trim() : value;\r\n\t\t\tthis._validateFieldFormat(question, trimmedValue, errorMessages);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisValid: errorMessages.length === 0,\r\n\t\t\terrors: errorMessages\r\n\t\t};\r\n\t}\r\n\r\n\t_isEmptyValue(value, questionType) {\r\n\t\tif (questionType === \"checkbox\") {\r\n\t\t\treturn !Array.isArray(value) || value.length === 0;\r\n\t\t}\r\n\t\tif (questionType === \"date-part\") {\r\n\t\t\treturn !value || !value.month || !value.day || !value.year;\r\n\t\t}\r\n\t\treturn value === undefined || value === null || value === \"\";\r\n\t}\r\n\r\n\t_displayValidationErrors(validationErrors) {\r\n\t\t// Clear previous errors\r\n\t\tthis.container.querySelectorAll(\".quiz-field-error\").forEach(errorElement => {\r\n\t\t\terrorElement.textContent = \"\";\r\n\t\t\terrorElement.style.display = \"none\";\r\n\t\t});\r\n\r\n\t\t// Display new errors\r\n\t\tvalidationErrors.forEach(({ questionId, messages }) => {\r\n\t\t\tconst { errorElement, inputElement } = this._getValidationElements(questionId);\r\n\r\n\t\t\tif (errorElement) {\r\n\t\t\t\terrorElement.textContent = messages[0]; // Show first error\r\n\t\t\t\terrorElement.style.display = \"block\";\r\n\t\t\t}\r\n\r\n\t\t\tif (inputElement) {\r\n\t\t\t\tinputElement.classList.add(\"quiz-field-error-state\");\r\n\t\t\t\tthis._scrollToInvalidField(inputElement);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t_getValidationElements(questionId) {\r\n\t\tconst errorElement = this.container.querySelector(`#error-${questionId}`);\r\n\t\tconst inputElement = this.container.querySelector(\r\n\t\t\t`[name=\"${questionId}\"], [name=\"${questionId}_month\"], [data-question-id=\"${questionId}\"] input, [data-question-id=\"${questionId}\"] select, [data-question-id=\"${questionId}\"] textarea`\r\n\t\t);\r\n\r\n\t\treturn { errorElement, inputElement };\r\n\t}\r\n\r\n\t_validateFieldValue(question, value) {\r\n\t\tconst trimmedValue = typeof value === \"string\" ? value.trim() : value;\r\n\t\tconst errorMessages = [];\r\n\r\n\t\t// Required validation\r\n\t\tif (question.required && !this._hasValue(value)) {\r\n\t\t\tconst requiredError = this._validateRequired(question, value);\r\n\t\t\tif (requiredError) {\r\n\t\t\t\terrorMessages.push(requiredError);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Format validation\r\n\t\tif (this._hasValue(value)) {\r\n\t\t\tthis._validateFieldFormat(question, trimmedValue, errorMessages);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisValid: errorMessages.length === 0,\r\n\t\t\terrors: errorMessages\r\n\t\t};\r\n\t}\r\n\r\n\t_hasValue(value) {\r\n\t\treturn value !== undefined && value !== null && value !== \"\";\r\n\t}\r\n\r\n\t_validateRequired(question, value) {\r\n\t\tif (!this._hasValue(value)) {\r\n\t\t\treturn `${question.text} is required`;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t_validateFieldFormat(question, trimmedValue, errorMessages) {\r\n\t\t// Email validation\r\n\t\tif (question.type === \"email\" || question.id === \"email\") {\r\n\t\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\t\t\tif (!emailRegex.test(trimmedValue)) {\r\n\t\t\t\terrorMessages.push(\"Please enter a valid email address\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Phone validation\r\n\t\tif (question.type === \"phone\" || question.id === \"phone\") {\r\n\t\t\tif (!this._validatePhoneNumber(trimmedValue)) {\r\n\t\t\t\terrorMessages.push(\"Please enter a valid 10-digit phone number\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// ZIP code validation\r\n\t\tif (question.id === \"zip\" || question.id === \"zipCode\") {\r\n\t\t\tconst zipRegex = /^\\d{5}(-\\d{4})?$/;\r\n\t\t\tif (!zipRegex.test(trimmedValue)) {\r\n\t\t\t\terrorMessages.push(\"Please enter a valid ZIP code (e.g., 12345 or 12345-6789)\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Name validation (no numbers)\r\n\t\tif (question.id === \"first-name\" || question.id === \"last-name\") {\r\n\t\t\tconst nameRegex = /^[a-zA-Z\\s\\-'\\.]+$/;\r\n\t\t\tif (!nameRegex.test(trimmedValue)) {\r\n\t\t\t\terrorMessages.push(\"Name should only contain letters, spaces, hyphens, apostrophes, and periods\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Date of birth validation\r\n\t\tif (question.id === \"date-of-birth\" && question.type === \"date-part\") {\r\n\t\t\tconst { month, day, year } = trimmedValue;\r\n\t\t\tconst birthDate = new Date(year, month - 1, day);\r\n\t\t\tconst today = new Date();\r\n\t\t\tconst age = today.getFullYear() - birthDate.getFullYear();\r\n\r\n\t\t\tif (age < 18 || age > 120) {\r\n\t\t\t\terrorMessages.push(\"Please enter a valid date of birth (must be 18+ years old)\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Custom validation rules\r\n\t\tif (question.validation) {\r\n\t\t\tif (question.validation.minLength && trimmedValue.length < question.validation.minLength) {\r\n\t\t\t\terrorMessages.push(`Must be at least ${question.validation.minLength} characters`);\r\n\t\t\t}\r\n\r\n\t\t\tif (question.validation.maxLength && trimmedValue.length > question.validation.maxLength) {\r\n\t\t\t\terrorMessages.push(`Must be no more than ${question.validation.maxLength} characters`);\r\n\t\t\t}\r\n\r\n\t\t\tif (question.validation.pattern) {\r\n\t\t\t\tconst regex = new RegExp(question.validation.pattern);\r\n\t\t\t\tif (!regex.test(trimmedValue)) {\r\n\t\t\t\t\terrorMessages.push(question.validation.message || \"Invalid format\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_validatePhoneNumber(phone) {\r\n\t\t// Remove all non-digit characters\r\n\t\tconst cleaned = phone.replace(/\\D/g, \"\");\r\n\r\n\t\t// Check if it's a valid 10-digit US phone number\r\n\t\tif (cleaned.length === 10) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Check if it's a valid 11-digit number starting with 1 (US country code)\r\n\t\tif (cleaned.length === 11 && cleaned.startsWith(\"1\")) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateFieldValidationState(input, question, validationResult) {\r\n\t\t// Clear previous error state\r\n\t\tthis._clearFieldError(question.id, input);\r\n\r\n\t\tif (!validationResult.isValid) {\r\n\t\t\t// Add error state\r\n\t\t\tinput.classList.add(\"quiz-field-error-state\");\r\n\r\n\t\t\t// Show error message\r\n\t\t\tconst errorElement = this.container.querySelector(`#error-${question.id}`);\r\n\t\t\tif (errorElement) {\r\n\t\t\t\terrorElement.textContent = validationResult.errors[0];\r\n\t\t\t\terrorElement.style.display = \"block\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Add success state for some field types\r\n\t\t\tif (question.type === \"email\" || question.type === \"phone\") {\r\n\t\t\t\tinput.classList.add(\"quiz-field-success-state\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Update dropdown color for better UX\r\n\t\tif (input.tagName === \"SELECT\") {\r\n\t\t\tthis._updateDropdownColor(input);\r\n\t\t}\r\n\t}\r\n\r\n\t_clearFieldError(questionId, input) {\r\n\t\tif (input) {\r\n\t\t\tinput.classList.remove(\"quiz-field-error-state\", \"quiz-field-success-state\");\r\n\t\t}\r\n\r\n\t\tconst errorElement = this.container.querySelector(`#error-${questionId}`);\r\n\t\tif (errorElement) {\r\n\t\t\terrorElement.textContent = \"\";\r\n\t\t\terrorElement.style.display = \"none\";\r\n\t\t}\r\n\t}\r\n\r\n\t_updateDropdownColor(dropdown) {\r\n\t\tif (dropdown.value) {\r\n\t\t\tdropdown.style.color = \"#333\";\r\n\t\t} else {\r\n\t\t\tdropdown.style.color = \"#999\";\r\n\t\t}\r\n\t}\r\n\r\n\t_scrollToInvalidField(fieldElement) {\r\n\t\tif (!fieldElement) return;\r\n\r\n\t\t// Find the question container\r\n\t\tconst questionContainer = fieldElement.closest(\".quiz-question\") || fieldElement;\r\n\r\n\t\t// Scroll to the field with some offset for better visibility\r\n\t\tconst elementTop = questionContainer.getBoundingClientRect().top + window.pageYOffset;\r\n\t\tconst offset = 100; // Offset for header/navigation\r\n\r\n\t\twindow.scrollTo({\r\n\t\t\ttop: elementTop - offset,\r\n\t\t\tbehavior: \"smooth\"\r\n\t\t});\r\n\r\n\t\t// Focus the field after scrolling\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (fieldElement.focus) {\r\n\t\t\t\tfieldElement.focus();\r\n\t\t\t}\r\n\t\t}, 500);\r\n\t}\r\n\r\n\t// Real-time validation for individual fields\r\n\tattachRealTimeValidation(question, input) {\r\n\t\tif (!input || !question) return;\r\n\r\n\t\tconst validateField = () => {\r\n\t\t\tconst value = input.value;\r\n\t\t\tconst validationResult = this._validateFieldValue(question, value);\r\n\t\t\tthis.updateFieldValidationState(input, question, validationResult);\r\n\t\t\treturn validationResult.isValid;\r\n\t\t};\r\n\r\n\t\t// Validate on blur (when user leaves the field)\r\n\t\tinput.addEventListener(\"blur\", validateField);\r\n\r\n\t\t// For some field types, validate on input as well\r\n\t\tif (question.type === \"email\" || question.type === \"phone\") {\r\n\t\t\tlet debounceTimer;\r\n\t\t\tinput.addEventListener(\"input\", () => {\r\n\t\t\t\tclearTimeout(debounceTimer);\r\n\t\t\t\tdebounceTimer = setTimeout(validateField, 500); // Debounce for 500ms\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn validateField;\r\n\t}\r\n\r\n\t// Validate all visible fields in a container\r\n\tvalidateAllFields(container = this.container) {\r\n\t\tconst inputs = container.querySelectorAll(\"input, select, textarea\");\r\n\t\tlet allValid = true;\r\n\r\n\t\tinputs.forEach(input => {\r\n\t\t\tconst questionElement = input.closest(\"[data-question-id]\");\r\n\t\t\tif (!questionElement) return;\r\n\r\n\t\t\tconst questionId = questionElement.getAttribute(\"data-question-id\");\r\n\t\t\t// This would need question data - simplified for now\r\n\t\t\tconst isFieldValid = input.value.trim() !== \"\";\r\n\r\n\t\t\tif (!isFieldValid) {\r\n\t\t\t\tallValid = false;\r\n\t\t\t\tinput.classList.add(\"quiz-field-error-state\");\r\n\t\t\t} else {\r\n\t\t\t\tinput.classList.remove(\"quiz-field-error-state\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn allValid;\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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"}