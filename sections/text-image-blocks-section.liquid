{% comment %}
	Section file for the block-based Text with Image component.
	Uses the `text-image-blocks` snippet and defines allowed block types.
{% endcomment %}

{% if shop.name == 'CuraLife Global' %}
	{% if section.settings.is_hide_on_global %}
		{% assign hideSection = true %}
	{% elsif section.settings.section_additional_classes contains 'prime' or section.settings.section_additional_classes contains 'subscription' %}
		{% assign hideSection = true %}
	{% endif %}
{% endif %}

{% if section.settings.display_on_pages != blank %}
	{% assign isDisplayOnThisPage = false %}
	{% assign displayOnPagesArray = section.settings.display_on_pages | split: ',' %}
	{% for currentPage in displayOnPagesArray %}
		{% if request.path contains currentPage %}
			{% comment %} Use contains for flexibility {% endcomment %}
			{% assign isDisplayOnThisPage = true %}
			{% break %}
		{% endif %}
	{% endfor %}

	{% unless isDisplayOnThisPage %}
		{% assign hideSection = true %}
	{% endunless %}
{% endif %}

{% unless hideSection %}
	{% assign mainTitle = section.settings.main_title | default: section.settings.main_title_rich %}
	{% assign contentBG = section.settings.container_bg_color | default: section.settings.bg_color | default: 'white' %}

	{% if section.settings.anchor_id != blank %}<div id="{{ section.settings.anchor_id }}"></div>{% endif %}

	<section
		id="section-{{ section.id }}"
		class="text-image-blocks overflow-visible md:overflow-hidden text-image-{{ section.id }} {% if section.settings.is_sticky %}sticky-banner{% endif %} {% if section.settings.is_image_overlap %}min-h-[500px] md:min-h-auto{% endif %} {% if section.settings.is_decor_relative_full %}static{% endif %} {% unless section.settings.is_dynamic_height %}min-h-[400px]{% endunless %} {% if section.settings.is_remove_padding_top %}pt-0{% endif %} {% if section.settings.is_remove_padding_bottom %}pb-0{% endif %} {% if section.settings.display_on_utm_parmeters != blank %}!hidden{% endif %} {% if section.settings.is_image_overlap_style %}mb-[150px] md:mb-0{% endif %} {{ section.settings.section_additional_classes }}"
		{% if section.settings.display_on_url_param %}
			data-display-on-url-param="{{ section.settings.display_on_url_param | escape }}"
		{% endif %}
		data-section-id="{{ section.id }}"
		data-section-type="text-image-blocks-section">
		<div class="container main-container overflow-hidden flex flex-col justify-center text-center {% if section.settings.is_decor_relative_full %}static{% endif %} {% if section.settings.is_full_width %}!max-w-full !p-0{% endif %}">
			{% if mainTitle != blank or section.settings.main_subtitle != blank %}
				{% render 'title',
					section_id: section.id,
					title: mainTitle,
					title_tag: section.settings.title_tag,
					subtitle: section.settings.main_subtitle,
					title_color: section.settings.main_title_color,
					span_color: section.settings.title_highlight_color,
					padding_bottom: 30,
					is_reverse: section.settings.is_reverse_main_titles,
					is_balance_text: true
				%}
			{% endif %}

			{% comment %} Render the new block-based snippet {% endcomment %}
			{% render 'text-image-blocks',
				section_id: section.id,
				title_color: section.settings.title_color,
				title_highlight_color: section.settings.title_highlight_color,
				text_color: section.settings.text_color,
				border_color: section.settings.border_color,
				main_image: section.settings.image,
				main_mobile_image: section.settings.image_mobile,
				image_width: section.settings.image_width,
				image_link: section.settings.image_link,
				embedCode: section.settings.embed_code,
				videoURL: section.settings.video_embed,
				title: section.settings.title,
				subtitle: section.settings.subtitle,
				title_badge: section.settings.title_badge,
				content: section.settings.content,
				content_width: section.settings.content_width,
				max_width: section.settings.max_width,
				text_size: section.settings.text_size,
				title_tag: section.settings.title_tag,
				image_position: section.settings.image_position,
				alignment: section.settings.alignment,
				mobile_alignment: section.settings.mobile_alignment,
				is_no_p_margin: section.settings.is_no_p_margin,
				is_line_seperator: section.settings.is_line_seperator,
				is_dynamic_height: section.settings.is_dynamic_height,
				is_hide_description_on_mobile: section.settings.is_hide_description_on_mobile,
				is_image_cover: section.settings.is_image_cover,
				is_reverse_on_mobile: section.settings.is_reverse_on_mobile,
				is_hide_image_on_mobile: section.settings.is_hide_image_on_mobile,
				is_image_full_width_mobile: section.settings.is_image_full_width_mobile,
				is_image_middle_mobile: section.settings.is_image_middle_mobile,
				is_image_bottom: section.settings.is_image_bottom,
				is_image_overlap: section.settings.is_image_overlap,
				is_limit_image_size: section.settings.is_limit_image_size,
				is_remove_container_padding_mobile: section.settings.is_remove_container_padding_mobile,
				is_no_wrap: section.settings.is_no_wrap,
				is_image_overlap_style: section.settings.is_image_overlap_style,
				is_dont_lazyload: section.settings.is_dont_lazyload,
				is_force_original_image: section.settings.is_force_original_image,
				is_image_shadow: section.settings.is_image_shadow,
				shadow_opacity: section.settings.shadow_opacity,
				shadow_blur: section.settings.shadow_blur,
				shadow_position_inline: section.settings.shadow_position_inline,
				shadow_position_block: section.settings.shadow_position_block,
				content_animation: section.settings.content_animation,
				image_animation: section.settings.image_animation,
				animation_duration: section.settings.animation_duration,
				section_blocks: section.blocks
			%}
		</div>

		{% comment %} Decoration logic remains the same {% endcomment %}
		{% for block in section.blocks %}
			{% if block.type == 'decoration' %}
				{% render 'decoration',
					id: block.id,
					decor_img: block.settings.decor_img,
					decor_opacity: block.settings.decor_opacity,
					decor_max_width: block.settings.decor_max_width,
					decor_max_width_mobile: block.settings.decor_max_width_mobile,
					decor_position_top: block.settings.decor_position_top,
					decor_position_left: block.settings.decor_position_left,
					decor_position_top_mobile: block.settings.decor_position_top_mobile,
					decor_position_left_mobile: block.settings.decor_position_left_mobile,
					is_decor_above: block.settings.is_decor_above,
					is_decor_bg: block.settings.is_decor_bg,
					is_decor_relative_full: block.settings.is_decor_relative_full,
					is_decor_remove_on_desktop: block.settings.is_decor_remove_on_desktop,
					is_decor_remove_on_mobile: block.settings.is_decor_remove_on_mobile,
					is_dont_lazyload: section.settings.is_dont_lazyload
				%}
			{% endif %}
		{% endfor %}
	</section>

	{{ section.settings.additional_code }}

	{% comment %} Script for URL parameter display remains similar {% endcomment %}
	<script>
		(() => {
			const section = document.getElementById('section-{{ section.id }}');
			if (!section) return;

			const displayParam = section.dataset.displayOnUrlParam;
			if (displayParam) {
				const params = new URLSearchParams(window.location.search);
				if (!params.has(displayParam.split('=')[0]) || params.get(displayParam.split('=')[0]) !== displayParam.split('=')[1]) {
					section.style.display = 'none';
					return; // Hide section if param doesn't match
				}
			}

			// Legacy CTA param logic
			const ctaLegacyParam = new URLSearchParams(window.location.search).get('cta') === 'true';
			if (ctaLegacyParam) {
				document.querySelectorAll('.hide-on-cta').forEach(el => el.remove());
			}
		})();
	</script>

	{% if section.settings.is_sticky %}
		<div class="sticky-margin-{{ section.id }}"></div>
		<script>
			document.addEventListener('DOMContentLoaded', function () {
				var stickyMargin = document.querySelector('.sticky-margin-{{ section.id }}');
				var section = document.getElementById('section-{{ section.id }}');
				if (stickyMargin && section) {
					const updateMargin = () => {
						stickyMargin.style.height = section.offsetHeight + 'px';
					};
					updateMargin();
					// Optional: Add ResizeObserver if height can change dynamically after load
					const resizeObserver = new ResizeObserver(updateMargin);
					resizeObserver.observe(section);
				}
			});
		</script>
	{% endif %}

	{% comment %} Style section remains largely the same, applying to the section wrapper {% endcomment %}
	{% comment %} Specific block styles should ideally be in block files or global CSS {% endcomment %}
	<style>
		.text-image-blocks {
			display: flex;

		  @media (max-width: 768px) {
		    display: block;
		  }
		}

		.text-image-blocks .content a {
			color: var(--primary-color);
			text-decoration: underline;
		}

		.text-image-blocks .content a:has(button) {
		  text-decoration: unset;
		}

		#section-{{ section.id }} {
		  {% if section.settings.bg_image %}
		    background-image: url('{{ section.settings.bg_image | image_url }}');
		      background-size: cover;
		      background-repeat: no-repeat;
		      background-position: top;
		  {% endif %}

		  {% if section.settings.bg_color and section.settings.bg_width == 'full' %}
		    background-color: {{ section.settings.bg_color }};
		  {% endif %}

		  {% if section.settings.bg_image_mobile %}
		    @media (width < 768px) {
		      background-image: url('{{ section.settings.bg_image_mobile | image_url }}');
		    }
		  {% endif %}
		}

		#section-{{ section.id }} .container.main-container {
			@media (width < 768px) {
				width: unset;
			}

			{% if section.settings.bg_width == 'container' %}
		    {% unless section.settings.bg_color contains 'rgba(0,0,0,0)' %}background-color: {{ section.settings.bg_color }};{% endunless %}
		    padding: 30px;
		    border-radius: 5px;
		  {% endif %}

		  {% if section.settings.container_bg_color != blank %}
		    background: {{ section.settings.container_bg_color }};
		    padding: 50px 2rem;
		    border-radius: 15px;

				@media (max-width: 768px) {
					margin: 0 15px;
					padding-inline: 1rem;
				}
		  {% endif %}

		  {% if section.settings.border_color != blank %}
		    border: 1px solid {{ section.settings.border_color }};
		    padding: 2rem;
		  {% endif %}

		  {% if section.settings.is_full_width %}
		      /* Handled by class toggle above */
		  {% endif %}
		}
	</style>

	{% if section.settings.is_sticky %}
		<style>
			#section-{{ section.id }} {
			  position: sticky; /* Changed from fixed to sticky */
			  top: 0;
			  width: 100%;
			  z-index: 100;
			  filter: drop-shadow(0px 2px 12px rgba(47, 47, 47, 0.5));
			}

			/* Adjust margin logic if using sticky */
			   body {
			      /* Potential adjustment needed depending on header height */
			      /* Example: padding-top: var(--header-height); */
			   }
		</style>
	{% endif %}

	<style>
		#section-{{ section.id }} {
			{% if section.settings.padding_top != blank and section.settings.padding_top != 50 %}
				padding-top: {{ section.settings.padding_top }}px;
			{% endif %}

			{% if section.settings.padding_bottom != blank and section.settings.padding_bottom != 50 %}
				padding-bottom: {{ section.settings.padding_bottom }}px;
			{% endif %}

			@media screen and (max-width: 768px) {
				{% if section.settings.padding_top_mobile != blank %}
					padding-top: {{ section.settings.padding_top_mobile }}vw;
				{% endif %}

				{% if section.settings.padding_bottom_mobile != blank %}
					padding-bottom: {{ section.settings.padding_bottom_mobile }}vw;
				{% endif %}

				.container {
					max-width: 100% !important;
		      	max-height: unset !important;
				}
			}
		}
	</style>

	{% comment %} Decoration styles remain the same {% endcomment %}
{% endunless %}

{% schema %}
	{
		"name": "Text with Image (Blocks)",
		"tag": "section",
		"class": "text-image-blocks-section no-padding overflow-visible",
		"settings": [
			{
				"type": "header",
				"content": "Section Layout & Content"
			},
			{
				"type": "image_picker",
				"id": "image",
				"label": "Main Image"
			},
			{
				"type": "image_picker",
				"id": "image_mobile",
				"label": "Main Image on Mobile (Optional)"
			},
			{
				"type": "text",
				"id": "image_width",
				"label": "Limit Image Width (px)",
				"info": "For main image. Shopify CDN render size (optional)"
			},
			{
				"type": "html",
				"id": "embed_code",
				"label": "Main Embed Code (Optional, replaces image)"
			},
			{
				"type": "html",
				"id": "video_embed",
				"label": "Main Video URL/Embed (Optional, replaces image)"
			},
			{
				"type": "url",
				"id": "image_link",
				"label": "Main Image Link (Optional)"
			},
			{
				"type": "select",
				"id": "image_position",
				"label": "Image Position",
				"options": [
					{ "value": "right", "label": "Right" },
					{ "value": "left", "label": "Left" },
					{ "value": "bottom", "label": "Bottom" },
					{ "value": "top", "label": "Top" }
				],
				"default": "right"
			},
			{
				"type": "header",
				"content": "Section Titles (Optional)"
			},
			{
				"type": "text",
				"id": "main_title",
				"label": "Main Title"
			},
			{
				"type": "richtext",
				"id": "main_title_rich",
				"label": "Main Title (Rich Text)"
			},
			{
				"type": "text",
				"id": "main_subtitle",
				"label": "Main Subtitle"
			},
			{
				"type": "color",
				"id": "main_title_color",
				"label": "Main Title Color"
			},
			{
				"type": "checkbox",
				"id": "is_reverse_main_titles",
				"label": "Reverse Main Title/Subtitle Order"
			},
			{
				"type": "header",
				"content": "Content Area Settings"
			},
			{
				"type": "text",
				"id": "title",
				"label": "Content Area Title (Optional)",
				"info": "Displayed above the blocks."
			},
			{
				"type": "text",
				"id": "subtitle",
				"label": "Content Area Subtitle (Optional)"
			},
			{
				"type": "text",
				"id": "title_badge",
				"label": "Content Title Badge (Optional)"
			},
			{
				"type": "richtext",
				"id": "content",
				"label": "Content (Optional)",
				"info": "Legacy content field. Use blocks for complex layouts."
			},
			{
				"type": "select",
				"id": "title_tag",
				"label": "Content Title Tag",
				"options": [
					{ "value": "h1", "label": "H1" },
					{ "value": "h2", "label": "H2" },
					{ "value": "h3", "label": "H3" },
					{ "value": "h4", "label": "H4" },
					{ "value": "h5", "label": "H5" },
					{ "value": "h6", "label": "H6" }
				],
				"default": "h2"
			},
			{
				"type": "select",
				"id": "alignment",
				"label": "Content Text Alignment",
				"options": [
					{ "value": "start", "label": "Left" },
					{ "value": "center", "label": "Center" }
				],
				"default": "start"
			},
			{
				"type": "select",
				"id": "mobile_alignment",
				"label": "Content Text Alignment on Mobile",
				"options": [
					{ "value": "start", "label": "Left" },
					{ "value": "center", "label": "Center" }
				],
				"default": "start"
			},
			{
				"type": "range",
				"id": "content_width",
				"label": "Content Area Width",
				"min": 0,
				"max": 100,
				"step": 1,
				"unit": "%",
				"default": 45
			},
			{
				"type": "range",
				"id": "text_size",
				"label": "Default Text Size (in Blocks)",
				"min": 5,
				"max": 40,
				"step": 1,
				"unit": "px",
				"default": 18
			},
			{
				"type": "checkbox",
				"id": "is_no_p_margin",
				"label": "Remove Default Paragraph Margins (in Blocks)"
			},
			{
				"type": "checkbox",
				"id": "is_line_seperator",
				"label": "Show Line Separator After Content Title"
			},
			{
				"type": "checkbox",
				"id": "is_hide_description_on_mobile",
				"label": "Hide Legacy Content Field on Mobile"
			},
			{
				"type": "header",
				"content": "Section Styling & Behavior"
			},
			{
				"type": "color",
				"id": "bg_color",
				"label": "Background Color"
			},
			{
				"type": "color",
				"id": "title_color",
				"label": "Content Title Color"
			},
			{
				"type": "color",
				"id": "text_color",
				"label": "Default Text Color (in Blocks)"
			},
			{
				"type": "color",
				"id": "container_bg_color",
				"label": "Container Background Color"
			},
			{
				"type": "color",
				"id": "border_color",
				"label": "Container Border Color"
			},
			{
				"type": "color",
				"id": "title_highlight_color",
				"label": "Content Title Highlight Color (<strong>)"
			},
			{
				"type": "select",
				"id": "bg_width",
				"label": "Background Width",
				"options": [
					{ "value": "full", "label": "Full Width" },
					{ "value": "container", "label": "Container Width Only" }
				],
				"default": "full"
			},
			{
				"type": "checkbox",
				"id": "is_full_width",
				"label": "Make Container Full Width (No Padding)"
			},
			{
				"type": "range",
				"id": "max_width",
				"label": "Maximum Content Width",
				"min": 600,
				"max": 1200,
				"step": 10,
				"unit": "px",
				"default": 1200
			},
			{
				"type": "checkbox",
				"id": "is_dynamic_height",
				"label": "Enable Dynamic Height"
			},
			{
				"type": "checkbox",
				"id": "is_image_cover",
				"label": "Main Image Fit: Cover"
			},
			{
				"type": "checkbox",
				"id": "is_reverse_on_mobile",
				"label": "Reverse Layout on Mobile"
			},
			{
				"type": "checkbox",
				"id": "is_image_full_width_mobile",
				"label": "Make Main Image Full Width on Mobile"
			},
			{
				"type": "checkbox",
				"id": "is_image_middle_mobile",
				"label": "Put Main Image After Content Title on Mobile"
			},
			{
				"type": "checkbox",
				"id": "is_image_bottom",
				"label": "Align Main Image to Bottom"
			},
			{
				"type": "checkbox",
				"id": "is_image_overlap",
				"label": "Main Image Overlaps Container Edge"
			},
			{
				"type": "checkbox",
				"id": "is_limit_image_size",
				"label": "Limit Main Image Height (max 500px)"
			},
			{
				"type": "checkbox",
				"id": "is_no_wrap",
				"label": "Prevent Wrapping on Mobile"
			},
			{
				"type": "checkbox",
				"id": "is_image_overlap_style",
				"label": "Apply Overlap Image Style (Shadow/Position)"
			},
			{
				"type": "checkbox",
				"id": "is_dont_lazyload",
				"label": "Disable Lazy Load for Main Image"
			},
			{
				"type": "checkbox",
				"id": "is_sticky",
				"label": "Make Section Sticky"
			},
			{
				"type": "header",
				"content": "Main Image Shadow"
			},
			{
				"type": "checkbox",
				"id": "is_image_shadow",
				"label": "Enable Main Image Shadow"
			},
			{
				"type": "range",
				"id": "shadow_opacity",
				"label": "Shadow Opacity",
				"min": 0,
				"max": 1,
				"step": 0.1,
				"default": 0.3
			},
			{
				"type": "range",
				"id": "shadow_blur",
				"label": "Shadow Blur",
				"min": 0,
				"max": 100,
				"step": 1,
				"unit": "px",
				"default": 10
			},
			{
				"type": "range",
				"id": "shadow_position_inline",
				"label": "Shadow Position X",
				"min": -50,
				"max": 50,
				"step": 1,
				"unit": "px",
				"default": 0
			},
			{
				"type": "range",
				"id": "shadow_position_block",
				"label": "Shadow Position Y",
				"min": -50,
				"max": 50,
				"step": 1,
				"unit": "px",
				"default": 0
			},
			{
				"type": "header",
				"content": "Animations"
			},
			{
				"type": "select",
				"id": "content_animation",
				"label": "Content Area Animation",
				"options": [
					{ "value": "none", "label": "None" },
					{ "value": "fade-zoom-in", "label": "Fade" },
					{ "value": "fade-up", "label": "Fade Up" }
					// ... Add other AOS animations as needed
				],
				"default": "none"
			},
			{
				"type": "select",
				"id": "image_animation",
				"label": "Main Image Animation",
				"options": [
					{ "value": "none", "label": "None" },
					{ "value": "fade", "label": "Fade" },
					{ "value": "fade-up", "label": "Fade Up" }
					// ... Add other AOS animations as needed
				],
				"default": "none"
			},
			{
				"type": "range",
				"id": "animation_duration",
				"label": "Animation Duration",
				"min": 100,
				"max": 3000,
				"step": 100,
				"unit": "ms",
				"default": 1000
			},
			{
				"type": "header",
				"content": "Padding"
			},
			{
				"type": "number",
				"id": "padding_top",
				"label": "Padding Top (px)",
				"default": 50
			},
			{
				"type": "number",
				"id": "padding_bottom",
				"label": "Padding Bottom (px)",
				"default": 50
			},
			{
				"type": "number",
				"id": "padding_top_mobile",
				"label": "Padding Top Mobile (vw)"
			},
			{
				"type": "number",
				"id": "padding_bottom_mobile",
				"label": "Padding Bottom Mobile (vw)"
			},
			{
				"type": "checkbox",
				"id": "is_remove_container_padding_mobile",
				"label": "Remove Container Padding on Mobile"
			},
			{
				"type": "header",
				"content": "Visibility & Advanced"
			},
			{
				"type": "text",
				"id": "display_on_pages",
				"label": "Display Only On Pages (Comma-separated paths)",
				"info": "E.g., /products,/collections/all. Leave blank for all."
			},
			{
				"type": "text",
				"id": "display_on_utm_parmeters",
				"label": "Display Only On UTM Parameter (Deprecated)",
				"info": "Use 'Display Only on URL Parameter' instead."
			},
			{
				"type": "text",
				"id": "display_on_url_param",
				"label": "Display Only on URL Parameter",
				"info": "E.g., 'source=promo'. Shows section if param exists and matches."
			},
			{
				"type": "checkbox",
				"id": "is_hide_on_global",
				"label": "Hide Section On Global Store"
			},
			{
				"type": "checkbox",
				"id": "is_hide_image_on_mobile",
				"label": "Hide Main Image On Mobile"
			},
			{
				"type": "text",
				"id": "anchor_id",
				"label": "Anchor ID (for linking)"
			},
			{
				"type": "text",
				"id": "section_additional_classes",
				"label": "Additional CSS Classes for Section"
			},
			{
				"type": "textarea",
				"id": "additional_code",
				"label": "Additional Code (Liquid, JS, CSS)"
			}
		],
		"blocks": [
			{
				"type": "@app"
			},
			{
				"type": "text-block",
				"name": "Text"
				// Settings are defined in blocks/text-block.liquid
			},
			{
				"type": "image-block",
				"name": "Image"
				// Settings are defined in blocks/image-block.liquid
			},
			{
				"type": "button-block",
				"name": "Button"
				// Settings are defined in blocks/button-block.liquid
			},
			{
				"type": "video-block",
				"name": "Video"
				// Settings are defined in blocks/video-block.liquid
			},
			{
				"type": "countdown-block",
				"name": "Countdown"
				// Settings are defined in blocks/countdown-block.liquid
			},
			{
				"type": "code-block",
				"name": "Custom Code"
				// Settings are defined in blocks/code-block.liquid
			},
			{
				"type": "decoration",
				"name": "Decoration Image",
				"settings": [
					{
						"type": "image_picker",
						"id": "decor_img",
						"label": "Image"
					},
					{
						"type": "range",
						"id": "decor_opacity",
						"label": "Opacity",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 100
					},
					{
						"type": "range",
						"id": "decor_max_width",
						"label": "Max Width (Desktop)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 50
					},
					{
						"type": "range",
						"id": "decor_position_top",
						"label": "Position Top (Desktop)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 0
					},
					{
						"type": "range",
						"id": "decor_position_left",
						"label": "Position Left (Desktop)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 0
					},
					{
						"type": "range",
						"id": "decor_max_width_mobile",
						"label": "Max Width (Mobile)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 50
					},
					{
						"type": "range",
						"id": "decor_position_top_mobile",
						"label": "Position Top (Mobile)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 0
					},
					{
						"type": "range",
						"id": "decor_position_left_mobile",
						"label": "Position Left (Mobile)",
						"min": 0,
						"max": 100,
						"step": 1,
						"unit": "%",
						"default": 0
					},
					{
						"type": "checkbox",
						"id": "is_decor_above",
						"label": "Show Above Content"
					},
					{
						"type": "checkbox",
						"id": "is_decor_bg",
						"label": "Treat as Background Image"
					},
					{
						"type": "checkbox",
						"id": "is_decor_relative_full",
						"label": "Position Relative to Full Section Width"
					},
					{
						"type": "checkbox",
						"id": "is_decor_remove_on_desktop",
						"label": "Hide on Desktop"
					},
					{
						"type": "checkbox",
						"id": "is_decor_remove_on_mobile",
						"label": "Hide on Mobile"
					}
				]
			}
			// Removed old block types like 'text', 'button', 'image', 'countdown', 'code', 'item'
			// Their settings are now within the dedicated block files.
		],
		"presets": [
			{
				"name": "Text with Image (Blocks)",
				"blocks": [{ "type": "text-block" }, { "type": "button-block" }]
			}
		]
	}
{% endschema %}
