{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% assign variantsAmount = product.variants.size %}

{% assign giftsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}
	{% endcase %}
{% endfor %}

<div class="product-actions">
	<div class="purchase-options md:p-2 flex flex-col gap-2">
		<div class="purchase-type flex-nowrap flex w-full gap-2">
			{% assign subscriptionFeatures = 'Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs' | split: ',' %}
			<button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
				<span>
					Subscribe
					<div class="desktop">& Save</div>
					{% render 'tooltip',
						SID: SID,
						linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>',
						title: 'Subscription Details',
						description: '',
						features: subscriptionFeatures
					%}
				</span>
			</button>
			<button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
		</div>

		{% for var in product.variants %}
			<script>
				console.log('var: {{var.title}}');
			</script>
			{% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, index: forloop.index %}
		{% endfor %}

		{% if giftsAmount > 0 %}
			<div class="gift-selector-wrap">
				<div class="gift-selector-title mb-2">Your free gift:</div>

				<div class="gift-options flex-nowrap flex justify-start gap-4">
					{% for block in blocks %}
						{% case block.type %}
							{% when 'gift' %}
								{% assign show_gift = false %}
								{% if block.settings.show_on == 'both' %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'global' and isGlobal %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'us' and isGlobal == false %}
									{% assign show_gift = true %}
								{% endif %}

								{% if show_gift %}
									{% assign giftProd = block.settings.gift_product %}
									{% assign giftVariant = giftProd.selected_or_first_available_variant %}
									{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
									{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
									{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

									<div class="gift-option-container flex flex-col items-center">
										<div
											class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer"
											data-gift-id="{{ giftVariant.id }}"
											data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
											<div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
												<div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">✓</div>
											</div>

											<div class="gift-image-container flex justify-center">
												<img src="{{ giftThumb | image_url }}" alt="{{ giftProd.title }}" class="object-contain">
											</div>
										</div>

										<div class="gift-content text-center">
											<div class="gift-name mb-1 font-medium">{{ giftProd.title | replace: 'Free ', '' }}</div>
											<div class="gift-price flex items-center justify-center gap-2">
												<span class="original-price text-gray-500 line-through">{{ giftVariantSubscription.compare_at_price | money_with_currency }}</span>
												<span class="sale-price font-bold">FREE</span>
											</div>
										</div>
									</div>
								{% endif %}
						{% endcase %}
					{% endfor %}
				</div>
			</div>
		{% endif %}

		<div class="submit-wrap flex flex-col w-full">
			{% if shop.name == 'CuraLife Global' %}
				{% assign isGlobal = true %}
			{% endif %}

			<input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}" class="product-variant-id">
			<input class="submit-selling-plan-id" type="hidden" name="selling_plan" value="{{ selling_plan_id }}">

			<div class="product-form__buttons main-submit-wrapper flex">
				<button
					id="ProductSubmitButton-{{SID}}"
					data-variant-id="{{ variant | default: product.selected_or_first_available_variant.id }}"
					type="button"
					name="add"
					class="buy-button text-black product-form__submit button--full-width justify-center button--primary text-[20px] p-0 min-h-[50px] items-center bg-[--orange]">
					<!-- The text that should be shown normally -->
					<span class="submit-title">
						{% if buyType == 'buy_now' and shop.name != 'CuraLife Global' %}
							Buy Now
						{% else %}
							Add To Cart
						{% endif %}
					</span>
					<!-- Add a spinner element that will be toggled on loading -->
					<span class="loading-overlay__spinner" style="display: none; margin-left: 10px;">
						<!-- Example SVG spinner; customize as needed -->
						<svg width="24" height="24" viewBox="0 0 24 24" fill="none">
							<circle cx="12" cy="12" r="10" stroke="#000000" stroke-width="2" stroke-dasharray="31.415, 31.415" stroke-linecap="round">
								<animateTransform attributeName="transform" type="rotate" values="0 12 12;360 12 12" dur="1s" repeatCount="indefinite"/>
							</circle>
						</svg>
					</span>
				</button>
			</div>


			<div class="product-form__error-message-wrapper p-2 mt-1 text-center rounded-sm bg-[--light-red]" role="alert" hidden>
				<div class="error-wrapper flex items-center justify-center">
					<svg aria-hidden="true" focusable="false" class="icon icon-error h-[20px] mr-1" viewBox="0 0 13 13">
						<circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
						<circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
						<path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
						<path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 6.12061 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
					</svg>
					<span class="product-form__error-message text-[12px]"></span>
				</div>

				<div class="notice">
					Please
					<a class="underline" href="https://help{% if isGlobal %}-global{% endif %}.curalife.com/">Contact Us</a>
					, we'd love to help!
				</div>
			</div>

			{% if isBuyWithPrime and isGlobal != true and customer.b2b? == false %}
				<div class="bwp-button">
					{% render 'buy-with-prime-button' %}
				</div>
			{% endif %}

			{% if customer %}
				{% render 'yotpo-product-points-widget' %}
			{% endif %}
		</div>
	</div>
</div>

{% if customer.email contains 'yotam' and false %}
	<script>
		// Cart Gift Handler Module
		const CartGiftHandler = {
			giftProductMapping: {
				"curalin-black-friday-week": "free-curaslim",
				"curaslim-black-friday-week": "free-curalin",
				"curaslin-curaslim-black-friday-week": {"free-magnesium", "free-restful-sleep", "free-joint-care"}
			},

			init() {
				document.addEventListener('click', e => {
					const clickPath = e.composedPath();
					const deleteButton = clickPath.find(el =>
						el.classList && el.classList.contains('styles_TrashButton__deleteButton__8uIHq')
					);

					if (!deleteButton) return;
					console.log('Delete button found:', deleteButton);

					const productRow = clickPath.find(el =>
						el.classList && el.classList.contains('styles_ProductRow__product__AokJ5')
					);

					if (!productRow) return;
					console.log('Product row found:', productRow);

					this.handleDeleteButtonClick(deleteButton, productRow).catch(console.error);
				});
			},

			async handleDeleteButtonClick(deleteButton, productRow) {
				try {
					const titleLink = productRow.querySelector('.upcart-product-title-link');
					if (!titleLink) return;

					const handle = titleLink.href.split('/products/')[1].split('?')[0];
					console.log('Deleting product:', handle);

					const cart = await (await fetch('/cart.js')).json();
					console.log('Current cart:', cart.items);

					const itemsToRemove = cart.items.filter(item => {
						const itemHandle = item.url.split('/products/')[1].split('?')[0];
						return itemHandle === handle || itemHandle === this.giftProductMapping[handle];
					});

					console.log('Removing items:', itemsToRemove);

					if (itemsToRemove.length === 0) return;

					const updates = {};
					itemsToRemove.forEach(item => updates[item.key] = 0);

					const response = await fetch('/cart/update.js', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ updates })
					});

					console.log('Update response:', await response.json());
					location.reload();
				} catch (error) {
					console.error('Error:', error);
				}
			}
		};

		CartGiftHandler.init();
	</script>
{% endif %}

<script>
/* =====================================
	 HELPER FUNCTIONS FOR VALIDATION & UPDATES
	 ===================================== */

/**
 * Returns true if the given item is a subscription item.
 * A subscription must have a non‑empty, non‑zero selling_plan value.
 */
function isSubscriptionItem(item) {
	return !!(item.selling_plan && item.selling_plan !== '' && item.selling_plan !== '0');
}

/**
 * Returns true if the current purchase mode (as indicated by the selected button)
 * is subscription. This function is now defined in the global scope.
 */
function isSubscriptionSelected() {
	// Look for a button with class "subscription" that is selected.
	var btn = document.querySelector('.purchase-type button.selected');
	return btn ? btn.classList.contains('subscription') : true;
}

/**
 * Removes from the cart any line items for the given product that are of the opposite type.
 * For example, if desiredIsSubscription is true, this removes any buy‑once items.
 */
async function removeConflictingItems(cart, productId, desiredIsSubscription) {
	const conflictingItems = cart.items.filter(function(item) {
		return item.product_id === productId && (isSubscriptionItem(item) !== desiredIsSubscription);
	});
	if (conflictingItems.length > 0) {
		const updates = {};
		conflictingItems.forEach(function(item) {
			updates[item.key] = 0;
		});
		await fetch('/cart/update.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ updates: updates })
		});
		// Allow Shopify some time to process the removal.
		await new Promise(function(resolve) { setTimeout(resolve, 500); });
	}
}

/**
 * If a subscription item already exists for the product, enforce its quantity to be exactly 1.
 */
async function enforceSubscriptionQuantity(cart, productId) {
	const existingSubscription = cart.items.find(function(item) {
		return item.product_id === productId && isSubscriptionItem(item);
	});
	if (existingSubscription && existingSubscription.quantity !== 1) {
		const updates = {};
		updates[existingSubscription.key] = 1;
		const response = await fetch('/cart/update.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ updates: updates })
		});
		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(errorData.description);
		}
	}
}

/**
 * For a buy‑once item, if it already exists in the cart, update its quantity by adding the new amount.
 * Returns true if an update was performed.
 */
async function updateBuyOnceQuantity(cart, productId, quantityToAdd) {
	const existingBuyOnce = cart.items.find(function(item) {
		return item.product_id === productId && !isSubscriptionItem(item);
	});
	if (existingBuyOnce) {
		const updates = {};
		updates[existingBuyOnce.key] = existingBuyOnce.quantity + quantityToAdd;
		const response = await fetch('/cart/update.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ updates: updates })
		});
		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(errorData.description);
		}
		return true;
	}
	return false;
}

/**
 * Processes gift items.
 * For each gift, if it exists in the cart, update its quantity; otherwise, add it.
 */
async function processGiftItems(giftItems) {
	let cartResponse = await fetch('/cart.js');
	let currentCart = await cartResponse.json();
	for (const giftItem of giftItems) {
		const existingGift = currentCart.items.find(function(item) {
			return item.product_id === giftItem.product_id;
		});
		if (existingGift) {
			const updates = {};
			updates[existingGift.key] = existingGift.quantity + (giftItem.quantity || 1);
			await fetch('/cart/update.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ updates: updates })
			});
		} else {
			const giftResponse = await fetch('/cart/add.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ items: [giftItem] })
			});
			if (!giftResponse.ok) {
				const errorData = await giftResponse.json();
				throw new Error(errorData.description);
			}
		}
	}
}

/**
 * Validates the given item against the current cart to avoid conflicts.
 * For example, ensures you cannot mix subscription and one‑time items for the same product.
 */
async function validateCartItem(item, currentCart) {
	try {
		console.log('Validating item:', item);
		const productId = parseInt(item.product_id);
		if (!productId) {
			throw new Error('Product ID is missing for variant ' + item.id);
		}
		const isSub = !!item.selling_plan;
		const existingItems = currentCart.items.filter(function(cartItem) {
			return cartItem.product_id === productId;
		});
		if (existingItems.length > 0) {
			const hasSubscription = existingItems.some(function(cartItem) {
				return !!cartItem.selling_plan;
			});
			const hasBuyOnce = existingItems.some(function(cartItem) {
				return !cartItem.selling_plan;
			});
			if ((isSub && hasBuyOnce) || (!isSub && hasSubscription)) {
				return {
					isValid: false,
					error: {
						code: 'SUBSCRIPTION_CONFLICT',
						message: 'Cannot mix subscription and one-time purchases for the same product',
						type: 'error'
					}
				};
			}
		}
		// Optional: Validate gift item limits.
		const giftOptions = document.querySelectorAll('.gift-option-border');
		const isItemFree = Array.from(giftOptions).some(function(giftOption) {
			const giftId = isSubscriptionSelected() ? giftOption.dataset.giftIdSubscription : giftOption.dataset.giftId;
			return giftId === item.id.toString();
		});
		if (isItemFree) {
			const currentFreeItems = currentCart.items.filter(function(cartItem) {
				return Array.from(giftOptions).some(function(giftOption) {
					const giftId = isSubscriptionSelected() ? giftOption.dataset.giftIdSubscription : giftOption.dataset.giftId;
					return cartItem.variant_id.toString() === giftId;
				});
			});
			const bfcmDealCount = await countUniqueProductsWithTag(currentCart);
			if (currentFreeItems.length >= bfcmDealCount) {
				return {
					isValid: false,
					error: {
						code: 'FREE_ITEM_LIMIT',
						message: 'You can have up to ' + bfcmDealCount + ' free gift' + (bfcmDealCount !== 1 ? 's' : '') + ' (one for each BFCM deal in your cart).',
						type: 'error'
					}
				};
			}
		}
		return { isValid: true };
	} catch (error) {
		console.error('Validation error:', error);
		return {
			isValid: false,
			error: {
				code: 'VALIDATION_ERROR',
				message: 'Unable to validate item. Please try again.',
				type: 'error'
			}
		};
	}
}

/**
 * Counts unique products in the cart with a given tag (e.g., "Holiday Sale").
 */
async function countUniqueProductsWithTag(cart) {
	try {
		const uniqueProducts = cart.items.reduce(function(acc, item) {
			if (acc[item.product_id]) return acc;
			const hasHolidaySale = item.title && item.title.includes('Holiday Sale');
			console.log('Checking item:', item.title, 'Has Holiday Sale:', hasHolidaySale);
			acc[item.product_id] = hasHolidaySale;
			return acc;
		}, {});
		const count = Object.values(uniqueProducts).filter(function(val) { return val; }).length;
		return Math.max(count, 1);
	} catch (error) {
		console.error('Error counting products with tag:', error);
		return 1;
	}
}

/* =====================================
	 MAIN FUNCTION TO ADD ITEMS TO CART
	 ===================================== */

async function addValidItemsToCart(items) {
	try {
		// 1. Fetch the current cart.
		let cartResponse = await fetch('/cart.js');
		let currentCart = await cartResponse.json();

		// 2. Identify the main item (the one for the current product).
		const mainItem = items.find(function(item) {
			return item.product_id === currentProductId;
		});
		if (!mainItem) {
			throw new Error('Main product not found in items');
		}

		// 3. Determine the desired purchase mode.
		const desiredIsSubscription = isSubscriptionItem(mainItem);
		if (desiredIsSubscription) {
			mainItem.quantity = 1; // enforce subscription quantity
		} else {
			delete mainItem.selling_plan; // ensure buy-once items have no selling_plan
		}

		// 4. Remove any conflicting line items.
		await removeConflictingItems(currentCart, mainItem.product_id, desiredIsSubscription);
		cartResponse = await fetch('/cart.js');
		currentCart = await cartResponse.json();

		// 5. Validate the main item.
		const validation = await validateCartItem(mainItem, currentCart);
		if (!validation.isValid) {
			showNotification(validation.error.message, validation.error.type);
			return { success: false, error: validation.error };
		}

		// 6. Check if an item for this product already exists.
		let existingLineItem = currentCart.items.find(function(item) {
			return item.product_id === mainItem.product_id;
		});
		if (existingLineItem) {
			const existingIsSub = isSubscriptionItem(existingLineItem);
			if (existingIsSub !== desiredIsSubscription) {
				// Conflicting types: remove the existing line item.
				const updates = {};
				updates[existingLineItem.key] = 0;
				await fetch('/cart/update.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ updates: updates })
				});
				await new Promise(function(resolve) { setTimeout(resolve, 500); });
				existingLineItem = null;
			} else {
				// Same type exists.
				if (desiredIsSubscription) {
					// For subscription, enforce quantity to 1.
					await enforceSubscriptionQuantity(currentCart, mainItem.product_id);
					showNotification('Subscription already in cart (quantity enforced to 1)', 'info');
					return { success: true, addedItems: [] };
				} else {
					// For buy-once, update quantity.
					const updated = await updateBuyOnceQuantity(currentCart, mainItem.product_id, mainItem.quantity || 1);
					if (updated) {
						showNotification('Buy-once item quantity updated', 'success');
						return { success: true, addedItems: [] };
					}
				}
			}
		}

		// 7. No existing item remains – add the new item.
		const addResponse = await fetch('/cart/add.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ items: [mainItem] })
		});
		if (!addResponse.ok) {
			const errorData = await addResponse.json();
			throw new Error(errorData.description);
		}

		// 8. Process any gift items.
		const giftItems = items.filter(function(item) {
			return item.product_id !== currentProductId;
		});
		if (giftItems.length > 0) {
			await processGiftItems(giftItems);
		}

		showNotification('Items added to cart successfully', 'success');
		return { success: true, addedItems: items };
	} catch (error) {
		console.error('Cart error:', error);
		showNotification(error.message || 'Error adding items to cart', 'error');
		return { success: false, error: error };
	}
}

/* =====================================
	 AUXILIARY FUNCTIONS (NOTIFICATIONS, LOADING, VARIANT IMAGE)
	 ===================================== */

function showNotification(message, type = 'error') {
	if (!{{ isCartNotifications | default: false }}) {
		return;
	}
	const notification = document.createElement('div');
	notification.className = `cart-notification ${type} fixed bottom-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg max-w-md z-50 transition-opacity duration-300`;
	if (type === 'error') {
		notification.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
	} else if (type === 'success') {
		notification.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
	} else if (type === 'info') {
		notification.classList.add('bg-blue-100', 'border', 'border-blue-400', 'text-blue-700');
	}
	notification.innerHTML = `
		<div class="flex items-center">
			<div class="mr-3">
				${type === 'error' ? '⚠️' : type === 'success' ? '✅' : 'ℹ️'}
			</div>
			<div class="text-sm font-medium">${message}</div>
			<button class="hover:text-gray-500 ml-auto text-gray-400" onclick="this.parentElement.parentElement.remove()">✕</button>
		</div>
	`;
	document.body.appendChild(notification);
	setTimeout(function() {
		notification.classList.add('opacity-0');
		setTimeout(function() { notification.remove(); }, 300);
	}, 5000);
}

function toggleButtonLoading(buttonElement, isLoading) {
	if (!buttonElement) {
		console.error('Button element not found in toggleButtonLoading');
		return;
	}
	const loader = buttonElement.querySelector('.loading-overlay__spinner');
	const buttonText = buttonElement.querySelector('.button-text, .submit-title');
	if (!loader && !buttonText) {
		console.warn('Neither loader nor buttonText found; skipping toggleButtonLoading.');
		return;
	}
	if (loader) {
		loader.style.display = isLoading ? 'block' : 'none';
	}
	if (buttonText) {
		buttonText.style.display = isLoading ? 'none' : 'block';
	}
}

function updateVariantImage(element) {
	if (!element || !element.dataset.variant) {
		console.warn('Invalid element or missing data-variant attribute');
		return;
	}
	const SID = window.SID || '';
	const sliderId = 'productSliderAllInOne' + SID;
	let slider = window[sliderId];
	const targetVariantId = element.dataset.variant;
	console.log("Updating variant image for variant ID:", targetVariantId);
	if (!slider || !slider.slides || !slider.slides.length) {
		return new Promise(function(resolve) {
			const checkSlider = setInterval(function() {
				slider = window[sliderId];
				if (slider && slider.slides && slider.slides.length > 0) {
					clearInterval(checkSlider);
					performSlideUpdate(slider, targetVariantId);
					resolve();
				}
			}, 100);
			setTimeout(function() {
				clearInterval(checkSlider);
				console.warn('Slider initialization timed out');
				resolve();
			}, 5000);
		});
	}
	performSlideUpdate(slider, targetVariantId);
}

function performSlideUpdate(slider, targetVariantId) {
	try {
		if (!slider || !targetVariantId) {
			console.warn('Invalid slider or variant ID');
			return;
		}
		const slideIndex = Array.from(slider.slides).findIndex(function(slide) {
			return slide.getAttribute('data-variant-id') === targetVariantId;
		});
		if (slideIndex !== -1) {
			slider.update();
			requestAnimationFrame(function() {
				slider.slideTo(slideIndex, 300);
				setTimeout(function() {
					slider.update();
				}, 350);
			});
		} else {
			console.warn('No slide found with variant ID: ' + targetVariantId);
		}
	} catch (error) {
		console.error('Error during slide update:', error);
	}
}

/* =====================================
	 EVENT LISTENERS AND PURCHASE OPTIONS SETUP
	 ===================================== */

document.addEventListener('DOMContentLoaded', function() {
	const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
	if (!productActions) {
		console.error('Product actions container not found');
		return;
	}
	const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
	if (!purchaseOptionBoxes || purchaseOptionBoxes.length === 0) {
		console.error('No purchase option boxes found');
		return;
	}
	const SID = '{{ SID }}';
	window.SID = SID;
	const styleSheet = document.createElement("style");
	styleSheet.textContent = `
		.subscription-content, .buy-once-content {
			transition: opacity 0.3s ease-in-out;
		}
	`;
	document.head.appendChild(styleSheet);
	if (purchaseOptionBoxes.length > 0) {
		initializePurchaseOptions();
		setupMutationObserver();
	}
	const giftOptionContainers = document.querySelectorAll('.gift-option-container');
	giftOptionContainers.forEach(function(container) {
		container.addEventListener('click', function(event) {
			giftOptionContainers.forEach(function(gift) { gift.classList.remove('selected'); });
			container.classList.add('selected');
			updateRadioIndicator(container);
		});
	});
	if (giftOptionContainers.length > 0) {
		const firstGift = giftOptionContainers[0];
		firstGift.classList.add('selected');
		updateRadioIndicator(firstGift);
	}
	function updateRadioIndicator(selectedContainer) {
		giftOptionContainers.forEach(function(container) {
			const checkMark = container.querySelector('.check-mark');
			if (container === selectedContainer) {
				checkMark.classList.remove('hidden');
			} else {
				checkMark.classList.add('hidden');
			}
		});
	}
	function initializePurchaseOptions() {
		purchaseOptionBoxes.forEach(function(box) {
			box.setAttribute('data-purchase-type', 'subscribe');
		});
		const urlParams = new URLSearchParams(window.location.search);
		const defaultVariant = urlParams.get('default-variant') ? parseInt(urlParams.get('default-variant')) : {{ defaultSelectionIndex | default: 1 }};
		const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;
		purchaseOptionBoxes.forEach(function(box) {
			const subscriptionSellingPlanId = box.dataset.subscriptionSellingPlanId;
			if (!subscriptionSellingPlanId || subscriptionSellingPlanId === '0') {
				box.setAttribute('inert', '');
			}
			const subscriptionContent = box.querySelectorAll('.subscription-content');
			const buyOnceContent = box.querySelectorAll('.buy-once-content');
			box.classList.remove('selected');
			box.style.maxHeight = '68px';
			subscriptionContent.forEach(function(el) {
				el.style.display = 'block';
				el.style.opacity = '1';
			});
			buyOnceContent.forEach(function(el) {
				el.style.display = 'none';
				el.style.opacity = '0';
			});
			const radio = box.querySelector("input[type='radio']");
			if (radio) radio.checked = false;
		});
		let defaultBox = purchaseOptionBoxes[initialVariantIndex];
		if (defaultBox && defaultBox.hasAttribute('inert')) {
			defaultBox = Array.from(purchaseOptionBoxes).find(function(box) { return !box.hasAttribute('inert'); });
		}
		if (defaultBox) {
			defaultBox.classList.add('selected');
			defaultBox.style.transition = 'none';
			defaultBox.style.maxHeight = defaultBox.scrollHeight + 'px';
			defaultBox.offsetHeight;
			requestAnimationFrame(function() {
				defaultBox.style.transition = '';
			});
			const radio = defaultBox.querySelector("input[type='radio']");
			if (radio) radio.checked = true;
			const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
			const submitVariantElement = productActions.querySelector('.submit-variant-id');
			if (submitSellingPlanElement) {
				submitSellingPlanElement.value = defaultBox.dataset.subscriptionSellingPlanId || '';
			}
			if (submitVariantElement) {
				submitVariantElement.value = defaultBox.dataset.originalVariant || defaultBox.dataset.variant;
			}
			const toggleIcon = defaultBox.querySelector('.toggle-icon');
			if (toggleIcon) toggleIcon.style.display = 'block';
		}
		const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
		const buyOnceButton = productActions.querySelector('.purchase-type .buy-once');
		if (subscriptionButton && buyOnceButton) {
			subscriptionButton.classList.add('selected');
			buyOnceButton.classList.remove('selected');
		}
	}
	function setupMutationObserver() {
		const observer = new MutationObserver(function(mutations) {
			mutations.forEach(function(mutation) {
				if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
					const targetBox = mutation.target.closest('.purchase-option-box');
					if (targetBox && targetBox.classList.contains('selected')) {
						adjustMaxHeight(targetBox);
					}
				}
			});
		});
		purchaseOptionBoxes.forEach(function(element) {
			observer.observe(element, { attributes: true, attributeFilter: ['class'] });
		});
	}
	productActions.addEventListener('click', function(event) {
		const purchaseBox = event.target.closest('.purchase-option-box');
		if (purchaseBox) {
			togglePurchaseBox(purchaseBox);
		}
		const purchaseTypeButton = event.target.closest('.purchase-type button');
		if (purchaseTypeButton) {
			handlePurchaseTypeClick(event, purchaseTypeButton);
		}
		const checkoutButton = event.target.closest('.submit-wrap.subscription, .add-to-cart-button.buy-once, .submit-wrap button.main-btn');
		if (checkoutButton) {
			handleMainButtonClick(event, checkoutButton);
		}
	});
	function handlePurchaseTypeClick(event, button) {
		event.stopPropagation();
		const productActions = document.querySelector('.product-actions');
		const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
		const submitVariantElement = productActions.querySelector('.submit-variant-id');
		const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
		productActions.querySelectorAll('.purchase-type button').forEach(function(btn) { btn.classList.remove('selected'); });
		button.classList.add('selected');
		const isSub = button.classList.contains('subscription');
		purchaseOptionBoxes.forEach(function(box) {
			box.setAttribute('data-purchase-type', isSub ? 'subscribe' : 'buyonce');
		});
		const selectedBox = productActions.querySelector('.purchase-option-box.selected');
		if (selectedBox) {
			if (submitVariantElement) {
				submitVariantElement.value = isSub ? selectedBox.dataset.originalVariant : selectedBox.dataset.variant;
			}
			if (submitSellingPlanElement) {
				submitSellingPlanElement.value = isSub ? selectedBox.dataset.subscriptionSellingPlanId : '';
			}
			console.log('Selected box data:', {
				originalVariant: selectedBox.dataset.originalVariant,
				variant: selectedBox.dataset.variant,
				sellingPlanId: selectedBox.dataset.subscriptionSellingPlanId,
				isSubscription: isSub
			});
		}
		purchaseOptionBoxes.forEach(function(box) {
			const subscriptionContent = box.querySelectorAll('.subscription-content');
			const buyOnceContent = box.querySelectorAll('.buy-once-content');
			const currentContent = isSub ? buyOnceContent : subscriptionContent;
			const newContent = isSub ? subscriptionContent : buyOnceContent;
			currentContent.forEach(function(el) { el.style.opacity = '0'; });
			setTimeout(function() {
				currentContent.forEach(function(el) { el.style.display = 'none'; });
				newContent.forEach(function(el) {
					el.style.display = 'block';
					el.style.opacity = '0';
				});
				requestAnimationFrame(function() {
					newContent.forEach(function(el) { el.style.opacity = '1'; });
				});
			}, 300);
			if (isSub) {
				const sellingPlanId = box.dataset.subscriptionSellingPlanId;
				if (!sellingPlanId || sellingPlanId === '0') {
					box.setAttribute('inert', '');
				} else {
					box.removeAttribute('inert');
				}
			} else {
				box.removeAttribute('inert');
			}
			{% unless product.metafields.custom.is_price_per_month %}
			const perMonthElement = box.querySelector('.per-month');
			if (perMonthElement) {
				perMonthElement.style.display = isSub ? 'block' : 'none';
			}
			{% endunless %}
			const comparedAtPrice = box.querySelector('.compared-at-price');
			if (comparedAtPrice) {
				const itemPrice = parseFloat(box.dataset.itemPrice);
				const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
				const originalItemCap = parseFloat(box.dataset.originalItemCap);
				const currentPrice = isSub ? subscriptionItemPrice : itemPrice;
				comparedAtPrice.style.opacity = '0';
				setTimeout(function() {
					if (originalItemCap > currentPrice) {
						comparedAtPrice.style.display = 'block';
						requestAnimationFrame(function() {
							comparedAtPrice.style.opacity = '1';
						});
					} else {
						comparedAtPrice.style.display = 'none';
					}
				}, 300);
			}
		});
		if (selectedBox && selectedBox.hasAttribute('inert')) {
			const firstAvailableBox = Array.from(purchaseOptionBoxes).find(function(box) {
				return !box.hasAttribute('inert');
			});
			if (firstAvailableBox) {
				selectedBox.classList.remove('selected');
				selectedBox.style.maxHeight = '68px';
				const selectedToggleIcon = selectedBox.querySelector('.toggle-icon');
				if (selectedToggleIcon) selectedToggleIcon.style.display = 'none';
				firstAvailableBox.classList.add('selected');
				adjustMaxHeight(firstAvailableBox);
				const newToggleIcon = firstAvailableBox.querySelector('.toggle-icon');
				if (newToggleIcon) newToggleIcon.style.display = 'block';
				if (submitSellingPlanElement) {
					submitSellingPlanElement.value = isSub ? firstAvailableBox.dataset.subscriptionSellingPlanId : '';
				}
				if (submitVariantElement) {
					submitVariantElement.value = isSub ? firstAvailableBox.dataset.originalVariant : firstAvailableBox.dataset.variant;
				}
				const radioInput = firstAvailableBox.querySelector("input[type='radio']");
				if (radioInput) radioInput.checked = true;
				updateYotpoPointsWidget(firstAvailableBox);
			}
		}
		const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
		if (selectedGiftContainer) {
			const giftBorder = selectedGiftContainer.querySelector('.gift-option-border');
			const giftId = isSub ? giftBorder.getAttribute('data-gift-id-subscription') : giftBorder.getAttribute('data-gift-id');
			if (!giftId) {
				console.warn('No valid gift ID found for', isSub ? 'subscription' : 'one-time', 'purchase');
			}
		}
	}
	function adjustMaxHeight(element) {
		const openHeight = element.scrollHeight;
		element.style.maxHeight = openHeight + 'px';
	}
	function togglePurchaseBox(element) {
		if (element.classList.contains('selected')) return;
		const previousSelected = productActions.querySelector('.purchase-option-box.selected');
		if (previousSelected) {
			previousSelected.classList.remove('selected');
			previousSelected.style.maxHeight = '68px';
			const toggleIcon = previousSelected.querySelector('.toggle-icon');
			if (toggleIcon) toggleIcon.style.display = 'none';
		}
		element.classList.add('selected');
		element.style.maxHeight = element.scrollHeight + 'px';
		const toggleIcon = element.querySelector('.toggle-icon');
		if (toggleIcon) toggleIcon.style.display = 'block';
		const isSub = isSubscriptionSelected();
		const sellingPlanId = isSub ? element.dataset.subscriptionSellingPlanId : '';
		const variantId = isSub ? element.dataset.originalVariant : element.dataset.variant;
		const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
		const submitVariantElement = productActions.querySelector('.submit-variant-id');
		if (submitSellingPlanElement) {
			submitSellingPlanElement.value = sellingPlanId;
		}
		if (submitVariantElement) {
			submitVariantElement.value = variantId;
		}
		const radioInput = element.querySelector("input[type='radio']");
		if (radioInput) radioInput.checked = true;
		updateYotpoPointsWidget(element);
	}
	function updateYotpoPointsWidget(parentBox) {
		const price = isSubscriptionSelected() ? parentBox.dataset.subscriptionItemPrice : parentBox.dataset.itemPrice;
		const newPoints = Math.floor(Number(price) / 100);
		const pointsElement = productActions.querySelector('.reward-points-widget .current-price');
		if (pointsElement) pointsElement.textContent = newPoints;
	}

	// --------------------------
	// MAIN BUTTON CLICK HANDLER
	// --------------------------

	// Provide a basic implementation for handleMainButtonClick
	function handleMainButtonClick(event, checkoutButton) {
		// For this script, the submit button is handled separately.
		// If needed, you could add additional behavior here.
	}

	// Attach event listener to the submit button.
	const submitButton = document.getElementById('ProductSubmitButton-{{SID}}');
	submitButton.addEventListener('click', async function(event) {
		event.preventDefault();
		if (!productActions) return;
		toggleButtonLoading(submitButton, true);
		try {
			const variantIdInput = productActions.querySelector('.submit-variant-id');
			const sellingPlanIdInput = productActions.querySelector('.submit-selling-plan-id');
			const hasGiftOptions = document.querySelector('.gift-option-container') !== null;
			const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
			const giftOptionBorder = selectedGiftContainer ? selectedGiftContainer.querySelector('.gift-option-border') : null;
			if (!variantIdInput) throw new Error('Variant ID input not found');
			const isSub = !!sellingPlanIdInput.value;
			let giftId = null;
			if (giftOptionBorder) {
				giftId = isSub ?
					(giftOptionBorder.getAttribute('data-gift-id-subscription') || giftOptionBorder.getAttribute('data-gift-id')) :
					giftOptionBorder.getAttribute('data-gift-id');
			}
			const variantId = variantIdInput.value;
			if (!variantId) {
				showNotification('Missing variant ID', 'error');
				return;
			}
			const items = [{
				id: variantId,
				product_id: currentProductId,
				quantity: 1,
				...(sellingPlanIdInput.value && { selling_plan: sellingPlanIdInput.value })
			}];
			if (hasGiftOptions) {
				if (!giftId) {
					showNotification('Please select a gift', 'error');
					return;
				}
				items.push({
					id: giftId,
					product_id: {{ giftProd.id | default: 'null' }},
					quantity: 1
				});
			}
			{% if buyType == "buy_now" and shop.name != "CuraLife Global" %}
			const cartDrawer = document.getElementById('upCart');
			if (cartDrawer) cartDrawer.remove();
			await fetch('/cart/clear.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' }
			});
			{% endif %}
			const result = await addValidItemsToCart(items);
			if (result.success) {
				{% if buyType == "buy_now" and shop.name != "CuraLife Global" %}
				window.location.href = '/checkout';
				{% endif %}
			} else if (result.error) {
				showNotification(result.error.message || 'Failed to add items to cart', 'error');
			}
		} catch (error) {
			showNotification(error.message || 'An unexpected error occurred', 'error');
		} finally {
			toggleButtonLoading(submitButton, false);
		}
	});
});
</script>


{% if giftsAmount > 0 %}
	<style>
		.gift-selector-wrap {
			margin: 1rem 0;
		}

		.gift-option-border {
			transition: all 0.3s ease;
			border: 2px solid #e5e7eb;
			background: #fff;
			width: 120px;
			aspect-ratio: 1/1;

			@media (width < 768px) {
				width: 100%;
				height: unset;
			}
		}

		.gift-option-border:hover {
			border-color: var(--primary-color-lighter);
		}

		.gift-option-container.selected .gift-option-border {
			border-color: var(--primary-color);
			background-color: rgba(var(--primary-color-rgb), 0.05);
		}

		.check-mark {
			transition: all 0.2s ease;
			margin-top: -4px;
			margin-left: 3px;
		}

		.check-mark.hidden {
			display: none;
		}

		.radio-indicator {
			transition: all 0.2s ease;
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 16px;
		}

		.gift-option-container.selected .radio-indicator {
			background-color: var(--primary-color);
		}

		@media (width < 768px) {
			.gift-content {
				font-size: 3.5vw;
			}
		}

		.sale-price {
			color: var(--primary-color-dark);
		}
	</style>
{% endif %}

<style>
	#cta-section-{{ SID }} .purchase-type button {
	  background-color: var(--primary-color);
	  color: black;
	  border-radius: 5px;
	  font-size: 16px;
	  min-width: 49%;
	  padding: 0.5rem;

	  &.selected {
	    color: white !important;
	  }

	  &:not(.selected) {
	    background: var(--primary-color-lighter);
	    border: 1px solid var(--primary-color);

	    .subscription-details {
	      color: var(--primary-color-dark);
	    }
	  }
	}

	#cta-section-{{ SID }} .purchase-option-box .radio-box input[type='radio'] {
	    display: none;
	}

	#cta-section-{{ SID }} .purchase-option-box .radio-box label {
	    cursor: pointer;
	    width: 19px;
	    height: 19px;
	    border: 1px solid var(--primary-color);
	    border-radius: 50%;
	    position: relative;
	}

	#cta-section-{{ SID }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
	    content: '\2713';
	    position: absolute;
	    top: -2px;
	    left: -2px;
	    width: 20px;
	    height: 20px;
	    border-radius: 50%;
	    background: var(--primary-color);
	    text-align: center;
	    line-height: 22px;
	    color: #fff;
	}

	#cta-section-{{ SID }} .product-actions {
	  grid-area: 2/2/3/3;
	  min-height: 415px;

	  @media (width < 768px) {
	    grid-area: unset;
	    grid-row: 3;
	    max-width: unset;
	    min-height: unset;
	  }
	}

	#cta-section-{{ SID }} .purchase-option-box {
	  background: #fff;
	  border: 1px solid #cbcbcb;
	  cursor: pointer;
	  filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
	  transition: max-height 0.5s ease-in-out;
	  border-radius: 10px;
	  border-color: var(--primary-color);
	  overflow: hidden;
	  padding: 0.75rem 1rem;
	max-height: 68px;
	will-change: max-height;
	contain: layout;

	  &:hover {
	    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
	  }

	  &.selected {
	    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
	    border-width: 3px;
	    max-height: max-content;
		max-height: 200px;
	  }

	  &[inert] {
	    max-height: 68px !important;
	    background: #ededed;
	    opacity: 0.6;

	    .option-title {
	      color: grey;
	    }
	  }

	  @media (width < 1270px) {
	    width: 100%;
	  }

	  @media (width < 768px) {
	    font-size: 4vw;
	  }

	  .radio-box {
	    align-items: center;
	    display: flex;

	    @media (width < 768px) {
	      padding: 3vw 0;
	    }
	  }

	  .price-wrapper {
	    .total-price {
	      color: var(--primary-color-dark);
	    }

	    .compared-at-price {
	      color: var(--primary-color-light);
	    }
	  }
	}

	.subscription-content,
	.buy-once-content,
	.subtitle.subscription,
	.subtitle.buy-once {
	  transition: opacity 0.3s ease-in-out;
	}

	/* Initial states */
	.subscription-content,
	.buy-once-content,
	.subtitle.subscription,
	.subtitle.buy-once {
	  opacity: 0;
	  display: none;
	}

	/* Active states */
	.subscription-content.active,
	.buy-once-content.active,
	.subtitle.subscription.active,
	.subtitle.buy-once.active {
	  opacity: 1;
	  display: block;
	}
</style>
