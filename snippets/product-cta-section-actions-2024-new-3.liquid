{% assign variantsAmount = prod.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in prod.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: prod, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, saveFormat: saveFormat, index: forloop.index %}
    {% endfor %}

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button subscription">
        {% render 'buy-buttons', SID: SID, product: prod, variant: '', buttonText: "Subscribe Now", selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: 'buy_now', isBuyWithPrime: isBuyWithPrime %}
      </div>
      <div class="checkout-button buy-once hidden">
        {% render 'buy-buttons', SID: SID, product: prod, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.65rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px; /* Start all boxes collapsed */
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    max-height: max-content;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-options .purchase-type {
    font-weight: 600px;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    max-height: 30px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .terms {
    margin-left: 32px;

    @media (max-width: 767px) {
      margin-left: 5vw;
    }
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
      padding: 3vw;
      max-height: 16vw;

      &.selected {
        max-height: none;
      }

      .top-wrapper {
        min-height: 9vw;
      }

      .left-wrapper {
        gap: 2vw;
      }

      .option-title {
        font-size: 3.9vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .terms {
        .subtitle, .terms-title {
          font-size: 3.5vw;
        }
      }

      .radio-box {
        label {
          width: 3vw;
          height: 3vw;

          &:after {
            font-size: 2vw;
            width: 3vw !important;
            height: 3vw !important;
            top: -0.25vw !important;
            left: -0.25vw !important;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }

    #cta-section-{{ section.id }} .purchase-option-box.selected {
      max-height: max-content;
    }

    #cta-section-{{ section.id }} .purchase-option-box[inert] {
      max-height: 16vw !important;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const productActions = document.querySelector('[id^="product-actions-"]');
  if (!productActions) {
    console.error('Product actions element not found');
    return;
  }

  const SID = productActions.id.split('-').pop();

  // Cache frequently accessed elements
  const purchaseTypeButtons = {
    subscription: productActions.querySelector('.purchase-type .subscription'),
    buyOnce: productActions.querySelector('.purchase-type .buy-once'),
  };

  const checkoutButtons = {
    subscription: productActions.querySelector('.checkout-button.subscription'),
    buyOnce: productActions.querySelector('.checkout-button.buy-once'),
  };

  const purchaseOptionBoxes = Array.from(productActions.querySelectorAll('.purchase-option-box'));
  const subscriptionSubmitButton = checkoutButtons.subscription?.querySelector('button');
  const buyOnceSubmitButton = checkoutButtons.buyOnce?.querySelector('button');
  const subscriptionBenefits = document.querySelector('.subscription-benefits');

  const enableToggleAnimation = typeof isVariantBoxToggle !== 'undefined' ? isVariantBoxToggle : false;
  const variantsAmount = purchaseOptionBoxes.length;

  const state = {
    isSubscriptionSelected: true, // Default to subscription selected
    selectedBox: null,
  };

  let isSubscriptionButtonListenerAttached = false;

  function getClosedHeight() {
    return window.innerWidth <= 767 ? '16vw' : '72px';
  }

  const formatPrice = (cents) => (cents / 100).toFixed(2);

  function safelySetStyle(element, property, value) {
    if (element?.style && element.style[property] !== value) {
      element.style[property] = value;
    }
  }

  function safelyAddClass(element, className) {
    if (element && !element.classList.contains(className)) {
      element.classList.add(className);
    }
  }

  function safelyRemoveClass(element, className) {
    if (element && element.classList.contains(className)) {
      element.classList.remove(className);
    }
  }

  function setupSubscriptionButton() {
    if (isSubscriptionButtonListenerAttached) return;
    if (subscriptionSubmitButton) {
      subscriptionSubmitButton.addEventListener('click', handleSubscriptionSubmit);
      isSubscriptionButtonListenerAttached = true;
    }
  }

  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = parseInt(urlParams.get('default-variant')) || (typeof defaultSelectionIndex !== 'undefined' ? defaultSelectionIndex : 1);

    safelyAddClass(purchaseTypeButtons.subscription, 'selected');
    state.isSubscriptionSelected = true;

    const initialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
    const defaultBox = purchaseOptionBoxes[initialDefaultVariant];
    if (defaultBox) {
      safelyAddClass(defaultBox, 'selected');
      defaultBox.querySelector("input[type='radio']")?.checked = true;
      state.selectedBox = defaultBox;
    }

    purchaseOptionBoxes.forEach((box, index) => {
      if (index !== initialDefaultVariant) {
        safelySetStyle(box, 'maxHeight', getClosedHeight());
        updatePriceDisplay(box, state.isSubscriptionSelected, false);
      }
    });

    setupSubscriptionButton();
    toggleSubscriptionBenefits(true);
  }

  function togglePurchaseType(isSubscription) {
    if (state.isSubscriptionSelected === isSubscription) return;

    state.isSubscriptionSelected = isSubscription;

    safelyRemoveClass(purchaseTypeButtons.subscription, 'selected');
    safelyRemoveClass(purchaseTypeButtons.buyOnce, 'selected');
    safelyAddClass(isSubscription ? purchaseTypeButtons.subscription : purchaseTypeButtons.buyOnce, 'selected');

    purchaseOptionBoxes.forEach(box => {
      const elements = {
        subscription: box.querySelectorAll('.subscription'),
        buyOnce: box.querySelectorAll('.buy-once'),
        perMonth: box.querySelector('.per-month'),
        saveTag: {
          subscription: box.querySelector('.save-title.subscription'),
          buyOnce: box.querySelector('.save-title.buy-once'),
        },
        subtitle: {
          subscription: box.querySelector('.subtitle.subscription'),
          buyOnce: box.querySelector('.subtitle.buy-once'),
        },
      };

      if (isSubscription) {
        toggleElementVisibility(elements.perMonth, true);
        fadeElements(elements.buyOnce, elements.subscription);
        toggleElementVisibility(elements.saveTag.subscription, true);
        toggleElementVisibility(elements.saveTag.buyOnce, false);
        toggleElementVisibility(elements.subtitle.subscription, true);
        toggleElementVisibility(elements.subtitle.buyOnce, false);

        const sellingPlanId = parseInt(box.dataset.subscriptionSellingPlanId);
        box.toggleAttribute('inert', sellingPlanId <= 0);
        if (sellingPlanId <= 0) safelyRemoveClass(box, 'selected');
      } else {
        toggleElementVisibility(elements.perMonth, false);
        fadeElements(elements.subscription, elements.buyOnce);
        toggleElementVisibility(elements.saveTag.buyOnce, true);
        toggleElementVisibility(elements.saveTag.subscription, false);
        toggleElementVisibility(elements.subtitle.buyOnce, true);
        toggleElementVisibility(elements.subtitle.subscription, false);

        box.removeAttribute('inert');
      }

      updatePriceDisplay(box, isSubscription, true);
      adjustMaxHeight(box);
    });

    if (checkoutButtons.subscription && checkoutButtons.buyOnce) {
      safelyToggleClass(checkoutButtons.subscription, 'hidden', !isSubscription);
      safelyToggleClass(checkoutButtons.buyOnce, 'hidden', isSubscription);
      toggleSubscriptionBenefits(isSubscription);
    }

    if (!document.querySelector('.purchase-option-box.selected')) {
      const firstNonInertBox = document.querySelector('.purchase-option-box:not([inert])');
      if (firstNonInertBox) togglePurchaseBox(firstNonInertBox);
    }
  }

  function fadeElements(elementsToHide, elementsToShow, duration = 200) {
    elementsToHide.forEach(el => fadeOut(el, duration));
    setTimeout(() => {
      elementsToShow.forEach(el => fadeIn(el, 'inline-block', duration));
    }, duration);
  }

  function fadeOut(element, duration = 200) {
    if (!element || getComputedStyle(element).display === 'none') return;
    element.style.transition = `opacity ${duration}ms ease-out`;
    element.style.opacity = '0';
    setTimeout(() => {
      element.style.display = 'none';
      element.style.transition = '';
    }, duration);
  }

  function fadeIn(element, display = 'inline-block', duration = 200) {
    if (!element) return;
    element.style.opacity = '0';
    element.style.display = display;
    element.style.transition = `opacity ${duration}ms ease-in`;
    element.offsetHeight; // Force reflow
    element.style.opacity = '1';
    setTimeout(() => {
      element.style.transition = '';
    }, duration);
  }

  function toggleSubscriptionBenefits(show) {
    if (!subscriptionBenefits) return;
    const duration = 300;

    subscriptionBenefits.classList.toggle('hidden', !show);
    subscriptionBenefits.style.cssText = `
      overflow: hidden;
      max-height: ${show ? 0 : subscriptionBenefits.scrollHeight}px;
      opacity: ${show ? 0 : 1};
      margin-top: ${show ? 0 : '0.5rem'};
      transition: max-height ${duration}ms ease-out, opacity ${duration}ms ease-out, margin-top ${duration}ms ease-out;
    `;

    subscriptionBenefits.offsetHeight; // Force reflow
    subscriptionBenefits.style.cssText = `
      overflow: hidden;
      max-height: ${show ? subscriptionBenefits.scrollHeight : 0}px;
      opacity: ${show ? 1 : 0};
      margin-top: ${show ? '0.5rem' : 0};
      transition: max-height ${duration}ms ease-out, opacity ${duration}ms ease-out, margin-top ${duration}ms ease-out;
    `;

    setTimeout(() => {
      subscriptionBenefits.style.cssText = '';
    }, duration);
  }

  function toggleElementVisibility(element, show) {
    if (!element) return;
    element.style.display = show ? '' : 'none';
    element.classList.toggle('hidden', !show);
  }

  function safelyToggleClass(element, className, condition) {
    if (element) element.classList.toggle(className, condition);
  }

  function updatePriceDisplay(box, isSubscriptionSelected, animate = true) {
    const data = {
      itemPrice: parseInt(box.dataset.itemPrice) || 0,
      subscriptionItemPrice: parseInt(box.dataset.subscriptionItemPrice) || 0,
      bottleQuantity: parseInt(box.dataset.bottleQuantity) || 1,
      originalItemCap: parseInt(box.dataset.originalItemCap) || 0,
      pricePer: box.dataset.pricePer || 'total',
    };

    const currentPrice = isSubscriptionSelected ? data.subscriptionItemPrice : data.itemPrice;
    const totalPrice = currentPrice * data.bottleQuantity;
    const elements = {
      subscriptionPrice: box.querySelector('.real-price.subscription'),
      buyOncePrice: box.querySelector('.real-price.buy-once'),
      totalPrice: box.querySelector(`.total-price${isSubscriptionSelected ? '.subscription' : '.buy-once'}`),
      comparedAtPrice: box.querySelector('.compared-at-price'),
      saveTag: box.querySelector('.save-title'),
      perMonth: box.querySelector('.per-month'),
    };

    const updateContent = () => {
      const displayPrice = data.pricePer === 'month' ? currentPrice : totalPrice;
      const comparedAtPrice = data.pricePer === 'month' ? data.originalItemCap : data.originalItemCap * data.bottleQuantity;
      const shouldShowComparedPrice = comparedAtPrice > displayPrice;

      elements[isSubscriptionSelected ? 'subscriptionPrice' : 'buyOncePrice'].textContent = '$' + formatPrice(displayPrice);
      elements.totalPrice.textContent = '$' + formatPrice(totalPrice);

      if (elements.comparedAtPrice) {
        elements.comparedAtPrice.textContent = '$' + formatPrice(comparedAtPrice);
        toggleElementVisibility(elements.comparedAtPrice, shouldShowComparedPrice);
      }

      if (elements.saveTag) {
        toggleElementVisibility(elements.saveTag.querySelector('.subscription'), isSubscriptionSelected && shouldShowComparedPrice);
        toggleElementVisibility(elements.saveTag.querySelector('.buy-once'), !isSubscriptionSelected && shouldShowComparedPrice);
      }

      toggleElementVisibility(elements.perMonth, data.pricePer === 'month' && isSubscriptionSelected);
    };

    if (animate) {
      fadeElements(
        [elements[isSubscriptionSelected ? 'buyOncePrice' : 'subscriptionPrice']],
        [elements[isSubscriptionSelected ? 'subscriptionPrice' : 'buyOncePrice']]
      );
      setTimeout(updateContent, 200);
    } else {
      updateContent();
    }
  }

  function adjustMaxHeight(element) {
    if (enableToggleAnimation) {
      safelySetStyle(element, 'maxHeight', element.classList.contains('selected') ? element.scrollHeight + 'px' : getClosedHeight());
    } else {
      safelySetStyle(element, 'maxHeight', 'none');
    }
  }

  function togglePurchaseBox(element) {
    if (!element || element.hasAttribute('inert') || state.selectedBox === element) return;

    if (state.selectedBox) {
      safelyRemoveClass(state.selectedBox, 'selected');
      safelySetStyle(state.selectedBox, 'maxHeight', getClosedHeight());
    }

    safelyAddClass(element, 'selected');
    element.querySelector("input[type='radio']")?.checked = true;
    state.selectedBox = element;

    updatePriceDisplay(element, state.isSubscriptionSelected, false);
    updateVariantImage(element);
    adjustMaxHeight(element);

    const subscriptionPlanID = state.isSubscriptionSelected ? element.dataset.subscriptionSellingPlanId : '';
    const variantID = state.isSubscriptionSelected ? element.dataset.originalVariant : element.dataset.variant;

    document.querySelector('.submit-selling-plan-id')?.setAttribute('value', subscriptionPlanID);
    document.querySelector('.submit-variant-id')?.setAttribute('value', variantID);
  }

  function updateVariantImage(element) {
    if (variantsAmount <= 1 || !window['productSliderAllInOne' + SID]) return;

    const slideIndex = window['productSliderAllInOne' + SID].slides.length - (variantsAmount + 1 - parseInt(element.dataset.index));

    if (window.hasInitialImageUpdateHappened) {
      window['productSliderAllInOne' + SID].slideTo(slideIndex);
    } else if (typeof isSlideOnLoad !== 'undefined' && isSlideOnLoad) {
      window['productSliderAllInOne' + SID].slideTo(slideIndex);
    }

    window.hasInitialImageUpdateHappened = true;
  }

  function buySubscription(variant_id, qty, selling_plan, callback) {
    clearCart(() => {
      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: variant_id, quantity: qty, selling_plan }),
      })
        .then(response => response.json())
        .then(() => {
          callback?.(true);
          window.location.href = '/checkout';
        })
        .catch(error => {
          console.error('Error:', error);
          callback?.(false);
        });
    });
  }

  function clearCart(callback) {
    fetch('/cart/clear.js', { method: 'POST', headers: { 'Content-Type': 'application/json' } })
      .then(response => response.json())
      .then(() => callback?.())
      .catch(error => {
        console.error('Failed to clear cart', error);
        callback?.();
      });
  }

  function handleSubscriptionSubmit(event) {
    event.preventDefault();

    const upCart = document.querySelector('#upCart');
    upCart?.remove();

    const selectedBox = state.selectedBox;
    if (!selectedBox) {
      console.error('No variant selected');
      return;
    }

    const variantId = selectedBox.dataset.originalVariant;
    const sellingPlanId = selectedBox.dataset.subscriptionSellingPlanId;
    const quantity = 1;

    const buttonText = subscriptionSubmitButton?.querySelector('.button-text');
    const loadingSpinner = subscriptionSubmitButton?.querySelector('.loading-overlay__spinner');

    buttonText?.style.display = 'none';
    loadingSpinner?.classList.remove('hidden');

    buySubscription(variantId, quantity, sellingPlanId, success => {
      if (!success) {
        buttonText?.style.display = '';
        loadingSpinner?.classList.add('hidden');
      }
    });
  }

  function throttle(func, limit) {
    let lastFunc, lastRan;
    return function() {
      const context = this, args = arguments;
      if (!lastRan) {
        func.apply(context, args);
        lastRan = Date.now();
      } else {
        clearTimeout(lastFunc);
        lastFunc = setTimeout(() => {
          if (Date.now() - lastRan >= limit) {
            func.apply(context, args);
            lastRan = Date.now();
          }
        }, limit - (Date.now() - lastRan));
      }
    };
  }

  window.addEventListener(
    'resize',
    throttle(() => {
      purchaseOptionBoxes.forEach(box => {
        if (!box.classList.contains('selected')) safelySetStyle(box, 'maxHeight', getClosedHeight());
      });
    }, 200)
  );

  productActions.addEventListener('click', event => {
    const target = event.target;

    if (target.closest('.purchase-type .subscription')) {
      event.preventDefault();
      togglePurchaseType(true);
    } else if (target.closest('.purchase-type .buy-once')) {
      event.preventDefault();
      togglePurchaseType(false);
    } else {
      const purchaseOptionBox = target.closest('.purchase-option-box');
      if (purchaseOptionBox) {
        event.preventDefault();
        togglePurchaseBox(purchaseOptionBox);
      }
    }
  });

  initializePurchaseOptions();
});
</script>
