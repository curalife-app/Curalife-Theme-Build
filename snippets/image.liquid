{% comment %}
  Improved Shopify CDN Responsive Image Component

  Accepts:
  - image: The main image object (required)
  - mobile_image: An optional image object for mobile devices
  - sizes: Custom sizes attribute (optional, default provided)
  - breakpoint: Custom breakpoint in pixels (optional, default: 768)
  - alt: Alt text for the image (required for accessibility)
  - class: Additional CSS classes (optional)
  - priority: Boolean to indicate if this is a high-priority image (optional, default: false)

  Usage:
  {% render 'shopify-cdn-image',
    image: product.featured_image,
    mobile_image: product.images[1],
    sizes: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw',
    breakpoint: 768,
    alt: product.title,
    class: 'my-custom-class',
    priority: false
  %}
{% endcomment %}

{%- liquid
  assign desktop_image = image
  assign mobile_image = mobile_image | default: image
  assign breakpoint = breakpoint | default: 768
  assign sizes = sizes | default: '(min-width: 1200px) 1100px, (min-width: 769px) 750px, 100vw'
  assign priority = priority | default: false

  assign widths = '375,750,1080,1500,2200,3000'
  assign widths_array = widths | split: ','

  assign unique_id = 'img-' | append: desktop_image.id | append: '-' | append: mobile_image.id

  assign desktop_width = desktop_image.width
  assign desktop_height = desktop_image.height
  assign mobile_width = mobile_image.width
  assign mobile_height = mobile_image.height

  assign aspect_ratio = desktop_height | divided_by: desktop_width | times: 100 | append: '%'
-%}

{% if desktop_image != blank and mobile_image != blank %}
  {% if priority %}
    <link rel="preload" as="image" href="{{ desktop_image | image_url: width: desktop_width }}" imagesrcset="{{ desktop_image | image_url: width: desktop_width }} 1x, {{ desktop_image | image_url: width: desktop_width | times: 2 }} 2x" imagesizes="{{ sizes }}">
  {% endif %}

  <div class="responsive-image-wrapper" style="padding-bottom: {{ aspect_ratio }};">
    <picture>
      <source
        type="image/webp"
        media="(max-width: {{ breakpoint }}px)"
        srcset="
          {%- for width in widths_array -%}
            {{ mobile_image | image_url: width: width, format: 'webp' }} {{ width }}w{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >
      <source
        type="image/webp"
        media="(min-width: {{ breakpoint | plus: 1 }}px)"
        srcset="
          {%- for width in widths_array -%}
            {{ desktop_image | image_url: width: width, format: 'webp' }} {{ width }}w{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >
      <source
        media="(max-width: {{ breakpoint }}px)"
        srcset="
          {%- for width in widths_array -%}
            {{ mobile_image | image_url: width: width }} {{ width }}w{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >
      <source
        media="(min-width: {{ breakpoint | plus: 1 }}px)"
        srcset="
          {%- for width in widths_array -%}
            {{ desktop_image | image_url: width: width }} {{ width }}w{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        "
        sizes="{{ sizes }}"
      >

      <img
        id="{{ unique_id }}"
        src="{{ desktop_image | image_url: width: 40, blur: '100x' }}"
        data-src="{{ desktop_image | image_url: width: desktop_width }}"
        srcset="{{ desktop_image | image_url: width: 40, blur: '100x' }}"
        data-srcset="
          {{ desktop_image | image_url: width: desktop_width }} 1x,
          {{ desktop_image | image_url: width: desktop_width | times: 2 }} 2x
        "
        alt="{{ alt | escape }}"
        width="{{ desktop_width }}"
        height="{{ desktop_height }}"
        class="responsive-image {% if class %}{{ class }}{% endif %}"
        loading="{% if priority %}eager{% else %}lazy{% endif %}"
        fetchpriority="{% if priority %}high{% else %}auto{% endif %}"
        decoding="async"
      >
    </picture>
  </div>
{% else %}
  <div class="responsive-image-wrapper responsive-image-placeholder">
    <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
      <rect width="100" height="100" fill="#f0f0f0"/>
      <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="sans-serif" font-size="14" fill="#999">
        Image not available
      </text>
    </svg>
  </div>
{% endif %}

<style>
.responsive-image-wrapper {
  position: relative;
  width: 100%;
  height: 0;
  background-color: #f0f0f0;
  overflow: hidden;
}

.responsive-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

.responsive-image.loaded {
  opacity: 1;
}

.responsive-image-placeholder {
  padding-bottom: 100%; /* 1:1 aspect ratio */
}

.save-data .responsive-image,
.slow-connection .responsive-image {
  object-fit: contain;
}

.responsive-image-wrapper {
  content-visibility: auto;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const image = entry.target;
          const sources = image.parentElement.querySelectorAll('source');

          sources.forEach(source => {
            if (source.dataset.srcset) {
              source.srcset = source.dataset.srcset;
            }
          });

          image.src = image.dataset.src;
          image.srcset = image.dataset.srcset;
          image.classList.add('loaded');
          imageObserver.unobserve(image);
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });

    document.querySelectorAll('img.responsive-image').forEach(img => {
      if (img.loading !== 'eager') {
        imageObserver.observe(img);
      } else {
        img.src = img.dataset.src;
        img.srcset = img.dataset.srcset;
        img.classList.add('loaded');
      }
    });
  } else {
    // Fallback for browsers that don't support IntersectionObserver
    document.querySelectorAll('img.responsive-image').forEach(img => {
      img.src = img.dataset.src;
      img.srcset = img.dataset.srcset;
      img.classList.add('loaded');
    });
  }
});

// Adaptive serving based on network conditions
if ('connection' in navigator) {
  if (navigator.connection.saveData) {
    document.documentElement.classList.add('save-data');
  }
  if (['slow-2g', '2g', '3g'].includes(navigator.connection.effectiveType)) {
    document.documentElement.classList.add('slow-connection');
  }
}
</script>