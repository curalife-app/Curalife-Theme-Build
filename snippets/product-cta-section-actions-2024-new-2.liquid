<div id="product-actions" class="product-actions">
  <div class="buying-options">
    <h6>Buying Options:</h6>
    <div class="purchase-type mt-2">
      <div class="option one-time-purchase">
        <label>
          <input type="radio" name="purchase-type" value="one-time" checked>
          <span class="option-text">One Time Purchase</span>
          <span class="tag popular-tag">Popular</span>
        </label>

        <div class="quantity-options">
          <div class="quantity-option" data-product-id="8260651352215" data-quantity="1" data-variant-id="44221703979159">
            <input type="radio" name="quantity" id="qty-1" value="1">
            <label for="qty-1">
              <span class="buy-text">Buy 1</span>
              <span class="price"></span>
            </label>
          </div>

          <div class="quantity-option" data-product-id="8260651352215" data-quantity="3" data-variant-id="44221702996119">
            <input type="radio" name="quantity" id="qty-3" value="3">
            <label for="qty-3">
              <div class="left-wrapper">
                <span class="buy-text">Buy 3</span>
                <span class="save-tag"></span>
              </div>

              <div class="price-wrapper">
                <span class="price"></span>
                <span class="original-price"></span>
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="option subscription">
        <label>
          <input type="radio" name="purchase-type" value="subscription">
          <span class="option-text">Purchase With Subscription</span>
          <span class="tag best-value-tag">Best Value<br>30% Off</span>
        </label>

        <div class="quantity-options">
          <div class="quantity-option" data-product-id="8228158439575" data-quantity="1" data-variant-id="44190159274135" data-subscription-plan-id="8556806295">
            <input type="radio" name="subscription-quantity" id="sub-qty-1" value="1">
            <label for="sub-qty-1">
              <span class="buy-text">1 Month</span>
              <span class="price"></span>
            </label>
          </div>

          <div class="quantity-option" data-product-id="8228158439575" data-quantity="3" data-variant-id="44190137843863" data-subscription-plan-id="8556871831">
            <input type="radio" name="subscription-quantity" id="sub-qty-3" value="3">
            <label for="sub-qty-3">
              <div class="left-wrapper">
                <span class="buy-text">3 Months</span>
                <span class="save-tag"></span>
              </div>

              <div class="price-wrapper">
                <span class="price"></span>
                <span class="original-price"></span>
              </div>
            </label>
          </div>
        </div>
      </div>
    </div>

    <button type="submit" class="submit-button">
      <span class="submit-button-text"><strong>Buy Now</strong> <span class="total-price"></span></span>
      <div class="loader" style="display: none;">
        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
      </div>
    </button>
  </div>

  <div class="guarantee-wrapper flex flex-col gap-2 p-4">
    <img class="object-scale-down m-0" src="https://cdn.shopify.com/s/files/1/0452/2459/1511/files/cta-badges.png?v=1723738021" alt="Secure Checkout" class="secure-checkout">
    <div class="guarantee text-center"><strong>60 Days Satisfaction Guarantee</strong><br>If our products aren't your cup of tea, just send it back within 60 days for a full refund. No hassle, just health.</div>
  </div>
</div>

  <script>$(".guarantee-wrapper").insertBefore(".product-image-wrapper");</script>

  <style>
    .cta-section {
      padding-bottom: 50px;
    }

    .product-container {
      grid-template-columns: 20% 40% 40% !important;
      grid-column-gap: 1rem !important;
    }

    .guarantee-wrapper {
      grid-column: 1;
      grid-row: 1/3;
      justify-content: center;
      font-size: 16px;
    }

    .product-image-wrapper {
      grid-column: 2;
    }

    .product-info {
      grid-area: 1 / 3 / 2 / 3 !important;
    }

    .product-actions {
      grid-column: 3;
      max-width: 450px;
    }

    @media (width <= 768px) {
      .product-container {
        grid-template-columns: 100% !important;
      }

      .guarantee-wrapper {
        grid-row: 4;
        grid-column: 1;
      }

      .product-info {
        grid-row: 2 !important;
        grid-column: 1 !important;
      }

      .product-image-wrapper {
        grid-row: 2;
        grid-column: 1;
      }

      .product-actions {
        grid-row: 3;
        grid-column: 1;
      }
    }
  </style>

  <style>
    .purchase-type {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 10px;
    }
    .option {
      background-color: white;
      border-radius: 15px;
      padding: 10px;
      transition: all 0.3s ease;
      min-height: 60px;
      display: grid;
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.5s forwards;
    }

    .option > label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }

    .option input[type="radio"] {
      margin-right: 10px;
    }

    .option-text {
      font-weight: bold;

      @media (max-width: 768px) {
        font-size: 4vw;
      }
    }

    .tag {
      margin-left: auto;
      padding: 3px 6px;
      border-radius: 5px;
      font-size: 0.8em;

      @media screen and (max-width: 768px) {
        font-size: 3vw;
      }
    }

    .popular-tag { background-color: #FFEBCD; }
    .best-value-tag {
      background-color: #C8EAFF;
      text-align: center;
    }

    .quantity-options {
      display: flex;
      gap: 10px;
      margin-top: 10px;
      opacity: 1;
      transition: opacity 0.3s ease;
    }
    .quantity-option {
      flex: 1;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 15px;
      overflow: hidden;
      transition: all 0.3s ease;
      transform: scale(0.95);
      opacity: 0;
      animation: fadeInScale 0.4s forwards;
    }
    .quantity-option.selected {
      border-color: var(--orange);
      border-width: 2px;
      box-shadow: 0 0 5px rgba(225, 188, 65, 0.5);
      transform: scale(1);
    }
    .quantity-option input[type="radio"] { display: none; }
    .quantity-option label {
      display: flex;
      align-items: center;
      padding: 10px;
      cursor: pointer;
      justify-content: space-between;
      height: 100%;
    }
    .buy-text { font-weight: bold; }
    .price {
      color: var(--curaslim);
      font-weight: bold;
      font-size: 20px;
    }
    .price-wrapper {
      display: flex;
      flex-direction: column;
      align-items: end;
    }
    .original-price {
      text-decoration: line-through;
      color: #888;
      font-size: 0.9em;
    }
    .save-tag {
      background-color: var(--orange);
      padding: 2px 5px;
      border-radius: 15px;
      font-size: 0.8em;
      margin-top: 5px;
    }
    .submit-button {
      width: 100%;
      padding: 10px;
      background-color: var(--orange);
      color: black;
      font-weight: ;
      border: none;
      border-radius: 100px;
      font-size: 1em;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
    }
    .submit-button:hover {
      background-color: var(--dark-orange);
      transform: scale(1.05);
    }
    .submit-button:active { transform: scale(0.95); }
    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeInScale {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }
    .lds-ellipsis {
      display: inline-block;
      position: relative;
      width: 80px;
      top: -10px;
    }
    .lds-ellipsis div {
      position: absolute;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #fff;
      animation-timing-function: cubic-bezier(0, 1, 1, 0);
    }
    .lds-ellipsis div:nth-child(1) {
      left: 8px;
      animation: lds-ellipsis1 0.6s infinite;
    }
    .lds-ellipsis div:nth-child(2) {
      left: 8px;
      animation: lds-ellipsis2 0.6s infinite;
    }
    .lds-ellipsis div:nth-child(3) {
      left: 32px;
      animation: lds-ellipsis2 0.6s infinite;
    }
    .lds-ellipsis div:nth-child(4) {
      left: 56px;
      animation: lds-ellipsis3 0.6s infinite;
    }
    @keyframes lds-ellipsis1 {
      0% { transform: scale(0); }
      100% { transform: scale(1); }
    }
    @keyframes lds-ellipsis3 {
      0% { transform: scale(1); }
      100% { transform: scale(0); }
    }
    @keyframes lds-ellipsis2 {
      0% { transform: translate(0, 0); }
      100% { transform: translate(24px, 0); }
    }
  </style>

<style>
  #cta-section-{{ section.id }} .lds-ellipsis {
    display: inline-block;
    position: relative;
    width: 80px;
    top:-10px;
  }
  #cta-section-{{ section.id }} .lds-ellipsis div {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #fff;
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  #cta-section-{{ section.id }} .lds-ellipsis div:nth-child(1) {
    left: 8px;
    animation: lds-ellipsis1 0.6s infinite;
  }
  #cta-section-{{ section.id }} .lds-ellipsis div:nth-child(2) {
    left: 8px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  #cta-section-{{ section.id }} .lds-ellipsis div:nth-child(3) {
    left: 32px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  #cta-section-{{ section.id }} .lds-ellipsis div:nth-child(4) {
    left: 56px;
    animation: lds-ellipsis3 0.6s infinite;
  }
  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }
  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productActions = document.getElementById('product-actions');
    const purchaseTypeInputs = productActions.querySelectorAll('input[name="purchase-type"]');
    const quantityOptions = productActions.querySelectorAll('.quantity-option');
    const submitButton = productActions.querySelector('.submit-button');
    const loader = submitButton.querySelector('.loader');

    const productData = {
      basePrice: 39.90,
      subscriptionDiscount: 0.3,
      bulkDiscounts: { 3: 0.2 }
    };

    function init() {
        purchaseTypeInputs.forEach(input => input.addEventListener('change', handlePurchaseTypeChange));
        quantityOptions.forEach(option => option.addEventListener('click', handleQuantityOptionClick));
        submitButton.addEventListener('click', handleSubmit);

        // Programmatically click on the "Buy 3" one-time option on load
        const buy3Option = document.getElementById('qty-3');
        if (buy3Option) {
            buy3Option.click();
        } else {
            updatePurchaseOptions(); // Fallback to ensure options are updated
        }
    }


    function handlePurchaseTypeChange(event) {
      updatePurchaseOptions(event.target.value);
    }

    function handleQuantityOptionClick(event) {
      const clickedOption = event.currentTarget;
      const purchaseType = productActions.querySelector('input[name="purchase-type"]:checked').value;
      selectQuantityOption(clickedOption, purchaseType);
      updatePricing();
    }

    function selectQuantityOption(option, purchaseType) {
        const selector = purchaseType === 'subscription' ? 'input[name="subscription-quantity"]' : 'input[name="quantity"]';
        const options = option.closest('.quantity-options').querySelectorAll('.quantity-option');
        options.forEach(opt => {
            opt.classList.toggle('selected', opt === option);
            opt.querySelector(selector).checked = opt === option;
        });
    }

    function updatePurchaseOptions(purchaseType = 'one-time') {
      const isSubscription = purchaseType === 'subscription';
      const oneTimeOptions = productActions.querySelector('.one-time-purchase .quantity-options');
      const subscriptionOptions = productActions.querySelector('.subscription .quantity-options');

      oneTimeOptions.style.display = isSubscription ? 'none' : 'flex';
      subscriptionOptions.style.display = isSubscription ? 'flex' : 'none';

      updatePricing();
      highlightSelectedOption(purchaseType);
    }

    function highlightSelectedOption(purchaseType) {
      productActions.querySelectorAll('.option').forEach(option => {
        option.classList.toggle('selected', option.classList.contains(purchaseType === 'subscription' ? 'subscription' : 'one-time-purchase'));
      });
    }

    function updatePricing() {
      const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
      const selector = isSubscription ? 'input[name="subscription-quantity"]:checked' : 'input[name="quantity"]:checked';
      const selectedOption = productActions.querySelector(selector);
      const selectedQuantity = parseInt(selectedOption.value);

      const { price, originalPrice, discount } = calculatePrices(selectedQuantity, isSubscription);
      updateSubmitButton(price, isSubscription);
      updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount, isSubscription);
    }

    function calculatePrices(quantity, isSubscription) {
      const { basePrice, subscriptionDiscount, bulkDiscounts } = productData;
      const discount = isSubscription ? subscriptionDiscount : (bulkDiscounts[quantity] || 0);
      const originalPrice = basePrice * quantity;
      const discountedPrice = originalPrice * (1 - discount);
      return {
        price: discountedPrice.toFixed(2),
        originalPrice: originalPrice.toFixed(2),
        discount
      };
    }

    function updateSubmitButton(price, isSubscription) {
      submitButton.querySelector('.total-price').textContent = `- £${price}${isSubscription ? '/month' : ''}`;
    }

    function updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount, isSubscription) {
      const selector = isSubscription ? '.subscription .quantity-option' : '.one-time-purchase .quantity-option';
      const options = productActions.querySelectorAll(selector);

      options.forEach(option => {
        const quantity = parseInt(option.dataset.quantity);
        const priceElement = option.querySelector('.price');
        const originalPriceElement = option.querySelector('.original-price');
        const saveTagElement = option.querySelector('.save-tag');

        if (quantity === selectedQuantity) {
          priceElement.textContent = `£${price}${isSubscription ? '/month' : ''}`;
          if (discount > 0) {
            originalPriceElement.textContent = `£${originalPrice}${isSubscription ? '/month' : ''}`;
            originalPriceElement.style.display = 'block';
            saveTagElement.textContent = `Save ${(discount * 100).toFixed(0)}%`;
            saveTagElement.style.display = 'inline-block';
          } else {
            originalPriceElement.style.display = 'none';
            saveTagElement.style.display = 'none';
          }
        } else {
          const { price: individualPrice } = calculatePrices(quantity, isSubscription);
          priceElement.textContent = `£${individualPrice}${isSubscription ? '/month' : ''}`;
        }
      });
    }

    function handleSubmit(event) {
      event.preventDefault();
      const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
      const selector = isSubscription ? 'input[name="subscription-quantity"]:checked' : 'input[name="quantity"]:checked';
      const selectedOption = productActions.querySelector(selector).closest('.quantity-option');
      const variantId = selectedOption.dataset.variantId;
      const quantity = selectedOption.dataset.quantity;
      const subscriptionPlanId = isSubscription ? selectedOption.dataset.subscriptionPlanId : null;

      toggleButtonLoading(true);
      isSubscription ? buySubscription(variantId, quantity, subscriptionPlanId) : redirectToCheckout(variantId, quantity);
    }

    function toggleButtonLoading(isLoading) {
      loader.style.display = isLoading ? 'block' : 'none';
      submitButton.querySelector('.submit-button-text').style.display = isLoading ? 'none' : 'block';
    }

    function redirectToCheckout(variantId, quantity) {
      const checkoutLink = `https://${location.hostname}/cart/${variantId}:${quantity}`;
      window.location.href = checkoutLink;
    }

    function clearCart(callback) {
      fetch('/cart/clear.js', { method: 'POST' })
        .then(() => {
          console.log('Cart cleared');
          callback();
        })
        .catch(() => console.log('Failed to clear cart'));
    }

    function buySubscription(variantId, qty, sellingPlan) {
      clearCart(() => {
        const data = {
          id: variantId,
          quantity: qty,
          selling_plan: sellingPlan
        };

        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        })
          .then(response => response.json())
          .then(() => {
            console.log('Subscription added to cart');
            window.location.href = '/checkout';
          })
          .catch(() => {
            console.log('Failed to add subscription to cart');
            toggleButtonLoading(false);
          });
      });
    }

    init();
  });
</script>