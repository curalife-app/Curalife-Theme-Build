{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if product.handle == 'curalin' or product.handle == 'curalin-tm' %}
	{% assign shippingPrice = 790 %}
{% else %}
	{% assign shippingPrice = 1000 %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% assign faqsAmount = value %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}

		{% when 'faq' %}
			{% assign faqsAmount = faqsAmount | plus: 1 %}
	{% endcase %}
{% endfor %}

<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}" data-gifts-amount="{{ giftsAmount }}">
	<div class="purchase-options flex flex-col gap-3 mb-3">
		<!-- Single non-selectable variant box -->
		<div class="single-variant-box border-2 border-primary rounded-md p-4">
			<!-- Header -->
			<div class="variant-header text-primary font-bold text-[22px] mb-2">Subscribe & Save</div>

			<div class="top-wrapper flex justify-between items-center">
				<!-- Variant name and subtitle -->
				<div class="variant-info mb-3">
					<div class="text-[22px] font-semibold">1-Month Supply</div>
					<div class="text-[15px] text-gray-600">1 bottle delivered monthly</div>
				</div>

				<!-- Price display -->
				<div class="price-display mb-3">
					<div class="flex flex-col">
						<div class="main-price text-primary">
							<span class="price font-bold mbl:text-[6vw] rounded-full bg-bg">$0 NOW</span>
						</div>
						<div class="text-gray-600 text-[14px]">$55 if you keep it</div>
					</div>
				</div>
			</div>

			<!-- Benefits bullet list -->
			<ul class="benefits-list mb-4 no-style">
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Full 30-day supply of Curalin</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Free shipping and returns</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>24/7 customer support</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Free health consultation</span>
				</li>
			</ul>
		</div>

		{% if giftsAmount > 0 %}
		<div class="gift-selector mb-3">
			<div class="gift-header text-[16px] font-semibold mb-2">Select Your Free Gift</div>
			<div class="gift-options">
				{% for block in blocks %}
					{% if block.type == 'gift' %}
						{% assign show_gift = false %}
						{% if block.settings.show_on == 'both' %}
							{% assign show_gift = true %}
						{% elsif block.settings.show_on == 'global' and isGlobal %}
							{% assign show_gift = true %}
						{% elsif block.settings.show_on == 'us' and isGlobal == false %}
							{% assign show_gift = true %}
						{% endif %}

						{% if show_gift %}
							{% if isGlobal %}
								{% assign giftID = block.settings.gift_id_global | plus: 0 %}
								{% assign giftIDSub = block.settings.gift_id_subscription_global | plus: 0 %}
							{% else %}
								{% assign giftID = block.settings.gift_id | plus: 0 %}
								{% assign giftIDSub = block.settings.gift_id_subscription | plus: 0 %}
							{% endif %}

							<div class="gift-box border border-gray-200 rounded-md p-3 {% if forloop.first %}bg-gray-50{% endif %} cursor-pointer transition-all duration-300 hover:shadow-md mb-2 {% if forloop.first %}selected{% endif %}" data-gift-id="{{ giftID }}" data-gift-id-subscription="{{ giftIDSub }}">
								<div class="flex items-center justify-between">
									<div class="flex items-center gap-3">
										<div class="gift-image w-16 h-16 flex-shrink-0">
											<img src="{{ block.settings.image | img_url: '100x100' }}" alt="{{ block.settings.title }}" class="w-full h-full object-contain">
										</div>
										<div class="gift-details">
											<p class="text-[16px] font-medium">
												<span class="text-[#E86C4F]">Free gift:</span> {{ block.settings.title }} <span class="font-bold">${{ 0 }}</span> <span class="line-through text-gray-500">${{ block.settings.retail_value | divided_by: 100.00 }}</span>
											</p>
											<p class="text-[14px] text-gray-600">{{ block.settings.description }}</p>
										</div>
									</div>
									<div class="gift-option-border w-6 h-6 rounded-full border-2 border-primary ml-2 flex-shrink-0 relative">
										<div class="absolute inset-1 bg-primary rounded-full {% if forloop.first %}opacity-100{% else %}opacity-0{% endif %} transition-opacity duration-300"></div>
									</div>
								</div>
							</div>
						{% endif %}
					{% endif %}
				{% endfor %}
			</div>
		</div>
		{% endif %}

		<!-- Info box with Try Before You Buy explanation -->
		<div class="info-box flex items-center justify-between p-3 bg-[#FDF5EA] rounded-md border border-[#FFEACF] mb-3">
			<div class="info-text">
				<p class="text-[14px]">Try Curalin for FREE - only pay if you keep it after 14 days.</p>
				<p class="text-[14px] text-primary font-medium">How does "Try Before You Buy" work?</p>
			</div>
			<div class="info-icon text-primary text-xl">
				<svg width="47" height="57" viewBox="0 0 47 57" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_3655_204)">
<path d="M25.7757 30.0281C22.8661 27.7845 22.3255 23.6054 24.5692 20.6958L32.717 10.1267C34.9606 7.21706 39.1397 6.67651 42.0493 8.92013C44.9589 11.1638 45.4995 15.3428 43.2558 18.2524L35.108 28.8216C32.8644 31.7312 28.6853 32.2717 25.7757 30.0281Z" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M37.0784 11.4253C37.9818 11.0531 39.0592 11.164 39.8858 11.8012" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M39.182 23.5307L28.6382 15.4075" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M29.7989 36.2179C31.7577 40.3108 30.4246 45.3158 26.5186 47.8563C22.2745 50.616 16.595 49.4134 13.8319 45.1622L3.80988 29.7473C1.05022 25.5033 2.25281 19.8237 6.504 17.0607C10.7481 14.301 16.4276 15.5036 19.1907 19.7548L20.6922 22.062" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M7.25435 27.5072C5.73385 25.1696 6.4012 22.0239 8.73875 20.5034" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M19.7438 30.3573L8.82171 37.4521" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_3655_204">
<rect width="47" height="56.1389" fill="white"/>
</clipPath>
</defs>
</svg>

			</div>
		</div>

	{% render 'subscription-box-faq',
		SID: SID,
		faqsAmount: faqsAmount,
		blocks: blocks
	%}

	<div class="submit-wrap flex flex-col w-full">
		<div class="checkout-button mb-3">
			{% assign buttonSID = SID | append: '-checkout' %}

			{% render 'buy-buttons-new-4',
				SID: buttonSID,
				product: prod,
				variant: '',
				buttonText: 'Try Before You Buy',
				selling_plan_id: selling_plan_id,
				product_form_id: product_form_id,
				buyType: buyType,
				isBuyWithPrime: isBuyWithPrime,
				buyboxType: buyboxType,
				buyboxName: buyboxName,
				buttonClass: 'bg-[#FCAF2A] hover:bg-[#E99E20] text-black font-bold rounded-full py-3 w-full transition-all duration-300'
			%}
		</div>

		<div class="one-time-purchase-link mt-3 text-center">
			{% assign firstVariant = prod.selected_or_first_available_variant %}
			<div
				id="one-time-add-to-cart"
				class="one-time-add-to-cart text-primary mb-2 underline cursor-pointer"
				name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
				data-variant-id="{{ firstVariant.id }}"
				data-bottle-quantity="1"
				data-sku="{{ firstVariant.sku }}"
				data-purchase-type="buyonce">
				Buy Once for {{ firstVariant.price | money }} + {{ shippingPrice | money | replace: '.00', '' }} Shipping
			</div>
		</div>

		{% if blocks.size > 0 %}
			{% for block in blocks %}
				{% if block.type == 'text' %}
					<div class="text-content text-[14px] text-primary whitespace-break-spaces {% if block.settings.text_position == 'center' %}text-center{% else %}text-start{% endif %}">{{ block.settings.content }}</div>
				{% endif %}
			{% endfor %}
		{% endif %}
	</div>
</div>

<!-- Replace style with Tailwind classes added to parent div -->
<div class="buy-box grid grid-cols-[45%_40%] gap-x-[5%] justify-center">
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
	const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
	if (!productActions) return;

	const submitButton = productActions.querySelector('.checkout-button button');
	const oneTimeButton = productActions.querySelector('.one-time-add-to-cart');

	// Simplified state management for single variant
	const BuyBoxState = {
		data: {
			isLoading: false,
			isRedirectingToCheckout: false,
			purchaseType: 'subscribe',
			buyType: '{{ buyType }}',
			SID: '{{ SID }}'
		},

		setState(updates) {
			Object.assign(this.data, updates);
			this.updateUI(updates);
		},

		updateUI(changes) {
			if ('isLoading' in changes) {
				this.updateLoadingState(this.data.isLoading);
			}
		},

		updateLoadingState(isLoading) {
			if (submitButton) {
				if (isLoading) {
					submitButton.disabled = true;
					submitButton.innerHTML = `<div class="border-white/20 border-t-white animate-spin inline-block w-6 h-6 mx-auto border-2 rounded-full"></div>`;
					submitButton.setAttribute('aria-busy', 'true');
					submitButton.classList.add('loading-active');
				} else {
					submitButton.disabled = false;
					submitButton.innerHTML = submitButton.getAttribute('data-original-text') || 'Try Before You Buy';
					submitButton.removeAttribute('aria-busy');
					submitButton.classList.remove('loading-active');
				}
			}

			// Also update one-time purchase button if it exists
			if (oneTimeButton) {
				oneTimeButton.disabled = isLoading;
				if (isLoading) {
					oneTimeButton.setAttribute('aria-busy', 'true');
					oneTimeButton.classList.add('disabled');
				} else {
					oneTimeButton.removeAttribute('aria-busy');
					oneTimeButton.classList.remove('disabled');
				}
			}

			// Use class-based disabling for better performance
			if (isLoading) {
				productActions.classList.add('processing-order');
			} else {
				productActions.classList.remove('processing-order');
			}
		},

		init() {
			// Store original button text for later restoration
			if (submitButton) {
				submitButton.setAttribute('data-original-text', submitButton.textContent);
			}
		}
	};

	function showNotification(msg, type = 'error') {
		const note = document.createElement('div');
		note.className = `
			cart-notification ${type}
			fixed bottom-4 left-1/2 transform -translate-x-1/2
			p-4 rounded-lg shadow-lg z-[2147483640]
			transition-opacity duration-300
		`.replace(/\s+/g, ' ');

		if (type === 'error') {
			note.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
		} else {
			note.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
		}

		note.innerHTML = `
			<div class="flex items-center">
				<div class="mr-3">${type === 'error' ? '⚠️' : '✅'}</div>
				<div class="text-sm font-medium">${msg}</div>
				<button
					class="hover:text-gray-500 ml-auto text-gray-400"
					onclick="this.parentElement.parentElement.remove()"
				>
					✕
				</button>
			</div>
		`;
		document.body.appendChild(note);
		setTimeout(() => {
			note.classList.add('opacity-0');
			setTimeout(() => note.remove(), 300);
		}, 5000);
	}

	async function getCart(forceRefresh = false) {
		try {
			const now = Date.now();
			const res = await fetch('/cart.js?t=' + now, {
				cache: 'no-store',
				headers: {
					'Cache-Control': 'no-cache',
					'Pragma': 'no-cache'
				}
			});

			if (!res.ok) throw new Error('Failed to fetch cart');
			return await res.json();
		} catch (err) {
			console.error('Error in getCart:', err);
			throw new Error('Unable to access your cart');
		}
	}

	async function clearCart() {
		try {
			const res = await fetch('/cart/clear.js', {
				method: 'POST',
				cache: 'no-store',
				headers: {
					'Cache-Control': 'no-cache',
					'Pragma': 'no-cache'
				}
			});

			if (!res.ok) {
				const errorData = await res.json();
				throw Object.assign(new Error('Failed to clear cart'), { response: errorData });
			}

			return res.json();
		} catch (err) {
			console.error('Error clearing cart:', err);
			throw err;
		}
	}

	async function handleBuyNowFlow(items) {
		try {
			// Set loading state immediately and prevent multiple clicks
			BuyBoxState.setState({
				isLoading: true,
				isRedirectingToCheckout: true
			});

			// Remove cart popup if it exists (do this early)
			const cartPopup = document.getElementById('upCart');
			if (cartPopup) cartPopup.remove();

			// Perform cart operations in parallel when possible
			const clearCartPromise = clearCart();

			// Wait for cart clearing to complete
			await clearCartPromise;

			// Add items to cart (with improved error handling)
			const addRes = await fetch('/cart/add.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ items }),
				// Add cache control to prevent browser caching
				cache: 'no-store'
			});

			if (!addRes.ok) {
				const errorData = await addRes.json();
				console.error('Cart add response:', errorData);
				throw Object.assign(
					new Error('Failed to add items'),
					{ response: errorData }
				);
			}

			// Redirect to checkout immediately
			window.location.href = '/checkout';
		} catch (err) {
			console.error('handleBuyNowFlow error details:', err);
			BuyBoxState.setState({
				isRedirectingToCheckout: false,
				isLoading: false
			});
			throw err; // Re-throw to be handled by the caller
		}
	}

	async function addValidItemsToCart(items) {
		try {
			// Add items to cart
			const res = await fetch('/cart/add.js', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Cache-Control': 'no-cache'
				},
				cache: 'no-store',
				body: JSON.stringify({ items })
			});

			if (!res.ok) {
				const errorData = await res.json();
				console.error('Error adding items to cart:', errorData);
				throw Object.assign(new Error('Failed to add items to cart'), { response: errorData });
			}

			// Update cart UI if needed
			if (typeof window.updateCart === 'function') {
				window.updateCart();
			}

			// Show a success message
			showNotification('Items added to cart!', 'success');

			return res.json();
		} catch (err) {
			console.error('Error in addValidItemsToCart:', err);
			throw err;
		}
	}

	function initSubmitButton() {
		if (!submitButton) return;

		// Use a variable to track if a submission is in progress
		let isSubmitting = false;

		submitButton.addEventListener('click', async e => {
			e.preventDefault();

			// Prevent double-clicks or multiple submissions
			if (isSubmitting || BuyBoxState.data.isLoading) {
				return;
			}

			isSubmitting = true;
			BuyBoxState.setState({ isLoading: true });

			try {
				const isSub = true; // Always subscription in this simplified version
				const firstVariant = document.querySelector('#one-time-add-to-cart');
				const variant = firstVariant?.dataset.variantId;
				const sellingPlanId = '{{ selling_plan_id }}';

				if (!variant) {
					throw new Error('No valid variant ID found');
				}

				let items = [{
					id: parseInt(variant, 10),
					quantity: 1,
					selling_plan: isSub ? sellingPlanId : undefined
				}];

				// Debug log to check what's being sent to cart
				console.log('Adding to cart with items:', JSON.stringify(items));

				// Add selected gift if available
				{% if giftsAmount > 0 %}
				const selectedGiftBox = document.querySelector('.gift-box.selected');
				if (selectedGiftBox) {
					const giftIDSub = selectedGiftBox.dataset.giftIdSubscription;
					const giftID = selectedGiftBox.dataset.giftId;

					// Use subscription gift ID for subscription purchase, otherwise use regular gift ID
					const giftIDToUse = isSub && giftIDSub ? giftIDSub : giftID;

					if (giftIDToUse) {
						items.push({ id: parseInt(giftIDToUse, 10), quantity: 1 });
						console.log('Adding gift to cart:', giftIDToUse);
					}
				}
				{% else %}
				// Get first available gift when no gift selection UI is shown
				{% for block in blocks %}
					{% if block.type == 'gift' and block.settings.show_on != 'none' %}
						{% if isGlobal %}
							{% assign giftID = block.settings.gift_id_global | plus: 0 %}
							{% assign giftIDSub = block.settings.gift_id_subscription_global | plus: 0 %}
						{% else %}
							{% assign giftID = block.settings.gift_id | plus: 0 %}
							{% assign giftIDSub = block.settings.gift_id_subscription | plus: 0 %}
						{% endif %}

						{% if giftID > 0 or giftIDSub > 0 %}
						const giftID = {{ giftID }};
						const giftIDSub = {{ giftIDSub }};
						const giftIDToUse = isSub && giftIDSub ? giftIDSub : giftID;

						if (giftIDToUse) {
							items.push({ id: giftIDToUse, quantity: 1 });
							console.log('Adding default gift to cart:', giftIDToUse);
						}
						{% break %}
						{% endif %}
					{% endif %}
				{% endfor %}
				{% endif %}

				if (BuyBoxState.data.buyType === 'buy_now') {
					await handleBuyNowFlow(items);
					// Don't reset loading state if we're redirecting
				} else {
					await addValidItemsToCart(items);
					// Only reset loading state if we're not redirecting
					isSubmitting = false;
					BuyBoxState.setState({ isLoading: false });
				}
			} catch (err) {
				console.error('Submit error:', err);
				showNotification(err.message || 'Error adding items to cart', 'error');
				isSubmitting = false;
				BuyBoxState.setState({ isLoading: false });
			}
		});
	}

	function initOneTimeButton() {
		if (!oneTimeButton) return;

		oneTimeButton.setAttribute('data-original-text', oneTimeButton.textContent);

		// Track submission state
		let isSubmittingOneTime = false;

		oneTimeButton.addEventListener('click', async e => {
			e.preventDefault();

			// Prevent multiple submissions
			if (isSubmittingOneTime || BuyBoxState.data.isLoading) {
				return;
			}

			isSubmittingOneTime = true;
			BuyBoxState.setState({ isLoading: true });
			oneTimeButton.innerHTML = '<div class="border-primary/20 border-t-primary animate-spin inline-block w-4 h-4 mr-2 align-middle border-2 rounded-full"></div> Adding...';
			oneTimeButton.setAttribute('aria-busy', 'true');

			try {
				const variant1 = oneTimeButton.dataset.variantId;

				if (!variant1) {
					throw new Error('Invalid variant ID');
				}

				const toAdd = [{ id: parseInt(variant1, 10), quantity: 1 }];

				{% if giftsAmount > 0 %}
				// Add selected gift to one-time purchase
				const selectedGiftBox = document.querySelector('.gift-box.selected');
				if (selectedGiftBox) {
					const giftID = selectedGiftBox.dataset.giftId;

					if (giftID) {
						toAdd.push({ id: parseInt(giftID, 10), quantity: 1 });
						console.log('Adding gift to one-time purchase:', giftID);
					}
				} else {
					// Fallback to first available gift
					{% for block in blocks %}
						{% if block.type == 'gift' and block.settings.show_on != 'none' %}
							{% if isGlobal %}
								{% assign giftID = block.settings.gift_id_global | plus: 0 %}
							{% else %}
								{% assign giftID = block.settings.gift_id | plus: 0 %}
							{% endif %}

							{% if giftID > 0 %}
							toAdd.push({ id: {{ giftID }}, quantity: 1 });
							console.log('Adding default gift to one-time purchase:', {{ giftID }});
							{% break %}
							{% endif %}
						{% endif %}
					{% endfor %}
				}
				{% endif %}

				if (BuyBoxState.data.buyType === 'buy_now') {
					// Optimize for buy now flow
					BuyBoxState.setState({ isRedirectingToCheckout: true });

					// Remove cart popup first
					const cartPopup = document.getElementById('upCart');
					if (cartPopup) cartPopup.remove();

					// Clear cart with optimized fetch
					await fetch('/cart/clear.js', {
						method: 'POST',
						cache: 'no-store',
						headers: {
							'Cache-Control': 'no-cache'
						}
					});

					// Add items with optimized fetch
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'Cache-Control': 'no-cache'
						},
						cache: 'no-store',
						body: JSON.stringify({ items: toAdd })
					});

					const responseData = await res.json();

					if (!res.ok) {
						const error = new Error(responseData.description || 'Failed to add items');
						error.response = responseData;
						throw error;
					}

					// Go to checkout immediately
					window.location.href = '/checkout';
				} else {
					// Regular add to cart
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'Cache-Control': 'no-cache'
						},
						cache: 'no-store',
						body: JSON.stringify({ items: toAdd })
					});

					const responseData = await res.json();

					if (!res.ok) {
						const error = new Error(responseData.description || 'Failed to add items');
						error.response = responseData;
						throw error;
					}

					// Update cart UI if needed
					if (typeof window.updateCart === 'function') {
						window.updateCart();
					}

					oneTimeButton.innerHTML = '✓ Added!';
					oneTimeButton.classList.add('text-green-700', 'border-green-700');

					// Reset state
					setTimeout(() => {
						oneTimeButton.innerHTML = oneTimeButton.getAttribute('data-original-text');
						oneTimeButton.classList.remove('text-green-700', 'border-green-700');
						oneTimeButton.removeAttribute('aria-busy');
						isSubmittingOneTime = false;
						BuyBoxState.setState({ isLoading: false });
					}, 2000);
				}
			} catch (err) {
				console.error('Cart error details:', err);
				showNotification(err.message || 'Error adding items to cart', 'error');
				oneTimeButton.innerHTML = '⚠ Failed';
				oneTimeButton.classList.add('text-red-600', 'border-red-600');

				// Reset state
				setTimeout(() => {
					oneTimeButton.innerHTML = oneTimeButton.getAttribute('data-original-text');
					oneTimeButton.classList.remove('text-red-600', 'border-red-600');
					oneTimeButton.removeAttribute('aria-busy');
					isSubmittingOneTime = false;
					BuyBoxState.setState({ isLoading: false });
				}, 2000);
			}
		});
	}

	function init() {
		BuyBoxState.init();
		initSubmitButton();
		initOneTimeButton();
		initGiftBoxes();
	}
	init();

	// Initialize gift boxes to make them selectable
	function initGiftBoxes() {
		const giftBoxes = document.querySelectorAll('.gift-box');
		if (giftBoxes.length === 0) return;

		giftBoxes.forEach(box => {
			box.addEventListener('click', function() {
				// Remove selected class from all gift boxes
				giftBoxes.forEach(b => {
					b.classList.remove('selected', 'bg-gray-50');
					const indicator = b.querySelector('.gift-option-border div');
					if (indicator) indicator.classList.add('opacity-0');
				});

				// Add selected class to clicked gift box
				this.classList.add('selected', 'bg-gray-50');
				const indicator = this.querySelector('.gift-option-border div');
				if (indicator) indicator.classList.remove('opacity-0');
			});
		});
	}
});
</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ctasection = document.querySelector('#cta-section-{{ SID }}');
		if (!ctasection) return;

		const productActions = ctasection.querySelector('.product-actions');
		const ctaText = ctasection.querySelector('.cta-text');

		if (!productActions) return;

		if (window.innerWidth < 768 && ctaText) {
			productActions.insertAdjacentElement('afterbegin', ctaText);
		}
	});
</script>

<style>
	/* Core variables - keep these as CSS variables */
	#cta-section-{{ SID }} {
			--text-color: #4a5568;
			--border-color: #cbcbcb;
			--primary-color: #004B94;
			--bg-color: #F5F9FF;
			--orange: #FCAF2A;
			--transition-speed: 0.2s;

			/* Info box styles */
			.info-box {
					background-color: #FDF5EA;
					border-color: #FFEACF;
			}

			/* Single variant box styles */
			.single-variant-box {
					border-color: var(--primary-color);
					transition: all 0.3s ease;
			}

			/* Benefits list styles */
			.benefits-list li span:first-child {
					color: var(--primary-color);
			}

			/* Product Actions */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}

			/* Processing state styles */
			&.processing-order,
			.processing-order {
				position: relative;

				&::after {
					content: "";
					position: absolute;
					top: 0;
					left: 0;
					right: 0;
					bottom: 0;
					background: rgba(255, 255, 255, 0.6);
					z-index: 5;
					pointer-events: none;
					transition: opacity 0.2s ease;
				}

				.single-variant-box {
					pointer-events: none;
				}
			}
	}

	/* Loading state styles */
	[aria-busy="true"] {
		position: relative;
		cursor: wait !important;
	}

	/* Button loading optimization */
	button.loading-active {
		background-color: var(--primary-color-darker, #004085) !important;
		transition: none !important;
	}

	/* Performance optimized disabled styles */
	.disabled {
		opacity: 0.7;
		pointer-events: none;
	}

	/* Improved button loading states */
	button[aria-busy="true"] {
		background-color: var(--primary-color-darker, #004085) !important;
		position: relative;
	}

	button[aria-busy="true"]::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.15);
		border-radius: inherit;
	}

	/* Gift box styles */
	.gift-box {
		transition: all 0.2s ease;
	}

	.gift-box.selected {
		border-color: var(--primary-color);
		background-color: var(--bg-color);
	}

	.gift-box:hover {
		border-color: var(--primary-color);
	}

	.gift-option-border div {
		transition: opacity 0.2s ease;
	}
</style>
