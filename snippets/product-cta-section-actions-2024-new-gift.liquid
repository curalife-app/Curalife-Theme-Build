{% assign variantsAmount = product.variants.size %}
{% assign subscriptionFeatures = "Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs" | split: ',' %}

<div class="product-actions">
  <div class="purchase-options md:p-2 flex flex-col gap-2">

    <!-- Purchase Type Buttons -->
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe
          <div class="desktop">& Save</div>
          {% render 'tooltip', SID: SID, linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>', title: 'Subscription Details', description: '', features: subscriptionFeatures %}
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once">
        <span>Buy Once</span>
      </button>
    </div>

    <!-- Product Variants -->
    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, index: forloop.index %}
    {% endfor %}

    <!-- Gift Selector -->
    <div class="gift-selector-wrap">
      <div class="gift-selector-title mb-2">Choose your free gift:</div>
      <div class="gift-options flex-nowrap flex justify-start gap-4">
        {% for block in blocks %}
          {% case block.type %}
            {% when 'gift' %}
              {% assign giftProd = block.settings.gift_product %}
              {% assign giftVariant = giftProd.selected_or_first_available_variant %}
              <div class="gift-option-container flex flex-col items-center">
                <!-- Border container for image and radio only -->
                <div class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer" data-gift-id="{{ giftVariant.id }}">
                  <div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 border-2 rounded-full">
                    <div class="check-mark hidden w-4 h-4 bg-[var(--primary-color)] rounded-full"></div>
                  </div>
                  <div class="gift-image-container flex justify-center">
                    <img
                      src="{{ giftProd.featured_image | image_url }}"
                      alt="{{ giftProd.title }}"
                      class="object-contain w-24 h-24"
                    >
                  </div>
                </div>
                <!-- Text content outside the border -->
                <div class="gift-content text-center">
                  <div class="gift-name mb-1 font-medium">{{ giftProd.title }}</div>
                  <div class="gift-price flex items-center justify-center gap-2">
                    {% if giftVariant.compare_at_price > giftVariant.price %}
                      <span class="original-price text-gray-400 line-through">{{ giftVariant.price | money_with_currency }}</span>
                    {% endif %}
                    <span class="sale-price font-bold">{{ giftVariant.compare_at_price | money_with_currency }}</span>
                  </div>
                </div>
              </div>
          {% endcase %}
        {% endfor %}
      </div>
    </div>

    <!-- Submit Section -->
    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% if shop.name == 'CuraLife Global' %}
          {% assign isGlobal = true %}
        {% endif %}

        {% if buyType == "buy_now" %}
          <!-- Buy Now Button -->
          <div class="submit-wrap flex flex-col w-full">
            <input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}">
            <button class="main-btn w-full p-0 text-black bg-[--orange] min-h-[50px]" id="buy-button-{{ SID }}">
              <span class="button-text flex justify-center md:text-[5vw]">{{ buttonText | default: "Shop Now" }}</span>
              <div class="loading-overlay__spinner hidden m-auto">
                <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                  <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                </svg>
              </div>
            </button>
          </div>
        {% else %}
          <!-- Product Form -->
          <script src="{{ 'product-info.js' | asset_url }}" defer></script>
          <script src="{{ 'product-form.js' | asset_url }}" defer></script>

          <div>
            <product-form class="product-form" data-hide-errors="false" data-section-id="{{ section.id }}">
              {%- form 'product', product, id: product_form_id, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
                <input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}" class="product-variant-id">
                <input class="submit-selling-plan-id" type="hidden" name="selling_plan" value="{{ selling_plan_id }}">

                <div class="product-form__buttons main-submit-wrapper flex">
                  {% if isBuyQuantity %}
                    <!-- Quantity Selector -->
                    <div class="qty flex">
                      <input type="text" name="quantity" maxlength="12" value="1" title="" class="input-text" />
                      <div class="qty_inc_dec">
                        <i class="increment">+</i>
                        <i class="decrement">-</i>
                      </div>
                    </div>
                  {% endif %}

                  <!-- Add to Cart Button -->
                  <button id="ProductSubmitButton-{{SID}}" data-variant-id="{{ variant | default: product.selected_or_first_available_variant.id }}" type="submit" name="add" class="text-black product-form__submit button--full-width justify-center button--primary text-[20px] p-0 min-h-[50px] items-center bg-[--orange]">
                    <span class="submit-title">Add To Cart</span>
                    <div class="loading-overlay__spinner hidden">
                      <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                        <circle class="path !stroke-white" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                      </svg>
                    </div>
                  </button>
                </div>
              {%- endform -%}

              <!-- Error Message -->
              <div class="product-form__error-message-wrapper p-2 mt-1 text-center rounded-sm bg-[--light-red]" role="alert" hidden>
                <div class="error-wrapper flex items-center justify-center">
                  <svg aria-hidden="true" focusable="false" class="icon icon-error h-[20px] mr-1" viewBox="0 0 13 13">
                    <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
                    <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
                    <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
                    <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7"/>
                  </svg>
                  <span class="product-form__error-message text-[12px]"></span>
                </div>
                <div class="notice">
                  Please <a class="underline" href="https://help{% if isGlobal %}-global{% endif %}.curalife.com/">Contact Us</a>, we'd love to help!
                </div>
              </div>
            </product-form>
          </div>
        {% endif %}

        <!-- Buy with Prime Button -->
        {% if isBuyWithPrime and isGlobal != true and customer.b2b? == false %}
          <div class="bwp-button">
            {% render 'buy-with-prime-button' %}
          </div>
        {% endif %}

        <!-- Yotpo Points Widget -->
        {% if customer %}
          {% render 'yotpo-product-points-widget' %}
        {% endif %}

        <!-- Quantity Selector Scripts -->
        {% if isBuyQuantity %}
          <style>
            /* Quantity Selector Styles */
            .qty {
              float: left;
              width: 100px;
              user-select: none;
            }
            .qty_inc_dec .increment,
            .qty_inc_dec .decrement {
              cursor: pointer;
              font-size: 1.2em;
              height: 50%;
              background-color: #fff;
              border: 1px solid #ccc;
              display: flex;
              justify-content: center;
              align-items: center;
            }
            .qty_inc_dec .increment {
              border-bottom: 0;
              line-height: 25px;
            }
            .qty_inc_dec {
              width: 30px;
              height: 100%;
              display: inline-block;
            }
            .qty input[type=text] {
              float: left;
              font-family: "Open Sans", sans-serif;
              outline: 0;
              font-size: 1.2em;
              text-align: center;
              width: 50px;
              height: 100%;
              color: #2a2a2a;
              line-height: 40px;
              border: 1px solid #ccc;
              border-right: 0;
              border-radius: 10px 0 0 10px;
            }
          </style>

          <script>
            // Quantity Selector Script
            function incrementQty() {
              var quantityInput = document.querySelector('input[name="quantity"]');
              var value = parseInt(quantityInput.value);
              var cardQty = document.querySelector(".cart-qty");
              value = isNaN(value) ? 1 : value;
              value++;
              quantityInput.value = value;

              if (cardQty) {
                cardQty.innerHTML = value;
                cardQty.classList.add("rotate-x");
              }
            }

            function decrementQty() {
              var quantityInput = document.querySelector('input[name="quantity"]');
              var value = parseInt(quantityInput.value);
              var cardQty = document.querySelector(".cart-qty");
              value = isNaN(value) ? 1 : value;
              value = value > 1 ? value - 1 : 1;
              quantityInput.value = value;

              if (cardQty) {
                cardQty.innerHTML = value;
                cardQty.classList.add("rotate-x");
              }
            }

            document.addEventListener('DOMContentLoaded', function() {
              var incrementButton = document.querySelector('.increment');
              var decrementButton = document.querySelector('.decrement');

              if (incrementButton) {
                incrementButton.addEventListener('click', function(event) {
                  event.stopPropagation();
                  incrementQty();
                });
              }

              if (decrementButton) {
                decrementButton.addEventListener('click', function(event) {
                  event.stopPropagation();
                  decrementQty();
                });
              }
            });
          </script>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
  const SID = '{{ SID }}';
  window.SID = SID;

  const productSlider = window[`productSliderAllInOne${window.SID}`];
  const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');

  // Add transition styles for content switching
  const styleSheet = document.createElement("style");
  styleSheet.textContent = `
    .subscription-content, .buy-once-content {
      transition: opacity 0.3s ease-in-out;
    }
  `;
  document.head.appendChild(styleSheet);

  // Initialize purchase options and observers
  initializePurchaseOptions();
  setupMutationObserver();

  // Gift selection logic
  const giftOptionContainers = document.querySelectorAll('.gift-option-container');
  giftOptionContainers.forEach(container => {
    container.addEventListener('click', function(event) {
      // Remove 'selected' class from all gift options
      giftOptionContainers.forEach(gift => gift.classList.remove('selected'));

      // Add 'selected' class to the clicked gift
      container.classList.add('selected');

      // Update radio indicator
      updateRadioIndicator(container);
    });
  });

  // Update radio indicators
  function updateRadioIndicator(selectedContainer) {
    giftOptionContainers.forEach(container => {
      const checkMark = container.querySelector('.check-mark');
      if (container === selectedContainer) {
        checkMark.classList.remove('hidden');
      } else {
        checkMark.classList.add('hidden');
      }
    });
  }

  // Initialize the first gift as selected by default
  if (giftOptionContainers.length > 0) {
    const firstGift = giftOptionContainers[0];
    firstGift.classList.add('selected');
    updateRadioIndicator(firstGift);
  }

  // Check if subscription is selected
  function isSubscriptionSelected() {
    const selectedButton = productActions.querySelector('.purchase-type button.selected');
    return selectedButton?.classList.contains('subscription') ?? true;
  }

  // Initialize purchase options
  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = urlParams.get('default-variant') ?
      parseInt(urlParams.get('default-variant')) :
      {{ defaultSelectionIndex | default: 1 }};

    const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;

    // Handle initial inert state for subscription boxes
    purchaseOptionBoxes.forEach(box => {
      const subscriptionSellingPlanId = box.dataset.subscriptionSellingPlanId;
      if (!subscriptionSellingPlanId || subscriptionSellingPlanId === '0') {
        box.setAttribute('inert', '');
      }

      const subscriptionContent = box.querySelectorAll('.subscription-content');
      const buyOnceContent = box.querySelectorAll('.buy-once-content');

      box.classList.remove('selected');
      box.style.maxHeight = '68px';

      subscriptionContent.forEach(el => {
        el.style.display = 'block';
        el.style.opacity = '1';
      });

      buyOnceContent.forEach(el => {
        el.style.display = 'none';
        el.style.opacity = '0';
      });

      const radio = box.querySelector("input[type='radio']");
      if (radio) radio.checked = false;
    });

    // Find the first valid box for initial selection
    let defaultBox = purchaseOptionBoxes[initialVariantIndex];
    if (defaultBox && defaultBox.hasAttribute('inert')) {
      defaultBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
    }

    if (defaultBox) {
      defaultBox.classList.add('selected');
      adjustMaxHeight(defaultBox);

      const radio = defaultBox.querySelector("input[type='radio']");
      if (radio) radio.checked = true;

      const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
      const submitVariantElement = productActions.querySelector('.submit-variant-id');

      if (submitSellingPlanElement) {
        submitSellingPlanElement.value = defaultBox.dataset.subscriptionSellingPlanId || '';
      }
      if (submitVariantElement) {
        submitVariantElement.value = defaultBox.dataset.originalVariant || defaultBox.dataset.variant;
      }

      const toggleIcon = defaultBox.querySelector('.toggle-icon');
      if (toggleIcon) toggleIcon.style.display = 'block';
    }

    const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
    const buyOnceButton = productActions.querySelector('.purchase-type .buy-once');

    if (subscriptionButton && buyOnceButton) {
      subscriptionButton.classList.add('selected');
      buyOnceButton.classList.remove('selected');
    }

    if (defaultBox) {
      updateYotpoPointsWidget(defaultBox);
    }

    {% if variantsAmount > 1 %}
      {% if isSlideOnLoad %}
        if (defaultBox) {
          updateVariantImage(defaultBox);
        }
      {% endif %}
    {% endif %}
  }

  // Mutation observer to adjust max height on selection
  function setupMutationObserver() {
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const targetBox = mutation.target.closest('.purchase-option-box');
          if (targetBox?.classList.contains('selected')) {
            adjustMaxHeight(targetBox);
          }
        }
      });
    });

    purchaseOptionBoxes.forEach(element => {
      observer.observe(element, { attributes: true, attributeFilter: ['class'] });
    });
  }

  // Event listeners for purchase options
  productActions.addEventListener('click', (event) => {
    const purchaseBox = event.target.closest('.purchase-option-box');
    if (purchaseBox) togglePurchaseBox(purchaseBox);

    const purchaseTypeButton = event.target.closest('.purchase-type button');
    if (purchaseTypeButton) handlePurchaseTypeClick(event, purchaseTypeButton);

    const checkoutButton = event.target.closest('.checkout-button.subscription, .add-to-cart-button.buy-once, .submit-wrap button.main-btn');
    if (checkoutButton) handleMainButtonClick(event, checkoutButton);
  });

  // Handle purchase type button clicks
  function handlePurchaseTypeClick(event, button) {
    event.stopPropagation();

    // Toggle button states
    productActions.querySelectorAll('.purchase-type button').forEach(btn => btn.classList.remove('selected'));
    button.classList.add('selected');

    const isSubscription = button.classList.contains('subscription');
    const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');

    // Set selling plan to blank if "Buy Once" is selected
    if (!isSubscription && submitSellingPlanElement) {
      submitSellingPlanElement.value = ''; // Clear the selling plan ID for "Buy Once"
    }

    // Update all variant boxes
    purchaseOptionBoxes.forEach(box => {
      const subscriptionContent = box.querySelectorAll('.subscription-content');
      const buyOnceContent = box.querySelectorAll('.buy-once-content');

      // First fade out current content
      const currentContent = isSubscription ? buyOnceContent : subscriptionContent;
      const newContent = isSubscription ? subscriptionContent : buyOnceContent;

      // Fade out current content
      currentContent.forEach(el => {
        el.style.opacity = '0';
      });

      // Wait for fade out to complete before showing new content
      setTimeout(() => {
        // Hide old content
        currentContent.forEach(el => {
          el.style.display = 'none';
        });

        // Show new content but keep it invisible
        newContent.forEach(el => {
          el.style.display = 'block';
          el.style.opacity = '0';
        });

        // Trigger fade in
        requestAnimationFrame(() => {
          newContent.forEach(el => {
            el.style.opacity = '1';
          });
        });
      }, 300);

      // Handle selling plan ID and inert state for subscription
      if (isSubscription) {
        const sellingPlanId = box.dataset.subscriptionSellingPlanId;
        if (!sellingPlanId || sellingPlanId === '0') {
          box.setAttribute('inert', '');
        } else {
          box.removeAttribute('inert');
        }
        // Only update selling plan if it's a subscription selection
        if (submitSellingPlanElement) {
          submitSellingPlanElement.value = sellingPlanId || ''; // Update for subscription
        }
      } else {
        box.removeAttribute('inert');
      }

      // Handle per month display
      {% unless product.metafields.custom.is_price_per_month %}
        const perMonthElement = box.querySelector('.per-month');
        if (perMonthElement) {
          perMonthElement.style.display = isSubscription ? 'block' : 'none';
        }
      {% endunless %}

      // Update compared at price display with the same fade timing
      const comparedAtPrice = box.querySelector('.compared-at-price');
      if (comparedAtPrice) {
        const itemPrice = parseFloat(box.dataset.itemPrice);
        const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
        const originalItemCap = parseFloat(box.dataset.originalItemCap);
        const currentPrice = isSubscription ? subscriptionItemPrice : itemPrice;

        comparedAtPrice.style.opacity = '0';

        setTimeout(() => {
          if (originalItemCap > currentPrice) {
            comparedAtPrice.style.display = 'block';
            requestAnimationFrame(() => {
              comparedAtPrice.style.opacity = '1';
            });
          } else {
            comparedAtPrice.style.display = 'none';
          }
        }, 300);
      }
    });

    // Check if currently selected box becomes inert
    const selectedBox = productActions.querySelector('.purchase-option-box.selected');
    if (selectedBox && selectedBox.hasAttribute('inert')) {
      // Find the first non-inert box
      const firstAvailableBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
      if (firstAvailableBox) {
        // Deselect current box
        selectedBox.classList.remove('selected');
        selectedBox.style.maxHeight = '68px';
        const selectedToggleIcon = selectedBox.querySelector('.toggle-icon');
        if (selectedToggleIcon) selectedToggleIcon.style.display = 'none';

        // Select new box
        firstAvailableBox.classList.add('selected');
        adjustMaxHeight(firstAvailableBox);
        const newToggleIcon = firstAvailableBox.querySelector('.toggle-icon');
        if (newToggleIcon) newToggleIcon.style.display = 'block';

        // Update form values
        const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
        const submitVariantElement = productActions.querySelector('.submit-variant-id');

        if (submitSellingPlanElement) {
          submitSellingPlanElement.value = isSubscription ? firstAvailableBox.dataset.subscriptionSellingPlanId : '';
        }
        if (submitVariantElement) {
          submitVariantElement.value = isSubscription ? firstAvailableBox.dataset.originalVariant : firstAvailableBox.dataset.variant;
        }

        // Update radio button
        const radioInput = firstAvailableBox.querySelector("input[type='radio']");
        if (radioInput) radioInput.checked = true;

        // Update other UI elements
        updateYotpoPointsWidget(firstAvailableBox);
        {% if variantsAmount > 1 %}
          {% if isSlideOnLoad %}
            updateVariantImage(firstAvailableBox);
          {% endif %}
        {% endif %}
      }
    }
  }

  // Adjust max-height for animation
  function adjustMaxHeight(element) {
    const openHeight = element.scrollHeight;
    element.style.maxHeight = `${openHeight}px`;
  }

  // Update Yotpo Points Widget
  function updateYotpoPointsWidget(parentBox) {
    const price = isSubscriptionSelected()
      ? parentBox.dataset.subscriptionItemPrice
      : parentBox.dataset.itemPrice;

    const newPoints = Math.floor(Number(price) / 100);
    const pointsElement = productActions.querySelector('.reward-points-widget .current-price');
    if (pointsElement) pointsElement.textContent = newPoints;
  }

  // Handle main button clicks
  function handleMainButtonClick(event, button) {
    event.stopPropagation();

    {% if buyType == 'buy_now' %}
      const selectedBox = productActions.querySelector('.purchase-option-box.selected');
      const subscriptionPlanID = selectedBox ? selectedBox.dataset.subscriptionSellingPlanId : null;
      buyButtonHandler(subscriptionPlanID, button);
    {% else %}
      const form = button.closest('form');
      if (form) form.submit();
    {% endif %}
  }

  // Toggle purchase box selection
  function togglePurchaseBox(element) {
    if (element.classList.contains('selected')) return;

    // Update previous selected box
    const previousSelected = productActions.querySelector('.purchase-option-box.selected');
    if (previousSelected) {
      previousSelected.classList.remove('selected');
      previousSelected.style.maxHeight = '68px';
      const toggleIcon = previousSelected.querySelector('.toggle-icon');
      if (toggleIcon) toggleIcon.style.display = 'none';
    }

    // Update new selected box
    element.classList.add('selected');
    element.style.maxHeight = `${element.scrollHeight}px`;

    const toggleIcon = element.querySelector('.toggle-icon');
    if (toggleIcon) toggleIcon.style.display = 'block';

    // Update form values
    const isSubscription = isSubscriptionSelected();
    const subscriptionPlanID = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
    const variantID = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

    const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
    const submitVariantElement = productActions.querySelector('.submit-variant-id');

    if (submitSellingPlanElement) submitSellingPlanElement.value = subscriptionPlanID;
    if (submitVariantElement) submitVariantElement.value = variantID;

    // Update radio button
    const radioInput = element.querySelector("input[type='radio']");
    if (radioInput) radioInput.checked = true;

    updateYotpoPointsWidget(element);

    {% if variantsAmount > 1 %}
      {% if isSlideOnLoad %}
        updateVariantImage(element);
      {% else %}
        if (window.hasInitialImageUpdateHappened) {
          updateVariantImage(element);
        }
        window.hasInitialImageUpdateHappened = true;
      {% endif %}
    {% endif %}
  }

  // Buy button handler
  function buyButtonHandler(subscription_selling_plan_id, buttonElement) {
    const selectedBox = productActions.querySelector('.purchase-option-box.selected');
    const selectedGiftContainer = productActions.querySelector('.gift-option-container.selected');
    if (!selectedBox || !selectedGiftContainer) {
      console.error('Please select both a product and a gift.');
      return;
    }

    const giftOptionBorder = selectedGiftContainer.querySelector('.gift-option-border');
    const giftId = giftOptionBorder ? giftOptionBorder.dataset.giftId : null;
    if (!giftId) {
      console.error('Gift ID not found.');
      return;
    }

    toggleButtonLoading(buttonElement, true);

    if (isSubscriptionSelected()) {
      const variant_id = selectedBox.dataset.originalVariant;
      buySubscription(variant_id, 1, subscription_selling_plan_id, giftId);
    } else {
      const variant_id = selectedBox.dataset.variant;
      const purchaseOptionBox = buttonElement.closest('.purchase-option-box');
      const dc = purchaseOptionBox ? purchaseOptionBox.dataset.dc : null;
      redirectToCheckout(variant_id, dc, giftId);
    }
  }

  // Redirect to checkout
  function redirectToCheckout(variant_id, dc, giftId) {
    let checkoutLink = `https://${location.hostname}/cart/${variant_id}:1`;
    if (giftId) {
      checkoutLink += `,${giftId}:1`;
    }
    if (dc) checkoutLink += "?discount=" + atob(dc);
    window.location.href = checkoutLink;
  }

  // Toggle button loading state
  function toggleButtonLoading(buttonElement, isLoading) {
    const loader = buttonElement.querySelector('.loading-overlay__spinner');
    const buttonText = buttonElement.querySelector('.button-text');

    if (!loader) {
      console.error("Loader element not found");
      return;
    }

    loader.style.display = isLoading ? 'block' : 'none';
    buttonText.style.display = isLoading ? 'none' : 'block';
  }

  // Clear cart before adding subscription
  async function clearCart() {
    try {
      const response = await fetch('/cart/clear.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) throw new Error('Failed to clear cart');
      console.log('Cart cleared');
      return true;
    } catch (error) {
      console.log('Failed to clear cart:', error);
      return false;
    }
  }

  // Buy subscription with gift
  async function buySubscription(variant_id, qty, selling_plan, giftId) {
    const cartCleared = await clearCart();
    if (!cartCleared) return;

    // Add main product
    const mainProduct = {
      "id": variant_id,
      "quantity": qty,
      "selling_plan": selling_plan
    };

    // Add gift product
    const giftProduct = {
      "id": giftId,
      "quantity": 1
    };

    try {
      // Add main product to cart
      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(mainProduct)
      });

      // Add gift to cart
      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(giftProduct)
      });

      window.location.href = '/checkout';
    } catch (error) {
      console.log('Failed to add items to cart:', error);
    }
  }
});
</script>

<style>
/* Gift Selector Styles */
.gift-selector-wrap {
  margin: 1rem 0;
}

.gift-option-border {
  transition: all 0.3s ease;
  border: 2px solid #e5e7eb;
  background: #fff;
  width: 120px;
  height: 120px;
}

.gift-option-border:hover {
  border-color: var(--primary-color-light);
}

.gift-option-container.selected .gift-option-border {
  border-color: var(--primary-color);
  background-color: rgba(var(--primary-color-rgb), 0.05);
}

.check-mark {
  transition: all 0.2s ease;
}

.check-mark.hidden {
  display: none;
}

.radio-indicator {
  border-color: var(--primary-color);
  transition: all 0.2s ease;
}

.gift-price {
  font-size: 0.875rem;
}

.original-price {
  color: var(--primary-color-light);
}

.sale-price {
  color: var(--primary-color-dark);
}

/* Purchase Options Styles */
:root {
  --primary-color: {{ buyBoxColor }};
  --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
  --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
}

#cta-section-{{ SID }} .purchase-type button {
  background-color: var(--primary-color);
  color: black;
  border-radius: 5px;
  font-size: 16px;
  min-width: 49%;
  padding: 0.5rem;
}

#cta-section-{{ SID }} .purchase-type button.selected {
  color: white !important;
}

#cta-section-{{ SID }} .purchase-type button:not(.selected) {
  background: var(--primary-color-light);
  border: 1px solid var(--primary-color);
}

#cta-section-{{ SID }} .purchase-option-box .radio-box input[type='radio'] {
  display: none;
}

#cta-section-{{ SID }} .purchase-option-box .radio-box label {
  cursor: pointer;
  width: 19px;
  height: 19px;
  border: 1px solid var(--primary-color);
  border-radius: 50%;
  position: relative;
}

#cta-section-{{ SID }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
  content: '\2713';
  position: absolute;
  top: -2px;
  left: -2px;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--primary-color);
  text-align: center;
  line-height: 22px;
  color: #fff;
}

/* Additional Styles */
.subscription-content,
.buy-once-content,
.subtitle.subscription,
.subtitle.buy-once {
  transition: opacity 0.3s ease-in-out;
  opacity: 0;
  display: none;
}

.subscription-content.active,
.buy-once-content.active,
.subtitle.subscription.active,
.subtitle.buy-once.active {
  opacity: 1;
  display: block;
}
</style>
