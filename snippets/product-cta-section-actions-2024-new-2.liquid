<div id="product-actions-{{ SID }}" class="product-actions">
  <div class="buying-options">
    <h6>Buying Options:</h6>

    <div class="purchase-type mt-2">
      <div class="option one-time-purchase selected">
        <label>
          <input type="radio" name="purchase-type" value="one-time" checked>
          <span class="option-text">One Time Purchase</span>
          <span class="popular-tag">Popular</span>
        </label>

        <div class="quantity-options">
          <div class="quantity-option" data-product-id="8260651352215" data-quantity="1" data-variant-id="44221703979159">
            <input type="radio" name="quantity" id="qty-1" value="1">
            <label for="qty-1">
              <span class="buy-text">Buy 1</span>
              <span class="price"></span>
            </label>
          </div>

          <div class="quantity-option selected" data-product-id="8260651352215" data-quantity="3" data-variant-id="44221702996119">
            <input type="radio" name="quantity" id="qty-3" value="3" checked>
            <label for="qty-3">
              <div class="left-wrapper">
                <span class="buy-text">Buy 3</span>
                <span class="save-tag"></span>
              </div>
              <div class="price-wrapper">
                <span class="price"></span>
                <span class="original-price"></span>
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="option subscription" data-product-id="8228158439575" data-variant-id="44190159274135" data-subscription-plan-id="8556806295">
        <label>
          <input type="radio" name="purchase-type" value="subscription">
          <span class="option-text">Purchase With Subscription</span>
          <span class="best-value-tag">Best Value<br>30% Off</span>
        </label>
      </div>
    </div>

    <button type="submit" class="submit-button">
      Add to Cart

      <div class="loader" style="display: none;">
        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
      </div>
    </button>
  </div>
</div>

<style>
  .product-actions {
    max-width: 400px;
  }

  .purchase-type {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
  }

  .option {
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    transition: all 0.3s ease;
    min-height: 60px;
    display: grid;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s forwards;
  }

  .option > label {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .option input[type="radio"] {
    margin-right: 10px;
  }

  .popular-tag, .best-value-tag {
    margin-left: auto;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
  }

  .popular-tag {
    background-color: #FFEBCD;
  }

  .best-value-tag {
    background-color: #C8EAFF;
    text-align: center;
  }

  .quantity-options {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .quantity-option {
    flex: 1;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
    transition: all 0.3s ease;
    transform: scale(0.95);
    opacity: 0;
    animation: fadeInScale 0.4s forwards;
  }

  .quantity-option.selected {
    border-color: var(--orange);
    border-width: 2px;
    box-shadow: 0 0 5px rgba(225, 188, 65, 0.5);
    transform: scale(1);
  }

  .quantity-option input[type="radio"] {
    display: none;
  }

  .quantity-option label {
    display: flex;
    align-items: center;
    padding: 10px;
    cursor: pointer;
    justify-content: space-between;
    height: 100%;
  }

  .buy-text {
    font-weight: bold;
  }

  .price {
    color: var(--curaslim);
    font-weight: bold;
  }

  .original-price {
    text-decoration: line-through;
    color: #888;
    font-size: 0.9em;
  }

  .save-tag {
    background-color: var(--orange);
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
    margin-top: 5px;
  }

  .submit-button {
    width: 100%;
    padding: 10px;
    background-color: var(--orange);
    color: black;
    border: none;
    border-radius: 100px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
  }

  .submit-button:hover {
    background-color: var(--dark-orange);
    transform: scale(1.05);
  }

  .submit-button:active {
    transform: scale(0.95);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productActions = document.getElementById('product-actions-{{ SID }}');
    const purchaseTypeInputs = productActions.querySelectorAll('.purchase-type input[name="purchase-type"]');
    const quantityOptions = productActions.querySelectorAll('.quantity-option');
    const submitButton = productActions.querySelector('.submit-button');
    const loader = submitButton.querySelector('.loader');  // Ensure loader is correctly selected
    const buttonText = submitButton.querySelector('.button-text');

    const productData = {
        basePrice: 39.90,
        subscriptionDiscount: 0.3,
        bulkDiscounts: {
            3: 0.2
        }
    };

    function init() {
        purchaseTypeInputs.forEach(input => input.addEventListener('change', handlePurchaseTypeChange));
        quantityOptions.forEach(option => option.addEventListener('click', handleQuantityOptionClick));
        submitButton.addEventListener('click', handleSubmit);
        updatePurchaseOptions();
    }

    function handlePurchaseTypeChange(event) {
        const purchaseType = event.target.value;
        updatePurchaseOptions(purchaseType);
    }

    function handleQuantityOptionClick(event) {
        const clickedOption = event.currentTarget;
        selectQuantityOption(clickedOption);
        updatePricing();
    }

    function selectQuantityOption(option) {
        quantityOptions.forEach(opt => opt.classList.remove('selected'));
        option.classList.add('selected');

        setTimeout(() => {
            option.querySelector('input[type="radio"]').checked = true;
        }, 150);
    }

    function updatePurchaseOptions(purchaseType = 'one-time') {
        const isSubscription = purchaseType === 'subscription';
        const quantityOptionsContainer = productActions.querySelector('.quantity-options');

        quantityOptionsContainer.style.opacity = isSubscription ? 0 : 1;
        setTimeout(() => {
            quantityOptionsContainer.style.display = isSubscription ? 'none' : 'flex';
            updatePricing();
            highlightSelectedOption(purchaseType);
        }, 300);
    }

    function highlightSelectedOption(purchaseType) {
        const options = productActions.querySelectorAll('.option');
        options.forEach(option => {
            option.classList.toggle('selected', option.classList.contains(purchaseType === 'subscription' ? 'subscription' : 'one-time-purchase'));
        });
    }

    function updatePricing() {
        const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
        const selectedQuantity = isSubscription ? 1 : parseInt(productActions.querySelector('.quantity-option.selected').dataset.quantity);

        const { price, originalPrice, discount } = calculatePrices(selectedQuantity, isSubscription);

        updateSubmitButton(price, isSubscription);
        updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount);
    }

    function calculatePrices(quantity, isSubscription) {
        const { basePrice, subscriptionDiscount, bulkDiscounts } = productData;
        const bulkDiscount = bulkDiscounts[quantity] || 0;
        const totalDiscount = isSubscription ? subscriptionDiscount : bulkDiscount;

        const originalPrice = basePrice * quantity;
        const discountedPrice = originalPrice * (1 - totalDiscount);

        return {
            price: discountedPrice.toFixed(2),
            originalPrice: originalPrice.toFixed(2),
            discount: totalDiscount
        };
    }

    function updateSubmitButton(price, isSubscription) {
        submitButton.textContent = `${isSubscription ? 'Subscribe Now' : 'Add to Cart'} - £${price}`;
    }

    function updateQuantityOptionPrices(selectedQuantity, price, originalPrice, discount) {
        quantityOptions.forEach(option => {
            const quantity = parseInt(option.dataset.quantity);
            const priceElement = option.querySelector('.price');
            const originalPriceElement = option.querySelector('.original-price');
            const saveTagElement = option.querySelector('.save-tag');

            if (quantity === selectedQuantity) {
                priceElement.textContent = `£${price}`;
                if (discount > 0) {
                    originalPriceElement.textContent = `£${originalPrice}`;
                    originalPriceElement.style.display = 'block';
                    saveTagElement.textContent = `Save ${(discount * 100).toFixed(0)}%`;
                    saveTagElement.style.display = 'block';
                } else {
                    originalPriceElement.style.display = 'none';
                    saveTagElement.style.display = 'none';
                }
            } else {
                const { price: individualPrice } = calculatePrices(quantity, false);
                priceElement.textContent = `£${individualPrice}`;
            }
        });
    }

    function handleSubmit(event) {
        event.preventDefault();
        const isSubscription = productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
        const quantity = isSubscription ? 1 : parseInt(productActions.querySelector('.quantity-option.selected').dataset.quantity);
        const variantId = isSubscription ? productActions.querySelector('.subscription').dataset.variantId : productActions.querySelector('.quantity-option.selected').dataset.variantId;
        const subscriptionPlanId = isSubscription ? productActions.querySelector('.subscription').dataset.subscriptionPlanId : null;

        toggleButtonLoading(submitButton, true);
        buyButtonHandler(variantId, subscriptionPlanId, submitButton);
    }

    function buyButtonHandler(variant_id, subscription_selling_plan_id, buttonElement) {
        toggleButtonLoading(buttonElement, true);
        if (isSubscriptionSelected()) {
            buySubscription(variant_id, 1, subscription_selling_plan_id);
        } else {
            let dc = buttonElement.closest('.purchase-option-box')?.dataset.dc;
            let giftProductID = buttonElement.parentElement.querySelector('.gifts')?.getAttribute('data-bundle-product-id');

            if (giftProductID) {
                redirectToCheckout(giftProductID, dc);
            } else {
                redirectToCheckout(variant_id, dc);
            }
        }
    }

    function isSubscriptionSelected() {
        return productActions.querySelector('input[name="purchase-type"]:checked').value === 'subscription';
    }

    function redirectToCheckout(variant_id, dc) {
        let checkoutLink = `https://${location.hostname}/cart/${variant_id}:1`;
        if (dc) {
            checkoutLink += `?discount=${atob(dc)}`;
        }
        window.location.href = checkoutLink;
    }

    function toggleButtonLoading(buttonElement, isLoading) {
        if (!loader) {
            console.error("Loader element not found. Please ensure the loader is correctly defined in the DOM.");
            return;
        }

        if (isLoading) {
            loader.style.display = 'block';
            if (buttonText) buttonText.style.display = 'none';
        } else {
            loader.style.display = 'none';
            if (buttonText) buttonText.style.display = 'block';
        }
    }

    function clearCart(callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/cart/clear.js',
            success: function() {
                console.log('Cart cleared');
                callback();
            },
            error: function() {
                console.log('Failed to clear cart');
            }
        });
    }

    function buySubscription(variant_id, qty, selling_plan) {
        clearCart(function() {
            let data = {
                "id": variant_id,
                "quantity": qty,
                "selling_plan": selling_plan
            };

            jQuery.ajax({
                type: 'POST',
                url: '/cart/add.js',
                data: data,
                dataType: 'json',
                success: function() {
                    console.log('Subscription added to cart');
                    window.location.href = '/checkout';
                },
                error: function() {
                    console.log('Failed to add subscription to cart');
                    toggleButtonLoading(submitButton, false);
                }
            });
        });
    }

    init();
});
</script>
