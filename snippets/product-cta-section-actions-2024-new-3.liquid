{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, index: forloop.index %}
    {% endfor %}

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.65rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px; /* Start all boxes collapsed */
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content; /* Allow selected box to expand */
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-options .purchase-type {
    font-weight: 600px;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
      padding: 3vw;
      max-height: 16vw;

      &.selected {
        max-height: none;
      }

      .top-wrapper {
        min-height: 9vw;
      }

      .left-wrapper {
        gap: 2vw;
      }

      .option-title {
        font-size: 3.5vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .subscription-terms {
        .subtitle, .terms-title {
          font-size: 3.5vw;
        }
      }

      .radio-box {
        label {
          width: 3vw;
          height: 3vw;

          &:after {
            font-size: 2vw;
            width: 3vw !important;
            height: 3vw !important;
            top: -0.25vw !important;
            left: -0.25vw !important;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }

    #cta-section-{{ section.id }} .purchase-option-box.selected {
      max-height: max-content;
    }

    #cta-section-{{ section.id }} .purchase-option-box[inert] {
      max-height: 16vw !important;
    }
  }
</style>

<script>
  // Configuration object containing all static values and settings
const CONFIG = {
  SID: '{{ SID }}',
  enableToggleAnimation: {{ isVariantBoxToggle | default: false }},
  defaultSelectionIndex: {{ defaultSelectionIndex | default: 1 }},
  variantsAmount: {{ variantsAmount }},
  isSlideOnLoad: {{ isSlideOnLoad | default: false }},
  animationDuration: 500, // milliseconds
  mobileBreakpoint: 767 // pixels
};

// Cache DOM elements for better performance
const DOM = {
  productActions: document.getElementById(`product-actions-${CONFIG.SID}`),
  purchaseOptionBoxes: null,
  purchaseTypeButtons: null,
  subscriptionButton: null,
  submitSellingPlanId: null,
  submitVariantId: null,
  bwpButton: null,

  // Initialize DOM cache
  init() {
    this.purchaseOptionBoxes = this.productActions.querySelectorAll('.purchase-option-box');
    this.purchaseTypeButtons = this.productActions.querySelectorAll('.purchase-type button');
    this.subscriptionButton = this.productActions.querySelector('.purchase-type button.subscription');
    this.submitSellingPlanId = this.productActions.querySelector('.submit-selling-plan-id');
    this.submitVariantId = this.productActions.querySelector('.submit-variant-id');
    this.bwpButton = this.productActions.querySelector('.bwp-button');
  }
};

// Utility functions for common operations
const Util = {
  formatPrice: (cents) => (cents / 100).toFixed(2),

  getClosedHeight: () =>
    window.innerWidth <= CONFIG.mobileBreakpoint ? '16vw' : '72px',

  isSubscriptionSelected: () =>
    DOM.subscriptionButton.classList.contains('selected')
};

// Application state management
const State = {
  hasInitialImageUpdateHappened: false
};

// Module for handling purchase box operations
const PurchaseBox = {
  // Toggle visibility of subscription and one-time purchase content
  toggleContent(parentBox, isSubscriptionSelected) {
    const elements = {
      subscriptionContent: parentBox.querySelector('.subscription'),
      buyOnceContent: parentBox.querySelector('.buy-once'),
      subscriptionTerms: parentBox.querySelector('.subscription-terms'),
      perMonth: parentBox.querySelector('.per-month')
    };
    const sellingPlanId = parentBox.dataset.subscriptionSellingPlanId;

    // Show/hide elements based on subscription selection
    elements.perMonth.style.display = isSubscriptionSelected ? '' : 'none';
    DOM.bwpButton.style.display = isSubscriptionSelected ? 'none' : '';
    elements.subscriptionContent.style.display = isSubscriptionSelected ? '' : 'none';
    elements.buyOnceContent.style.display = isSubscriptionSelected ? 'none' : '';

    // Handle inert attribute and selected state
    const isInert = isSubscriptionSelected && parseInt(sellingPlanId) <= 0;
    parentBox.toggleAttribute('inert', isInert);
    if (isInert) {
      parentBox.classList.remove('selected');
    }

    // Show subscription terms only if selected and in subscription mode
    elements.subscriptionTerms.style.display =
      isSubscriptionSelected && parentBox.classList.contains('selected') ? '' : 'none';
  },

  // Update price display for a purchase box
  updatePriceDisplay(parentBox, isSubscriptionSelected) {
    const priceData = this.getPriceData(parentBox, isSubscriptionSelected);
    const elements = this.getPriceElements(parentBox, isSubscriptionSelected);

    // Update price displays
    elements.priceElement.textContent = '$' + Util.formatPrice(priceData.displayPrice);
    if (elements.totalPriceElement) {
      elements.totalPriceElement.textContent = '$' + Util.formatPrice(priceData.totalPrice);
    }

    // Handle compared-at price
    this.updateComparedAtPrice(elements.comparedAtPriceElement, priceData);

    // Show appropriate save tag and toggle per-month display
    elements.saveTag.style.display = '';
    elements.saveTag.nextElementSibling.style.display = 'none';
    elements.perMonth.style.display = priceData.pricePer === 'month' ? '' : 'none';
  },

  // Get price-related data for a purchase box
  getPriceData(parentBox, isSubscriptionSelected) {
    const data = parentBox.dataset;
    const itemPrice = parseInt(data.itemPrice);
    const subscriptionItemPrice = parseInt(data.subscriptionItemPrice);
    const bottleQuantity = parseInt(data.bottleQuantity) || 1;
    const originalItemCap = parseInt(data.originalItemCap);
    const pricePer = data.pricePer || 'total';

    const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
    const totalPrice = currentPrice * bottleQuantity;
    const displayPrice = pricePer === 'month' ? currentPrice : totalPrice;

    return { currentPrice, totalPrice, displayPrice, bottleQuantity, originalItemCap, pricePer };
  },

  // Get price-related DOM elements for a purchase box
  getPriceElements(parentBox, isSubscriptionSelected) {
    const priceType = isSubscriptionSelected ? 'subscription' : 'buy-once';
    return {
      priceElement: parentBox.querySelector(`.real-price.${priceType} .floor`),
      totalPriceElement: parentBox.querySelector(`.total-price.${priceType} .floor`),
      comparedAtPriceElement: parentBox.querySelector('.compared-at-price'),
      saveTag: parentBox.querySelector(`.save-title.${priceType}`),
      perMonth: parentBox.querySelector('.per-month')
    };
  },

  // Update the compared-at price display
  updateComparedAtPrice(element, priceData) {
    if (priceData.originalItemCap > priceData.currentPrice) {
      const comparedAtPrice = priceData.pricePer === 'month'
        ? priceData.originalItemCap
        : (priceData.originalItemCap * priceData.bottleQuantity);
      element.textContent = '$' + Util.formatPrice(comparedAtPrice);
      element.style.display = '';
    } else {
      element.style.display = 'none';
    }
  },

  // Adjust the max-height of a purchase box for animation
  adjustMaxHeight(element, isSelected) {
    if (CONFIG.enableToggleAnimation) {
      if (isSelected) {
        const scrollHeight = element.scrollHeight;
        element.style.maxHeight = scrollHeight + 'px';
        element.querySelector('.toggle-icon').style.display = '';
        setTimeout(() => element.style.maxHeight = 'max-content', CONFIG.animationDuration);
      } else {
        element.style.maxHeight = Util.getClosedHeight();
        element.querySelector('.toggle-icon').style.display = 'none';
      }
    } else {
      element.style.maxHeight = 'none';
    }
  },

  // Animate the selected purchase box
  animateSelectedBox(element) {
    if (CONFIG.enableToggleAnimation) {
      const scrollHeight = element.scrollHeight;
      element.style.maxHeight = scrollHeight + 'px';
      element.querySelector('.toggle-icon').style.display = '';
      setTimeout(() => element.style.maxHeight = 'max-content', CONFIG.animationDuration);
    } else {
      element.style.maxHeight = 'max-content';
      element.querySelector('.toggle-icon').style.display = '';
    }
  }
};

// Module for handling image-related operations
const ImageHandler = {
  // Update the variant image based on the selected purchase box
  updateVariantImage(element) {
    if (CONFIG.variantsAmount > 1) {
      if (CONFIG.isSlideOnLoad || State.hasInitialImageUpdateHappened) {
        const slideIndex = this.calculateSlideIndex(element);
        window.productSliderAllInOne[CONFIG.SID].slideTo(slideIndex);
      }
      State.hasInitialImageUpdateHappened = true;
    }
  },

  // Calculate the slide index for the variant image
  calculateSlideIndex(element) {
    const totalSlides = window.productSliderAllInOne[CONFIG.SID].slides.length;
    const elementIndex = parseInt(element.dataset.index);
    return totalSlides - (CONFIG.variantsAmount + 1 - elementIndex);
  }
};

// Main application logic
const App = {
  // Initialize the application
  init() {
    DOM.init();
    this.initializePurchaseOptions();
    this.bindEvents();
  },

  // Set up initial purchase options
  initializePurchaseOptions() {
    const defaultVariant = this.getDefaultVariant();
    DOM.subscriptionButton.click();
    this.selectInitialVariant(defaultVariant);
    this.setupNonSelectedVariants(defaultVariant);
  },

  // Get the default variant from URL or config
  getDefaultVariant() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('default-variant')
      ? parseInt(urlParams.get('default-variant'))
      : CONFIG.defaultSelectionIndex;
  },

  // Select the initial variant
  selectInitialVariant(defaultVariant) {
    const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;
    const initialVariant = DOM.purchaseOptionBoxes[initialVariantIndex];
    initialVariant.click();
    initialVariant.querySelector("input[type='radio']").checked = true;
  },

  // Set up non-selected variants
  setupNonSelectedVariants(defaultVariant) {
    const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;
    DOM.purchaseOptionBoxes.forEach((box, index) => {
      if (index !== initialVariantIndex) {
        box.style.maxHeight = Util.getClosedHeight();
        box.querySelector('.toggle-icon').style.display = 'none';
        box.querySelector('.subscription-terms').style.display = 'none';
      }
    });
  },

  // Toggle between subscription and one-time purchase
  togglePurchaseType(isSubscriptionSelected) {
    DOM.purchaseOptionBoxes.forEach(box => {
      PurchaseBox.toggleContent(box, isSubscriptionSelected);
      PurchaseBox.updatePriceDisplay(box, isSubscriptionSelected);
      PurchaseBox.adjustMaxHeight(box, box.classList.contains('selected'));
    });

    this.ensureSelectedOption();
  },

  // Ensure at least one option is selected
  ensureSelectedOption() {
    const selectedBox = Array.from(DOM.purchaseOptionBoxes).find(box => box.classList.contains('selected'));
    if (!selectedBox) {
      const firstAvailableBox = Array.from(DOM.purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
      if (firstAvailableBox) firstAvailableBox.click();
    }
  },

  // Handle purchase box selection
  togglePurchaseBox(element) {
    if (element.classList.contains('selected')) return;

    this.unselectAllBoxes();
    this.updateFormValues(element);
    this.selectBox(element);
    this.updateDisplay(element);
  },

  // Unselect all purchase boxes
  unselectAllBoxes() {
    DOM.purchaseOptionBoxes.forEach(box => {
      box.classList.remove('selected');
      box.style.maxHeight = Util.getClosedHeight();
      box.querySelector('.toggle-icon').style.display = 'none';
      box.querySelector('.subscription-terms').style.display = 'none';
    });
  },

  // Update form values based on selected box
  updateFormValues(element) {
    const isSubscription = Util.isSubscriptionSelected();
    const subscriptionPlanID = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
    const variantID = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

    DOM.submitSellingPlanId.value = subscriptionPlanID;
    DOM.submitVariantId.value = variantID;
  },

  // Select the chosen purchase box
  selectBox(element) {
    element.classList.add('selected');
    element.querySelector("input[type='radio']").checked = true;
  },

  // Update display after selecting a purchase box
  updateDisplay(element) {
    const isSubscription = Util.isSubscriptionSelected();
    this.togglePurchaseType(isSubscription);
    ImageHandler.updateVariantImage(element);
    PurchaseBox.animateSelectedBox(element);
  },

  // Bind event listeners
  bindEvents() {
    this.bindPurchaseTypeSelection();
    this.bindPurchaseBoxSelection();
    this.bindWindowResize();
  },

  // Bind purchase type selection event
  bindPurchaseTypeSelection() {
    DOM.productActions.addEventListener('click', event => {
      const button = event.target.closest('.purchase-type button');
      if (button) {
        event.preventDefault();
        const isSubscription = button.classList.contains('subscription');
        DOM.purchaseTypeButtons.forEach(btn => btn.classList.remove('selected'));
        button.classList.add('selected');
        this.togglePurchaseType(isSubscription);
      }
    });
  },

  // Bind purchase box selection event
  bindPurchaseBoxSelection() {
    DOM.productActions.addEventListener('click', event => {
      const box = event.target.closest('.purchase-option-box');
      if (box) {
        event.preventDefault();
        this.togglePurchaseBox(box);
      }
    });
  },

  // Bind window resize event
  bindWindowResize() {
    let resizeTimer;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        DOM.purchaseOptionBoxes.forEach(box => {
          if (!box.classList.contains('selected')) {
            box.style.maxHeight = Util.getClosedHeight();
          } else {
            PurchaseBox.adjustMaxHeight(box, true);
          }
        });
      }, 250);
    });
  }
};

// Initialize the application when the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  App.init();
});
</script>