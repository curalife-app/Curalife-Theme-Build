{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, index: forloop.index %}
    {% endfor %}

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.65rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px; /* Start all boxes collapsed */
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content; /* Allow selected box to expand */
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-options .purchase-type {
    font-weight: 600px;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
      padding: 3vw;
      max-height: 16vw;

      &.selected {
        max-height: none;
      }

      .top-wrapper {
        min-height: 9vw;
      }

      .left-wrapper {
        gap: 2vw;
      }

      .option-title {
        font-size: 3.5vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .subscription-terms {
        .subtitle, .terms-title {
          font-size: 3.5vw;
        }
      }

      .radio-box {
        label {
          width: 3vw;
          height: 3vw;

          &:after {
            font-size: 2vw;
            width: 3vw !important;
            height: 3vw !important;
            top: -0.25vw !important;
            left: -0.25vw !important;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }

    #cta-section-{{ section.id }} .purchase-option-box.selected {
      max-height: max-content;
    }

    #cta-section-{{ section.id }} .purchase-option-box[inert] {
      max-height: 16vw !important;
    }
  }
</style>

<script>
  $(document).ready(function() {
  const $productActions = $("#product-actions-{{ SID }}");
  const $purchaseOptionBoxes = $productActions.find('.purchase-option-box');
  const enableToggleAnimation = {{ isVariantBoxToggle | default: false }};

  // Helper functions
  function isSubscriptionSelected() {
    return $('#product-actions-{{ SID }} .purchase-type button.subscription').hasClass('selected');
  }

  function getClosedHeight() {
    return window.innerWidth <= 767 ? '16vw' : '72px';
  }

  function formatPrice(cents) {
    return (cents / 100).toFixed(2);
  }

  // Initialization
  function initializePurchaseOptions() {
    const urlParams = new URLSearchParams(window.location.search);
    const defaultVariant = urlParams.get('default-variant') ? parseInt(urlParams.get('default-variant')) : {{ defaultSelectionIndex | default: 1 }};

    $('#product-actions-{{ SID }} .purchase-type .subscription').trigger('click');

    const initialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
    $purchaseOptionBoxes.eq(initialDefaultVariant).trigger('click').find("input[type='radio']").prop('checked', true);

    $purchaseOptionBoxes.not(':eq(' + initialDefaultVariant + ')').each(function() {
      $(this).css('max-height', getClosedHeight());
      $(this).find('.toggle-icon').hide();
      $(this).find('.subscription-terms').hide();
    });
  }

  // Toggle functions
  function togglePurchaseType(isSubscriptionSelected) {
    $purchaseOptionBoxes.each(function() {
      const parentBox = $(this);
      const subscriptionContent = parentBox.find('.subscription');
      const buyOnceContent = parentBox.find('.buy-once');
      const bwpButton = $('#product-actions-{{ SID }} .bwp-button');
      const subscriptionTerms = parentBox.find('.subscription-terms');

      toggleContentVisibility(parentBox, isSubscriptionSelected, subscriptionContent, buyOnceContent, bwpButton);
      updatePriceDisplay(parentBox, isSubscriptionSelected);
      adjustMaxHeight(parentBox, isSubscriptionSelected);
    });

    if (!$purchaseOptionBoxes.filter('.selected').length) {
      $purchaseOptionBoxes.filter(':not([inert])').first().trigger('click');
    }
  }

  function toggleContentVisibility(parentBox, isSubscriptionSelected, subscriptionContent, buyOnceContent, bwpButton) {
    parentBox.find('.per-month').toggle(isSubscriptionSelected);
    bwpButton.toggle(!isSubscriptionSelected);

    // Fade out current content
    const currentContent = isSubscriptionSelected ? buyOnceContent : subscriptionContent;
    currentContent.fadeOut(300, function() {
      // Fade in new content
      const newContent = isSubscriptionSelected ? subscriptionContent : buyOnceContent;
      newContent.fadeIn(300);
    });

    const sellingPlanId = parentBox.data('subscription-selling-plan-id');
    parentBox.attr('inert', isSubscriptionSelected && sellingPlanId <= 0 ? '' : null);

    if (isSubscriptionSelected && sellingPlanId <= 0) {
      parentBox.removeClass('selected');
    }

    // Fade in/out subscription terms
    if (isSubscriptionSelected && parentBox.hasClass('selected')) {
      parentBox.find('.subscription-terms').fadeIn(300);
    } else {
      parentBox.find('.subscription-terms').fadeOut(300);
    }
  }

  function togglePurchaseBox(element) {
    const isSubscription = isSubscriptionSelected();
    const wasSelected = element.hasClass('selected');
    const subscriptionPlanID = isSubscription ? element.data('subscription-selling-plan-id') : '';
    const variantID = isSubscription ? element.data('original-variant') : element.data('variant');

    if (wasSelected) {
      return;
    }

    $purchaseOptionBoxes.removeClass('selected').each(function() {
      $(this).animate({ maxHeight: getClosedHeight() }, 300);
      $(this).find('.toggle-icon').fadeOut(300);
      $(this).find('.subscription-terms').fadeOut(300);
    });

    $('#product-actions-{{ SID }} .submit-selling-plan-id').val(subscriptionPlanID);
    $('#product-actions-{{ SID }} .submit-variant-id').val(variantID);

    element.addClass('selected');
    element.find("input[type='radio']").prop('checked', true);

    togglePurchaseType(isSubscription);
    updateVariantImage(element);
    animateSelectedBox(element);
  }

  // Update functions
  function updatePriceDisplay(parentBox, isSubscriptionSelected) {
    const itemPrice = parseInt(parentBox.data('item-price'));
    const subscriptionItemPrice = parseInt(parentBox.data('subscription-item-price'));
    const bottleQuantity = parseInt(parentBox.data('bottle-quantity') || 1);
    const originalItemCap = parseInt(parentBox.data('original-item-cap'));

    const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
    const totalPrice = currentPrice * bottleQuantity;

    const pricePer = parentBox.data('price-per') || 'total';

    updatePriceElements(parentBox, isSubscriptionSelected, currentPrice, totalPrice, pricePer, originalItemCap, bottleQuantity);
  }

  function updatePriceElements(parentBox, isSubscriptionSelected, currentPrice, totalPrice, pricePer, originalItemCap, bottleQuantity) {
    const priceElement = parentBox.find('.real-price' + (isSubscriptionSelected ? '.subscription' : '.buy-once') + ' .floor');
    const totalPriceElement = parentBox.find('.total-price' + (isSubscriptionSelected ? '.subscription' : '.buy-once') + ' .floor');
    const comparedAtPriceElement = parentBox.find('.compared-at-price');

    const displayPrice = pricePer === 'month' ? currentPrice : totalPrice;

    // Fade out, update, and fade in price elements
    priceElement.fadeOut(300, function() {
      $(this).text('$' + formatPrice(displayPrice)).fadeIn(300);
    });

    if (totalPriceElement.length) {
      totalPriceElement.fadeOut(300, function() {
        $(this).text('$' + formatPrice(totalPrice)).fadeIn(300);
      });
    }

    updateComparedAtPrice(comparedAtPriceElement, originalItemCap, currentPrice, pricePer, bottleQuantity);

    const saveTag = parentBox.find('.save-title' + (isSubscriptionSelected ? '.subscription' : '.buy-once'));
    saveTag.fadeIn(300).siblings('.save-title').fadeOut(300);

    parentBox.find('.per-month').toggle(pricePer === 'month');
  }

  function updateComparedAtPrice(element, originalItemCap, currentPrice, pricePer, bottleQuantity) {
    if (originalItemCap > currentPrice) {
      const comparedAtPrice = pricePer === 'month' ? originalItemCap : (originalItemCap * bottleQuantity);
      element.fadeOut(300, function() {
        $(this).text('$' + formatPrice(comparedAtPrice)).fadeIn(300);
      });
    } else {
      element.fadeOut(300);
    }
  }

  function updateVariantImage(element) {
    {% if variantsAmount > 1 %}
      {% if isSlideOnLoad %}
        let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
        window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
      {% else %}
        if (window.hasInitialImageUpdateHappened) {
          let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
          window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
        }
        window.hasInitialImageUpdateHappened = true;
      {% endif %}
    {% endif %}
  }

  // Animation functions
  function adjustMaxHeight(element, isSubscriptionSelected) {
    if (enableToggleAnimation) {
      if (element.hasClass('selected')) {
        const scrollHeight = element.prop('scrollHeight');
        element.animate({ maxHeight: scrollHeight }, 300, function() {
          $(this).css('max-height', 'max-content');
        });
        element.find('.toggle-icon').fadeIn(300);
      } else {
        element.animate({ maxHeight: getClosedHeight() }, 300);
        element.find('.toggle-icon').fadeOut(300);
      }
    } else {
      element.css('max-height', 'none');
    }
  }

  function animateSelectedBox(element) {
    if (enableToggleAnimation) {
      const scrollHeight = element.prop('scrollHeight');
      element.animate({ maxHeight: scrollHeight }, 300, function() {
        $(this).css('max-height', 'max-content');
      });
      element.find('.toggle-icon').fadeIn(300);
    } else {
      element.css('max-height', 'max-content');
      element.find('.toggle-icon').show();
    }
  }

  // Event listeners
  $productActions.on('click', '.purchase-type button', function(event) {
    event.preventDefault();
    const isSubscription = $(this).hasClass('subscription');

    $('#product-actions-{{ SID }} .purchase-type button').removeClass('selected');
    $(this).addClass('selected');

    togglePurchaseType(isSubscription);
  });

  $productActions.on('click', '.purchase-option-box', function(event) {
    event.preventDefault();
    togglePurchaseBox($(this));
  });

  $(window).on('resize', function() {
    $purchaseOptionBoxes.not('.selected').css('max-height', getClosedHeight());
    $purchaseOptionBoxes.filter('.selected').each(function() {
      adjustMaxHeight($(this), isSubscriptionSelected());
    });
  });

  // Initialize
  initializePurchaseOptions();
});
</script>